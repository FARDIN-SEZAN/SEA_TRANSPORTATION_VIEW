
#include <iostream>
#include<GL/gl.h>
#include <windows.h>
#include <GL/glut.h>
#include <math.h>
#include<time.h>
using namespace std;


bool day = true;
bool screenOne=true;
bool screenTwo=false;
bool screenThree=false;
bool screenFour=false;
float rain = 0;
bool rainyDay = false;



void d_sky()//SK01
{
    if(day)
    {
    glBegin(GL_POLYGON);

	glColor3ub(185, 211, 238);

	glVertex2f(-10,10);
	glVertex2f(10,10);
	glVertex2f(10,6);
	glVertex2f(-10,6);
	glVertex2f(-10,10);

	glEnd();
    }

    else{
    glBegin(GL_POLYGON);

    glColor3ub(0,0,0);

	glVertex2f(-10,10);
	glVertex2f(10,10);
	glVertex2f(10,6);
	glVertex2f(-10,6);
	glVertex2f(-10,10);

	glEnd();

        }



}



void d_sea()//SE01
{
    if(day)
    {
    glBegin(GL_POLYGON);
	glColor3ub(40,141,218);

	glVertex2f(-10,6);
	glVertex2f(10,6);
	glVertex2f(10,-1.34);
	glVertex2f(-10,-1.34);
	glVertex2f(-10,6);

	glEnd();
    }

    else
    {
    glBegin(GL_POLYGON);
	glColor3ub(25,112,179);

	glVertex2f(-10,6);
	glVertex2f(10,6);
	glVertex2f(10,-1.34);
	glVertex2f(-10,-1.34);
	glVertex2f(-10,6);

	glEnd();
    }
}




void d_portroad()//PR01
{
    if (day)
    {
    glBegin(GL_POLYGON); //port part

	glColor3ub(192,192,192);

	glVertex2f(-10,-1.34);
	glVertex2f(10,-1.34);
	glVertex2f(10,-6.32);
	glVertex2f(-10,-6.32);
	glVertex2f(-10,-1.34);

	glEnd();

	glBegin(GL_POLYGON);// road part

	glColor3ub(32, 32, 32);

	glVertex2f(-10,-6.32);
	glVertex2f(10, -6.32);
	glVertex2f(10,-10);
	glVertex2f(-10,-10);
	glVertex2f(-10,-6.32);

	glEnd();

	glBegin(GL_LINES); // road line
	{

	glColor3ub(255,255,255);

	glVertex2f(-9.3557055127249, -8.2498337933142);
	glVertex2f(-6.9693568427018, -8.2424065762464);

	glVertex2f(-5.465832747979, -8.2664907669526);
	glVertex2f(-3.0794840779559, -8.2590635498848);

	glVertex2f(-1.5956252403226, -8.2921937043113);
	glVertex2f(0.7907234297005, -8.2847664872435);

	glVertex2f(2.2729097074813, -8.2750925033365);
	glVertex2f(4.6592583775044, -8.2676652862687);

	glVertex2f(6.3527092256592, -8.2873856452123);
	glVertex2f(8.7434437631259, -8.2501438294064);
	}
	glEnd();
    }


    else{
        glBegin(GL_POLYGON); //port part

	glColor3ub(144,144,144);

	glVertex2f(-10,-1.34);
	glVertex2f(10,-1.34);
	glVertex2f(10,-6.32);
	glVertex2f(-10,-6.32);
	glVertex2f(-10,-1.34);

	glEnd();

	glBegin(GL_POLYGON);// road part

	glColor3ub(10,10,10);

	glVertex2f(-10,-6.32);
	glVertex2f(10, -6.32);
	glVertex2f(10,-10);
	glVertex2f(-10,-10);
	glVertex2f(-10,-6.32);

	glEnd();

	glBegin(GL_LINES); // road line
	{

	glColor3ub(255,255,255);

	glVertex2f(-9.3557055127249, -8.2498337933142);
	glVertex2f(-6.9693568427018, -8.2424065762464);

	glVertex2f(-5.465832747979, -8.2664907669526);
	glVertex2f(-3.0794840779559, -8.2590635498848);

	glVertex2f(-1.5956252403226, -8.2921937043113);
	glVertex2f(0.7907234297005, -8.2847664872435);

	glVertex2f(2.2729097074813, -8.2750925033365);
	glVertex2f(4.6592583775044, -8.2676652862687);

	glVertex2f(6.3527092256592, -8.2873856452123);
	glVertex2f(8.7434437631259, -8.2501438294064);
	}
	glEnd();
        }
}




void d_wearhouse()//WH01
{
    if (day)
    {
    glBegin(GL_POLYGON); //01

	glColor3ub(102, 51, 0);

	glVertex2f(-9.4652143618701, -6.0695712762597);
	glVertex2f(-9.4667256593182, -4.9312903751041);
	glVertex2f(-9.1714164056074, -4.5606471280997);
	glVertex2f(-8.8866539109578, -4.8951300583232);
	glVertex2f(-8.8813805314272, -6.079380432898);
	glVertex2f(-9.4652143618701, -6.0695712762597);

	glEnd();

	glBegin(GL_POLYGON);

	glVertex2f(-9.4667256593182, -4.9312903751041);
	glVertex2f(-9.4652143618701, -2.0695712762597);
	glVertex2f(-9.1555962670158, -1.7943828943601);
	glVertex2f(-8.90774742908, -2.1831062997548);
	glVertex2f(-8.8866539109578, -4.8951300583232);
	glVertex2f(-9.1714164056074, -4.5606471280997);
	glVertex2f(-9.4667256593182, -4.9312903751041);

	glEnd();


	glBegin(GL_LINES);

	glColor3ub(1, 1, 1);

	glVertex2f(-9.4652143618701, -6.0695712762597); //KL
	glVertex2f(-9.4667256593182, -4.9312903751041);

	glVertex2f(-9.4667256593182, -4.9312903751041);//LM
	glVertex2f(-9.1714164056074, -4.5606471280997);

	glVertex2f(-9.1714164056074, -4.5606471280997);//MN
	glVertex2f(-8.8801296649934, -4.8703927484479);

	glVertex2f(-8.8801296649934, -4.8703927484479);//NO
	glVertex2f(-8.8813805314272, -6.079380432898);

	glVertex2f(-9.4667256593182, -4.9312903751041);//LR
	glVertex2f(-9.4652143618701, -2.0695712762597);

	glVertex2f(-9.4652143618701, -2.0695712762597);//RP
	glVertex2f(-9.1764665505223, -1.8513851309778);

	glVertex2f(-9.1764665505223, -1.8513851309778);//PQ
	glVertex2f(-8.90774742908, -2.1831062997548);

    glVertex2f(-8.90774742908, -2.1831062997548);//QN
	glVertex2f(-8.8801296649934, -4.8703927484479);

	glVertex2f(-8.8801296649934, -4.8703927484479);//NM
	glVertex2f(-9.1714164056074, -4.5606471280997);

	glVertex2f(-9.1714164056074, -4.5606471280997);//MP
	glVertex2f(-9.1764665505223, -1.8513851309778);

	glEnd();


	glBegin(GL_QUADS);//door
	{
	    glColor3ub(1,1,1);

	    glVertex2f(-9.3132498675475, -6.0712171703549);
	    glVertex2f(-9.3096739967174, -5.2068781068508);
	    glVertex2f(-9.0057249761589, -5.2068781068508);
	    glVertex2f(-9.0021491053288, -6.0773472346351);
	}

	glEnd();





	glBegin(GL_POLYGON); //02

	glColor3ub(102, 51, 0);

	glVertex2f(-8.7194838223924, -6.0591566488797);
	glVertex2f(-8.7284525250413, -5.048811404642);
	glVertex2f(-8.4384166508611, -4.7776090287852);
	glVertex2f(-8.1589275357419, -5.0216911670564);
	glVertex2f(-8.149091169263, -6.0413781765744);
	glVertex2f(-8.7194838223924, -6.0591566488797);

	glEnd();

	glBegin(GL_POLYGON);

	glVertex2f(-8.7284525250413, -5.048811404642);
	glVertex2f(-8.7389992841024, -2.0836654286073);
	glVertex2f(-8.4568410880528, -1.7789027224012);
	glVertex2f(-8.1958411924558, -2.1198257453882);
	glVertex2f(-8.1589275357419, -5.0216911670564);
	glVertex2f(-8.4384166508611, -4.7776090287852);
	glVertex2f(-8.7284525250413, -5.048811404642);

	glEnd();


	glBegin(GL_LINES);

	glColor3ub(1, 1, 1);

	glVertex2f(-8.7194838223924, -6.0591566488797); //KL
	glVertex2f(-8.7284525250413, -5.048811404642);

	glVertex2f(-8.7284525250413, -5.048811404642);//LM
	glVertex2f(-8.4384166508611, -4.7776090287852);

	glVertex2f(-8.4384166508611, -4.7776090287852);//MN
	glVertex2f(-8.1589275357419, -5.0216911670564);

	glVertex2f(-8.1589275357419, -5.0216911670564);//NO
	glVertex2f(-8.149091169263, -6.0413781765744);

	glVertex2f(-8.7284525250413, -5.048811404642);//LR
	glVertex2f(-8.7389992841024, -2.0836654286073);

	glVertex2f(-8.7389992841024, -2.0836654286073);//RP
	glVertex2f(-8.4568410880528, -1.7789027224012);

	glVertex2f(-8.4568410880528, -1.7789027224012);//PQ
	glVertex2f(-8.1958411924558, -2.1198257453882);

    glVertex2f(-8.1958411924558, -2.1198257453882);//QN
	glVertex2f(-8.1589275357419, -5.0216911670564);

	glVertex2f(-8.1589275357419, -5.0216911670564);//NM
	glVertex2f(-8.4384166508611, -4.7776090287852);

	glVertex2f(-8.4384166508611, -4.7776090287852);//MP
	glVertex2f(-8.4568410880528, -1.7789027224012);

	glEnd();


	glBegin(GL_QUADS);//door
	{
	    glColor3ub(1,1,1);

	    glVertex2f(-8.5802841796094, -6.027237407515);
	    glVertex2f(-8.5767083087793, -5.1628983440109);
	    glVertex2f(-8.2727592882209, -5.1628983440109);
	    glVertex2f(-8.2691834173908, -6.0333674717952);
	}

	glEnd();




	glBegin(GL_POLYGON); //03

	glColor3ub(102, 51, 0);

	glVertex2f(-8.041926488978, -6.0650828063148);
	glVertex2f(-8.0481865656004, -5.0126510878611);
	glVertex2f(-7.7897909686035, -4.7504887911995);
	glVertex2f(-7.4997550944233, -4.9945709294707);
	glVertex2f(-7.495732312042, -6.0532304914446);
	glVertex2f(-8.041926488978, -6.0650828063148);

	glEnd();

	glBegin(GL_POLYGON);

	glVertex2f(-8.0481865656004, -5.0126510878611);
	glVertex2f(-8.053459945131, -2.110785666193);
	glVertex2f(-7.8003377276646, -1.7763027359696);
	glVertex2f(-7.5366687511371, -2.1017455869978);
	glVertex2f(-7.4997550944233, -4.9945709294707);
	glVertex2f(-7.7897909686035, -4.7504887911995);
	glVertex2f(-8.0481865656004, -5.0126510878611);

	glEnd();


	glBegin(GL_LINES);

	glColor3ub(1, 1, 1);

	glVertex2f(-8.041926488978, -6.0650828063148); //KL
	glVertex2f(-8.0481865656004, -5.0126510878611);

	glVertex2f(-8.0481865656004, -5.0126510878611);//LM
	glVertex2f(-7.7897909686035, -4.7504887911995);

	glVertex2f(-7.7897909686035, -4.7504887911995);//MN
	glVertex2f(-7.4997550944233, -4.9945709294707);

	glVertex2f(-7.4997550944233, -4.9945709294707);//NO
	glVertex2f(-7.495732312042, -6.0532304914446);

	glVertex2f(-8.0481865656004, -5.0126510878611);//LR
	glVertex2f(-8.053459945131, -2.110785666193);

	glVertex2f(-8.053459945131, -2.110785666193);//RP
	glVertex2f(-7.8003377276646, -1.7763027359696);

	glVertex2f(-7.8003377276646, -1.7763027359696);//PQ
	glVertex2f(-7.5366687511371, -2.1017455869978);

    glVertex2f(-7.5366687511371, -2.1017455869978);//QN
	glVertex2f(-7.4997550944233, -4.9945709294707);

	glVertex2f(-7.4997550944233, -4.9945709294707);//NM
	glVertex2f(-7.7897909686035, -4.7504887911995);

	glVertex2f(-7.7897909686035, -4.7504887911995);//MP
	glVertex2f(-7.8003377276646, -1.7763027359696);

	glEnd();


	glBegin(GL_QUADS);//door
	{
	    glColor3ub(1,1,1);

	    glVertex2f(-7.9245815795913, -6.0326065550499);
	    glVertex2f(-7.9229314022392, -5.159373940202);
	    glVertex2f(-7.6189823816808, -5.159373940202);
	    glVertex2f(-7.6185259097651, -6.0368038899504);
	}

	glEnd();
    }


    else{
            glBegin(GL_POLYGON); //01

	glColor3ub(85, 43, 0);

	glVertex2f(-9.4652143618701, -6.0695712762597);
	glVertex2f(-9.4667256593182, -4.9312903751041);
	glVertex2f(-9.1714164056074, -4.5606471280997);
	glVertex2f(-8.8866539109578, -4.8951300583232);
	glVertex2f(-8.8813805314272, -6.079380432898);
	glVertex2f(-9.4652143618701, -6.0695712762597);

	glEnd();

	glBegin(GL_POLYGON);

	glVertex2f(-9.4667256593182, -4.9312903751041);
	glVertex2f(-9.4652143618701, -2.0695712762597);
	glVertex2f(-9.1555962670158, -1.7943828943601);
	glVertex2f(-8.90774742908, -2.1831062997548);
	glVertex2f(-8.8866539109578, -4.8951300583232);
	glVertex2f(-9.1714164056074, -4.5606471280997);
	glVertex2f(-9.4667256593182, -4.9312903751041);

	glEnd();


	glBegin(GL_LINES);

	glColor3ub(1, 1, 1);

	glVertex2f(-9.4652143618701, -6.0695712762597); //KL
	glVertex2f(-9.4667256593182, -4.9312903751041);

	glVertex2f(-9.4667256593182, -4.9312903751041);//LM
	glVertex2f(-9.1714164056074, -4.5606471280997);

	glVertex2f(-9.1714164056074, -4.5606471280997);//MN
	glVertex2f(-8.8801296649934, -4.8703927484479);

	glVertex2f(-8.8801296649934, -4.8703927484479);//NO
	glVertex2f(-8.8813805314272, -6.079380432898);

	glVertex2f(-9.4667256593182, -4.9312903751041);//LR
	glVertex2f(-9.4652143618701, -2.0695712762597);

	glVertex2f(-9.4652143618701, -2.0695712762597);//RP
	glVertex2f(-9.1764665505223, -1.8513851309778);

	glVertex2f(-9.1764665505223, -1.8513851309778);//PQ
	glVertex2f(-8.90774742908, -2.1831062997548);

    glVertex2f(-8.90774742908, -2.1831062997548);//QN
	glVertex2f(-8.8801296649934, -4.8703927484479);

	glVertex2f(-8.8801296649934, -4.8703927484479);//NM
	glVertex2f(-9.1714164056074, -4.5606471280997);

	glVertex2f(-9.1714164056074, -4.5606471280997);//MP
	glVertex2f(-9.1764665505223, -1.8513851309778);

	glEnd();


	glBegin(GL_QUADS);//door
	{
	    glColor3ub(1,1,1);

	    glVertex2f(-9.3132498675475, -6.0712171703549);
	    glVertex2f(-9.3096739967174, -5.2068781068508);
	    glVertex2f(-9.0057249761589, -5.2068781068508);
	    glVertex2f(-9.0021491053288, -6.0773472346351);
	}

	glEnd();





	glBegin(GL_POLYGON); //02

	glColor3ub(85, 43, 0);

	glVertex2f(-8.7194838223924, -6.0591566488797);
	glVertex2f(-8.7284525250413, -5.048811404642);
	glVertex2f(-8.4384166508611, -4.7776090287852);
	glVertex2f(-8.1589275357419, -5.0216911670564);
	glVertex2f(-8.149091169263, -6.0413781765744);
	glVertex2f(-8.7194838223924, -6.0591566488797);

	glEnd();

	glBegin(GL_POLYGON);

	glVertex2f(-8.7284525250413, -5.048811404642);
	glVertex2f(-8.7389992841024, -2.0836654286073);
	glVertex2f(-8.4568410880528, -1.7789027224012);
	glVertex2f(-8.1958411924558, -2.1198257453882);
	glVertex2f(-8.1589275357419, -5.0216911670564);
	glVertex2f(-8.4384166508611, -4.7776090287852);
	glVertex2f(-8.7284525250413, -5.048811404642);

	glEnd();


	glBegin(GL_LINES);

	glColor3ub(1, 1, 1);

	glVertex2f(-8.7194838223924, -6.0591566488797); //KL
	glVertex2f(-8.7284525250413, -5.048811404642);

	glVertex2f(-8.7284525250413, -5.048811404642);//LM
	glVertex2f(-8.4384166508611, -4.7776090287852);

	glVertex2f(-8.4384166508611, -4.7776090287852);//MN
	glVertex2f(-8.1589275357419, -5.0216911670564);

	glVertex2f(-8.1589275357419, -5.0216911670564);//NO
	glVertex2f(-8.149091169263, -6.0413781765744);

	glVertex2f(-8.7284525250413, -5.048811404642);//LR
	glVertex2f(-8.7389992841024, -2.0836654286073);

	glVertex2f(-8.7389992841024, -2.0836654286073);//RP
	glVertex2f(-8.4568410880528, -1.7789027224012);

	glVertex2f(-8.4568410880528, -1.7789027224012);//PQ
	glVertex2f(-8.1958411924558, -2.1198257453882);

    glVertex2f(-8.1958411924558, -2.1198257453882);//QN
	glVertex2f(-8.1589275357419, -5.0216911670564);

	glVertex2f(-8.1589275357419, -5.0216911670564);//NM
	glVertex2f(-8.4384166508611, -4.7776090287852);

	glVertex2f(-8.4384166508611, -4.7776090287852);//MP
	glVertex2f(-8.4568410880528, -1.7789027224012);

	glEnd();


	glBegin(GL_QUADS);//door
	{
	    glColor3ub(1,1,1);

	    glVertex2f(-8.5802841796094, -6.027237407515);
	    glVertex2f(-8.5767083087793, -5.1628983440109);
	    glVertex2f(-8.2727592882209, -5.1628983440109);
	    glVertex2f(-8.2691834173908, -6.0333674717952);
	}

	glEnd();




	glBegin(GL_POLYGON); //03

	glColor3ub(85, 43, 0);

	glVertex2f(-8.041926488978, -6.0650828063148);
	glVertex2f(-8.0481865656004, -5.0126510878611);
	glVertex2f(-7.7897909686035, -4.7504887911995);
	glVertex2f(-7.4997550944233, -4.9945709294707);
	glVertex2f(-7.495732312042, -6.0532304914446);
	glVertex2f(-8.041926488978, -6.0650828063148);

	glEnd();

	glBegin(GL_POLYGON);

	glVertex2f(-8.0481865656004, -5.0126510878611);
	glVertex2f(-8.053459945131, -2.110785666193);
	glVertex2f(-7.8003377276646, -1.7763027359696);
	glVertex2f(-7.5366687511371, -2.1017455869978);
	glVertex2f(-7.4997550944233, -4.9945709294707);
	glVertex2f(-7.7897909686035, -4.7504887911995);
	glVertex2f(-8.0481865656004, -5.0126510878611);

	glEnd();


	glBegin(GL_LINES);

	glColor3ub(1, 1, 1);

	glVertex2f(-8.041926488978, -6.0650828063148); //KL
	glVertex2f(-8.0481865656004, -5.0126510878611);

	glVertex2f(-8.0481865656004, -5.0126510878611);//LM
	glVertex2f(-7.7897909686035, -4.7504887911995);

	glVertex2f(-7.7897909686035, -4.7504887911995);//MN
	glVertex2f(-7.4997550944233, -4.9945709294707);

	glVertex2f(-7.4997550944233, -4.9945709294707);//NO
	glVertex2f(-7.495732312042, -6.0532304914446);

	glVertex2f(-8.0481865656004, -5.0126510878611);//LR
	glVertex2f(-8.053459945131, -2.110785666193);

	glVertex2f(-8.053459945131, -2.110785666193);//RP
	glVertex2f(-7.8003377276646, -1.7763027359696);

	glVertex2f(-7.8003377276646, -1.7763027359696);//PQ
	glVertex2f(-7.5366687511371, -2.1017455869978);

    glVertex2f(-7.5366687511371, -2.1017455869978);//QN
	glVertex2f(-7.4997550944233, -4.9945709294707);

	glVertex2f(-7.4997550944233, -4.9945709294707);//NM
	glVertex2f(-7.7897909686035, -4.7504887911995);

	glVertex2f(-7.7897909686035, -4.7504887911995);//MP
	glVertex2f(-7.8003377276646, -1.7763027359696);

	glEnd();


	glBegin(GL_QUADS);//door
	{
	    glColor3ub(1,1,1);

	    glVertex2f(-7.9245815795913, -6.0326065550499);
	    glVertex2f(-7.9229314022392, -5.159373940202);
	    glVertex2f(-7.6189823816808, -5.159373940202);
	    glVertex2f(-7.6185259097651, -6.0368038899504);
	}

	glEnd();
        }
}




void d_container(float Ax, float Ay, float Bx, float By, float Cx, float Cy, float Dx, float Dy, float Ex, float Ey, float Fx, float Fy, float r, float g, float b)//CNF01
{
    glColor3ub(r,g,b);

    glBegin(GL_QUADS);
    {
        glVertex2f(Ax,Ay);
        glVertex2f(Bx,By);
        glVertex2f(Cx,Cy);
        glVertex2f(Dx,Dy);

    }
    glEnd();

    glBegin(GL_QUADS);
    {
        glVertex2f(Bx,By);
        glVertex2f(Ex,Ey);
        glVertex2f(Fx,Fy);
        glVertex2f(Cx,Cy);
    }

    glEnd();

    glLineWidth(2.5);
    glBegin(GL_LINES);
    {
        glColor3ub(1,1,1);

        glVertex2f(Ax,Ay);
        glVertex2f(Bx,By);

        glVertex2f(Bx,By);
        glVertex2f(Cx,Cy);

        glVertex2f(Cx,Cy);
        glVertex2f(Dx,Dy);

        glVertex2f(Dx,Dy);
        glVertex2f(Ax,Ay);

        glVertex2f(Bx,By);
        glVertex2f(Ex,Ey);

        glVertex2f(Ex,Ey);
        glVertex2f(Fx,Fy);

        glVertex2f(Fx,Fy);
        glVertex2f(Cx,Cy);
    }

    glEnd();
}




void d_allcontainer()//CN01
{
   if (day)
   {
       d_container(-5.9072095794641,-4.0042434242891,-5.9072095794641,-3.5055825790446,-5.5,-3.5,-5.5,-4,-5.8898059730798,-2.4244463260229,-5.4907823691155,-2.4229438182352,97,7,7); //CN01
     d_container(-5.4, -4,-5.4, -3.5,-5, -3.5,-5, -4,-5.3949722404369, -2.4316824507593,-4.9983957017268, -2.4256124016974,84,12,184);//CN02
     d_container(-4.9134150148604, -3.9977551087267,-4.9204967387659, -3.487870987528,-4.5451653717725, -3.5000110856518,-4.5398876161466, -3.9908322913473,-4.9133460276568, -2.4552231165435,-4.5502256310561, -2.4647999182121,97,7,7);//CN03
     d_container(-4.39441353236, -4.0075704884352,-4.4, -3.5,-4.0257066681194, -3.5,-4.0201202004793, -3.9979936867666,-4.39441353236, -2.4752822214611,-4.0312931357594, -2.4848590231297,84,12,184);//CN04
     d_container(-3.9519903214536, -3.9789123063413,-3.9575767890936, -3.4755342003185,-3.583283457213, -3.4755342003185,-3.5808390994723, -3.9809413522327,-3.9593538290141, -2.480131829868,-3.5984042720272, -2.4903672898623,97,7,7);//CN05
     d_container(-3.5141904753867, -3.9908009587857,-3.5199108170142, -3.4755342003185,-3.1456174851336, -3.4755342003185,-3.1398971435061, -3.9812241571171,-3.5304086660336, -2.4976525333616,-3.1606825584436, -2.5012951551113,0,135,50);//CN06
     d_container(-5.896631925171, -5.4095603517965,-5.9031345347522, -4.9906512232717,-5, -5,-5.0052692513587, -5.3969078464535,-5.8913430980245, -4.5482370736468,-5, -4.5543993649358,0,135,50);//CN07
     d_container(-4.9214523787186, -5.4051171106312,-4.928500100734, -4.9906512232717,-4, -5,-4.0077359275218, -5.4051171106312,-4.9258567796462, -4.5504757255142,-3.9952683941844, -4.5621202100039,97,7,7);//CN08
     d_container(-3.7660583415005, -5.7970572270133,-3.7666096074302, -5.4301961428785,-3.4019929842973, -5.4344227134499,-3.4, -5.8,-3.7625412492936, -4.5592941580641,-3.399420852693, -4.5688709597327,84,12,184);//CN09
     d_container(-3.3499483617188, -5.8031272760752,-3.3408576639667, -5.4608452176604,-2.9762410408337, -5.4650717882318,-2.9742242753969, -5.8028752797645,-3.3367893058301, -4.5699536294219,-2.9781111427294, -4.5746252027077,97,7,7);//CN10
     d_container(-2.9, -5.8,-2.9039512463982, -5.4693710524805,-2.5393346232653, -5.4735976230519,-2.5401907566058, -5.7984331456702,-2.9037697555941, -4.5740373301478,-2.5406493589935, -4.5836141318164,84,12,184);//CN11
     d_container(-5.9088828262615, -6.0177919656941,-5.9042552637355, -5.7431222730977,-4.9985136368649, -5.7562423691441,-4.9948497498761, -6.02946365602,-5.8934487984186, -5.4817790526407,-5.0021057003942, -5.4879413439297,97,7,7);//CN14
     d_container(-4.9156781547869, -6.0317480032324,-4.9182593023604, -5.7555052764921,-4.0032737099159, -5.7667093972978,-4.0016450784015, -6.0434196935582,-4.9176389459898, -5.4970390307742,-4.0068657734452, -5.4984083720834,84,12,184);//CN15
     d_container(2.3062592894945, -2.8647196044,2.3007936495402, -2.5344032307416,3.1206396426894, -2.5437728992348,3.1324056115985, -2.8804382225142,2.3170908903603, -2.1913139420368,3.1205399636466, -2.1913139420368,97,7,7);//CN16
     d_container(2.3120125518588, -3.665829925088,2.2976733457394, -3.3653551449806,3.1175193388886, -3.3747248134738,3.1156491348419, -3.6737071302415,2.3199675215425, -2.9639637164828,3.1106958160443, -2.9745815628088,84,12,184);//CN17
     d_container(2.3, -4.6,2.2927275860952, -4.2127871526208,3.1125735792444, -4.222156821114,3.1223568858482, -4.6075865515905,2.3145901459125, -3.7695221219675,3.1180392191988, -3.7695221219675,97,7,7);//CN18
     d_container(2.3074628768006, -5.6849074174108,2.3007961710275, -5.2230917214612,3.1206421641767, -5.2324613899543,3.1288579849688, -5.694661199662,2.2967004269721, -4.7323021189855,3.1123469223102, -4.7323021189855,84,12,184);//CN19
     d_container(3.4279732336045, -3.9123560517761,3.4190822316156, -3.3038064297072,3.9055923633324, -3.3078394496639,3.8966649029637, -3.9047039428886,3.43596375042, -2.2245075734581,3.8788099822262, -2.228892096527,97,7,7);//CN20
     d_container(4.0121998372074, -3.8803312857984,4.0054934313588, -3.3320018670558,4.4916338319515, -3.3320018670558,4.4948047476696, -3.8893997251136,3.9742473200682, -2.2273293210743,4.4266199199438, -2.2128574064812,84,12,184);//CN21
     d_container(4.6019342720946, -3.8970518340011,4.5930432701057, -3.2885022119322,5.0795534018224, -3.2925352318889,5.0706259414537, -3.8893997251136,4.5256938858919, -2.2103552340363,4.9724238773975, -2.2059357698645,97,7,7);//CN22
     d_container(3.4178015814955, -5.6663565208185,3.4190822316156, -5.0714435827188,3.9055923633324, -5.0754766026755,3.8900179735333, -5.6833393281246,3.424406006559, -4.1039382486615,3.8933201860651, -4.1095991844302,84,12,184);//CN23
     d_container(3.9904032368355, -5.6723410959002,3.9815122348466, -5.0637914738313,4.4680223665634, -5.067824493788,4.4590949061946, -5.6646889870127,3.967619968029, -4.1209210559675,4.4299297224717, -4.1265819917362,97,7,7);//CN24
     d_container(4.562018223741, -5.6550346492812,4.5647921231598, -5.0561393649438,5.0513022548765, -5.0601723849005,5.0456770070395, -5.6561975833596,4.5156546327518, -4.126615100626,4.9709551115578, -4.1189629917385,84,12,184);//CN25
   }

   else
   {
       d_container(-5.9072095794641,-4.0042434242891,-5.9072095794641,-3.5055825790446,-5.5,-3.5,-5.5,-4,-5.8898059730798,-2.4244463260229,-5.4907823691155,-2.4229438182352,88,6,6); //CN01
     d_container(-5.4, -4,-5.4, -3.5,-5, -3.5,-5, -4,-5.3949722404369, -2.4316824507593,-4.9983957017268, -2.4256124016974,75,11,159);//CN02
     d_container(-4.9134150148604, -3.9977551087267,-4.9204967387659, -3.487870987528,-4.5451653717725, -3.5000110856518,-4.5398876161466, -3.9908322913473,-4.9133460276568, -2.4552231165435,-4.5502256310561, -2.4647999182121,88,6,6);//CN03
     d_container(-4.39441353236, -4.0075704884352,-4.4, -3.5,-4.0257066681194, -3.5,-4.0201202004793, -3.9979936867666,-4.39441353236, -2.4752822214611,-4.0312931357594, -2.4848590231297,75,11,159);//CN04
     d_container(-3.9519903214536, -3.9789123063413,-3.9575767890936, -3.4755342003185,-3.583283457213, -3.4755342003185,-3.5808390994723, -3.9809413522327,-3.9593538290141, -2.480131829868,-3.5984042720272, -2.4903672898623,88,6,6);//CN05
     d_container(-3.5141904753867, -3.9908009587857,-3.5199108170142, -3.4755342003185,-3.1456174851336, -3.4755342003185,-3.1398971435061, -3.9812241571171,-3.5304086660336, -2.4976525333616,-3.1606825584436, -2.5012951551113,0,112,41);//CN06
     d_container(-5.896631925171, -5.4095603517965,-5.9031345347522, -4.9906512232717,-5, -5,-5.0052692513587, -5.3969078464535,-5.8913430980245, -4.5482370736468,-5, -4.5543993649358,0,112,41);//CN07
     d_container(-4.9214523787186, -5.4051171106312,-4.928500100734, -4.9906512232717,-4, -5,-4.0077359275218, -5.4051171106312,-4.9258567796462, -4.5504757255142,-3.9952683941844, -4.5621202100039,88,6,6);//CN08
     d_container(-3.7660583415005, -5.7970572270133,-3.7666096074302, -5.4301961428785,-3.4019929842973, -5.4344227134499,-3.4, -5.8,-3.7625412492936, -4.5592941580641,-3.399420852693, -4.5688709597327,75,11,159);//CN09
     d_container(-3.3499483617188, -5.8031272760752,-3.3408576639667, -5.4608452176604,-2.9762410408337, -5.4650717882318,-2.9742242753969, -5.8028752797645,-3.3367893058301, -4.5699536294219,-2.9781111427294, -4.5746252027077,88,6,6);//CN10
     d_container(-2.9, -5.8,-2.9039512463982, -5.4693710524805,-2.5393346232653, -5.4735976230519,-2.5401907566058, -5.7984331456702,-2.9037697555941, -4.5740373301478,-2.5406493589935, -4.5836141318164,75,11,159);//CN11
     d_container(-5.9088828262615, -6.0177919656941,-5.9042552637355, -5.7431222730977,-4.9985136368649, -5.7562423691441,-4.9948497498761, -6.02946365602,-5.8934487984186, -5.4817790526407,-5.0021057003942, -5.4879413439297,88,6,6);//CN14
     d_container(-4.9156781547869, -6.0317480032324,-4.9182593023604, -5.7555052764921,-4.0032737099159, -5.7667093972978,-4.0016450784015, -6.0434196935582,-4.9176389459898, -5.4970390307742,-4.0068657734452, -5.4984083720834,75,11,159);//CN15
     d_container(2.3062592894945, -2.8647196044,2.3007936495402, -2.5344032307416,3.1206396426894, -2.5437728992348,3.1324056115985, -2.8804382225142,2.3170908903603, -2.1913139420368,3.1205399636466, -2.1913139420368,88,6,6);//CN16
     d_container(2.3120125518588, -3.665829925088,2.2976733457394, -3.3653551449806,3.1175193388886, -3.3747248134738,3.1156491348419, -3.6737071302415,2.3199675215425, -2.9639637164828,3.1106958160443, -2.9745815628088,75,11,159);//CN17
     d_container(2.3, -4.6,2.2927275860952, -4.2127871526208,3.1125735792444, -4.222156821114,3.1223568858482, -4.6075865515905,2.3145901459125, -3.7695221219675,3.1180392191988, -3.7695221219675,88,6,6);//CN18
     d_container(2.3074628768006, -5.6849074174108,2.3007961710275, -5.2230917214612,3.1206421641767, -5.2324613899543,3.1288579849688, -5.694661199662,2.2967004269721, -4.7323021189855,3.1123469223102, -4.7323021189855,75,11,159);//CN19
     d_container(3.4279732336045, -3.9123560517761,3.4190822316156, -3.3038064297072,3.9055923633324, -3.3078394496639,3.8966649029637, -3.9047039428886,3.43596375042, -2.2245075734581,3.8788099822262, -2.228892096527,88,6,6);//CN20
     d_container(4.0121998372074, -3.8803312857984,4.0054934313588, -3.3320018670558,4.4916338319515, -3.3320018670558,4.4948047476696, -3.8893997251136,3.9742473200682, -2.2273293210743,4.4266199199438, -2.2128574064812,75,11,159);//CN21
     d_container(4.6019342720946, -3.8970518340011,4.5930432701057, -3.2885022119322,5.0795534018224, -3.2925352318889,5.0706259414537, -3.8893997251136,4.5256938858919, -2.2103552340363,4.9724238773975, -2.2059357698645,88,6,6);//CN22
     d_container(3.4178015814955, -5.6663565208185,3.4190822316156, -5.0714435827188,3.9055923633324, -5.0754766026755,3.8900179735333, -5.6833393281246,3.424406006559, -4.1039382486615,3.8933201860651, -4.1095991844302,75,11,159);//CN23
     d_container(3.9904032368355, -5.6723410959002,3.9815122348466, -5.0637914738313,4.4680223665634, -5.067824493788,4.4590949061946, -5.6646889870127,3.967619968029, -4.1209210559675,4.4299297224717, -4.1265819917362,88,6,6);//CN24
     d_container(4.562018223741, -5.6550346492812,4.5647921231598, -5.0561393649438,5.0513022548765, -5.0601723849005,5.0456770070395, -5.6561975833596,4.5156546327518, -4.126615100626,4.9709551115578, -4.1189629917385,75,11,159);//CN25
   }
}




void d_circle(float radius, float xc, float yc,float r, float g, float b)//CCF01
{
    glBegin(GL_POLYGON);// Draw a Red 1x1 Square centered at origin
	for(int i=0;i<200;i++)
        {
            glColor3ub(r,g,b);
            float pi=3.1416;
            float A=(i*2*pi)/200;
            float r=radius;
            float x = r * cos(A);
            float y = r * sin(A);
            glVertex2f(x+xc,y+yc);
        }
	glEnd();
}



void d_line(float ax, float ay, float bx, float by)//LNF01
{
    glLineWidth(2.5);
    glBegin(GL_LINES);
    glVertex2f(ax,ay);
    glVertex2f(bx,by);
    glEnd();
}



void d_fourppolygon(float ax, float ay, float bx, float by, float cx, float cy, float dx, float dy)//PGF01
{
    glBegin(GL_POLYGON);
    glVertex2f(ax,ay);
    glVertex2f(bx,by);
    glVertex2f(cx,cy);
    glVertex2f(dx,dy);
    glEnd();
}




void d_fourline(float ax, float ay, float bx, float by, float cx, float cy, float dx, float dy)//LNF02
{
    glBegin(GL_LINES);
    {
        glVertex2f(ax,ay);
        glVertex2f(bx,by);

        glVertex2f(bx,by);
        glVertex2f(cx,cy);

        glVertex2f(cx,cy);
        glVertex2f(dx,dy);

        glVertex2f(dx,dy);
        glVertex2f(ax,ay);
    }
    glEnd();

}



float d_movecar = 0.0f;



void d_car()//CR01
{
    if (day)
    {
    glPushMatrix();
    glTranslatef(d_movecar,0,0);

    glColor3ub(145,3,3);//car body
    d_fourppolygon(-6.57556283298, -7.5526675504809,-6.5729747797404, -7.1400579197127,-5.7266813703957, -7.153367907802,-5.7215052639165, -7.543794225088);
    d_fourppolygon(-5.7215052639165, -7.543794225088,-5.7422096898332, -7.2287911736413,-5.6024548148956, -6.887168146016,-4.8933282272489, -6.8782948206232);
    d_fourppolygon(-4.8933282272489, -6.8782948206232,-4.580173785259, -7.0690713165698,-4.5497185357738, -7.5492957368093,-5.7215052639165, -7.543794225088);
    d_fourppolygon(-4.580173785259, -7.0690713165698,-3.8632830378936, -7.1400579197127,-3.8529308249353, -7.5571042131773,-4.5497185357738, -7.5492957368093);

    glColor3ub(8,184,210);//window
    d_fourppolygon(-5.5714006336516, -7.114740264731,-5.5714006336516, -6.9597702714306,-5.2566776225663, -6.9482910126676,-5.2499813882879, -7.1262195234939);
    d_fourppolygon(-5.1428416398333, -7.114740264731,-5.1428416398333, -6.9368117539047,-4.9050289990319, -6.9511119574347,-4.9030076271177, -7.1174419892316);
    d_fourppolygon(-4.9030076271177, -7.1174419892316,-4.9050289990319, -6.9511119574347,-4.6867208322984, -7.0758594812824,-4.7291696424966, -7.1278376162189);

    glColor3ub(0,0,0);//window border
    d_fourline(-5.5714006336516, -7.114740264731,-5.5714006336516, -6.9597702714306,-5.2566776225663, -6.9482910126676,-5.2499813882879, -7.1262195234939);
    d_fourline(-5.1428416398333, -7.114740264731,-5.1428416398333, -6.9368117539047,-4.9050289990319, -6.9511119574347,-4.9030076271177, -7.1174419892316);
    d_fourline(-4.9030076271177, -7.1174419892316,-4.9050289990319, -6.9511119574347,-4.6867208322984, -7.0758594812824,-4.7291696424966, -7.1278376162189);

    //car border//
    d_line(-6.57556283298, -7.5526675504809,-6.5729747797404, -7.1400579197127);
    d_line(-6.5729747797404, -7.1400579197127,-5.7266813703957, -7.153367907802);
    d_line(-5.7266813703957, -7.153367907802,-5.6024548148956, -6.887168146016);
    d_line(-5.6024548148956, -6.887168146016,-4.8933282272489, -6.8782948206232);
    d_line(-4.8933282272489, -6.8782948206232,-4.580173785259, -7.0690713165698);
    d_line(-4.580173785259, -7.0690713165698,-3.8632830378936, -7.1400579197127);
    d_line(-3.8632830378936, -7.1400579197127,-3.8529308249353, -7.5571042131773);
    d_line(-6.57556283298, -7.5526675504809,-3.8529308249353, -7.5571042131773);

    d_line(-5.8599491329833, -7.3941874659166,-4.5797378516406, -7.4116515076477);

    //wheel//
    d_circle(0.2167,-6.114633074895, -7.5804705777148,0,0,0);
    d_circle(0.2167,-4.2775129072387, -7.6037559666896,0,0,0);



    glPopMatrix();
    }


    else
    {
     glPushMatrix();
    glTranslatef(d_movecar,0,0);

    glColor3ub(107,2,2);//car body
    d_fourppolygon(-6.57556283298, -7.5526675504809,-6.5729747797404, -7.1400579197127,-5.7266813703957, -7.153367907802,-5.7215052639165, -7.543794225088);
    d_fourppolygon(-5.7215052639165, -7.543794225088,-5.7422096898332, -7.2287911736413,-5.6024548148956, -6.887168146016,-4.8933282272489, -6.8782948206232);
    d_fourppolygon(-4.8933282272489, -6.8782948206232,-4.580173785259, -7.0690713165698,-4.5497185357738, -7.5492957368093,-5.7215052639165, -7.543794225088);
    d_fourppolygon(-4.580173785259, -7.0690713165698,-3.8632830378936, -7.1400579197127,-3.8529308249353, -7.5571042131773,-4.5497185357738, -7.5492957368093);

    glColor3ub(7,153,175);//window
    d_fourppolygon(-5.5714006336516, -7.114740264731,-5.5714006336516, -6.9597702714306,-5.2566776225663, -6.9482910126676,-5.2499813882879, -7.1262195234939);
    d_fourppolygon(-5.1428416398333, -7.114740264731,-5.1428416398333, -6.9368117539047,-4.9050289990319, -6.9511119574347,-4.9030076271177, -7.1174419892316);
    d_fourppolygon(-4.9030076271177, -7.1174419892316,-4.9050289990319, -6.9511119574347,-4.6867208322984, -7.0758594812824,-4.7291696424966, -7.1278376162189);

    glColor3ub(0,0,0);//window border
    d_fourline(-5.5714006336516, -7.114740264731,-5.5714006336516, -6.9597702714306,-5.2566776225663, -6.9482910126676,-5.2499813882879, -7.1262195234939);
    d_fourline(-5.1428416398333, -7.114740264731,-5.1428416398333, -6.9368117539047,-4.9050289990319, -6.9511119574347,-4.9030076271177, -7.1174419892316);
    d_fourline(-4.9030076271177, -7.1174419892316,-4.9050289990319, -6.9511119574347,-4.6867208322984, -7.0758594812824,-4.7291696424966, -7.1278376162189);

    //car border//
    d_line(-6.57556283298, -7.5526675504809,-6.5729747797404, -7.1400579197127);
    d_line(-6.5729747797404, -7.1400579197127,-5.7266813703957, -7.153367907802);
    d_line(-5.7266813703957, -7.153367907802,-5.6024548148956, -6.887168146016);
    d_line(-5.6024548148956, -6.887168146016,-4.8933282272489, -6.8782948206232);
    d_line(-4.8933282272489, -6.8782948206232,-4.580173785259, -7.0690713165698);
    d_line(-4.580173785259, -7.0690713165698,-3.8632830378936, -7.1400579197127);
    d_line(-3.8632830378936, -7.1400579197127,-3.8529308249353, -7.5571042131773);
    d_line(-6.57556283298, -7.5526675504809,-3.8529308249353, -7.5571042131773);

    d_line(-5.8599491329833, -7.3941874659166,-4.5797378516406, -7.4116515076477);

    //wheel//
    d_circle(0.2167,-6.114633074895, -7.5804705777148,0,0,0);
    d_circle(0.2167,-4.2775129072387, -7.6037559666896,0,0,0);



    glPopMatrix();
    }
}



void d_updatecar(int value)//UC01
{
    d_movecar +=0.02f;
    if (d_movecar > 14)
    {
        d_movecar = -8;
    }

    glutPostRedisplay();
    glutTimerFunc(10,d_updatecar,0);
}


void d_oneline(float Ax,float Ay,float Bx,float By)//OLNF01
{
    glBegin(GL_LINES);
    glVertex2f(Ax,Ay);
    glVertex2f(Bx,By);
    glEnd();
}


float d_movetruck = 0.0f;
void d_truck()//TK01
{
    if (day)
    {
    glPushMatrix();
    glTranslatef(d_movetruck,0,0);

    glColor3ub(5,124,21);//head part
    d_fourppolygon(2.519073815176, -7.7597345005939,2.5159554933466, -7.0327200397942,3.148974824717, -7.0380657343589,3.1520931465464, -7.7704258897233);
    d_fourppolygon(3.1520931465464, -7.7704258897233,3.148974824717, -7.0380657343589,3.4857535822934, -7.4122643538882,3.4919902259522, -7.7704258897233);
    d_fourppolygon(3.4919902259522, -7.7704258897233,3.4857535822934, -7.4122643538882,3.6790895357168, -7.4817583832293,3.6822078575463, -7.775771584288);

    glColor3ub(8,184,210);//window part
    d_fourppolygon(3.0768239140851, -7.3973967460266,3.075570634386, -7.1876304203671,3.2472955667407, -7.1845881774367,3.3766791800384, -7.404890005484);
    d_fourppolygon(2.742931526581, -7.3995774625083,2.743748531204, -7.1875854812196,3.0095094666262, -7.1845881774367,3.0112578938329, -7.401892701701);
    glColor3ub(0,0,0);
    d_fourline(3.0768239140851, -7.3973967460266,3.075570634386, -7.1876304203671,3.2472955667407, -7.1845881774367,3.3766791800384, -7.404890005484);
    d_fourline(2.742931526581, -7.3995774625083,2.743748531204, -7.1875854812196,3.0095094666262, -7.1845881774367,3.0112578938329, -7.401892701701);
    d_fourline(-0.2255040993389, -7.6020034303347,-0.226893372996, -6.7851105200039,2.3731645568243, -6.7891937046458,2.374573133705, -7.6077780976079);//container border


    //lower black body
    glColor3ub(5,124,21);
    d_line(2.319327772461, -7.7621669094225,3.6822078575463, -7.775771584288);
    d_line(2.4900912893389, -7.7562522014525,2.4981596844049, -6.9671496748273);
    d_line(2.4981596844049, -6.9671496748273,2.4444568735651, -6.9487372825393);

    glLineWidth(7);
    d_oneline(-0.2313145303834, -7.7022515177007,2.3699563157523, -7.7016444594398);
    //

    glColor3ub(97,7,7);//container
    d_fourppolygon(-0.2255040993389, -7.6020034303347,-0.226893372996, -6.7851105200039,2.3731645568243, -6.7891937046458,2.374573133705, -7.6077780976079);


    glColor3ub(0,0,0);//wheel
    d_circle(0.1439,0.0091682940458, -7.7724951178625,0,0,0);
    d_circle(0.1439,0.3644396883223, -7.7921414622464,0,0,0);
    d_circle(0.1439,1.8267825886342, -7.7842829244928,0,0,0);
    d_circle(0.1439,2.1683015418419, -7.7882121933696,0,0,0);
    d_circle(0.1439,3.4, -7.8,0,0,0);



    glPopMatrix();
    }

    else
    {
    glPushMatrix();
    glTranslatef(d_movetruck,0,0);

    glColor3ub(5,91,16);//head part
    d_fourppolygon(2.519073815176, -7.7597345005939,2.5159554933466, -7.0327200397942,3.148974824717, -7.0380657343589,3.1520931465464, -7.7704258897233);
    d_fourppolygon(3.1520931465464, -7.7704258897233,3.148974824717, -7.0380657343589,3.4857535822934, -7.4122643538882,3.4919902259522, -7.7704258897233);
    d_fourppolygon(3.4919902259522, -7.7704258897233,3.4857535822934, -7.4122643538882,3.6790895357168, -7.4817583832293,3.6822078575463, -7.775771584288);

    glColor3ub(7,153,175);//window part
    d_fourppolygon(3.0768239140851, -7.3973967460266,3.075570634386, -7.1876304203671,3.2472955667407, -7.1845881774367,3.3766791800384, -7.404890005484);
    d_fourppolygon(2.742931526581, -7.3995774625083,2.743748531204, -7.1875854812196,3.0095094666262, -7.1845881774367,3.0112578938329, -7.401892701701);
    glColor3ub(0,0,0);
    d_fourline(3.0768239140851, -7.3973967460266,3.075570634386, -7.1876304203671,3.2472955667407, -7.1845881774367,3.3766791800384, -7.404890005484);
    d_fourline(2.742931526581, -7.3995774625083,2.743748531204, -7.1875854812196,3.0095094666262, -7.1845881774367,3.0112578938329, -7.401892701701);
    d_fourline(-0.2255040993389, -7.6020034303347,-0.226893372996, -6.7851105200039,2.3731645568243, -6.7891937046458,2.374573133705, -7.6077780976079);//container border


    //lower black body
    glColor3ub(5,51,16);
    d_line(2.319327772461, -7.7621669094225,3.6822078575463, -7.775771584288);
    d_line(2.4900912893389, -7.7562522014525,2.4981596844049, -6.9671496748273);
    d_line(2.4981596844049, -6.9671496748273,2.4444568735651, -6.9487372825393);

    glLineWidth(7);
    d_oneline(-0.2313145303834, -7.7022515177007,2.3699563157523, -7.7016444594398);
    //

    glColor3ub(88,6,6);//container
    d_fourppolygon(-0.2255040993389, -7.6020034303347,-0.226893372996, -6.7851105200039,2.3731645568243, -6.7891937046458,2.374573133705, -7.6077780976079);


    glColor3ub(0,0,0);//wheel
    d_circle(0.1439,0.0091682940458, -7.7724951178625,0,0,0);
    d_circle(0.1439,0.3644396883223, -7.7921414622464,0,0,0);
    d_circle(0.1439,1.8267825886342, -7.7842829244928,0,0,0);
    d_circle(0.1439,2.1683015418419, -7.7882121933696,0,0,0);
    d_circle(0.1439,3.4, -7.8,0,0,0);



    glPopMatrix();
    }
}



void d_updatetrak(int value)//UT01
{
    d_movetruck +=0.02f;
    if (d_movetruck > 10.0f)
    {
        d_movetruck =-10.0f;
    }

    glutPostRedisplay();
    glutTimerFunc(10,d_updatetrak,0);
}



float d_movebus = 0.0f;
void d_bus()//BS01
{
    if (day)
    {
        glPushMatrix();
    glTranslatef(d_movebus,0,0);

    glColor3ub(255, 197, 62);//body part
    d_fourppolygon(5.7252574377825, -9.7862545103504,5.7252574377825, -9.089301255982,8.2831726803779, -9.1357648062732,8.2865606475866, -9.7688306789912);
    d_fourppolygon(6.2652273297983, -9.1083094994623,6.2663120657472, -8.5609851854852,8.2871160205437, -8.5609851854852,8.2845156076154, -9.162835008525);

    glColor3ub(0,0,0);
    d_line(6.3793326642474, -8.6399522734334,8.1984706098751, -8.6437507170297);
    d_line(6.2375241033214, -9.262897023215,8.2117651624619, -9.262897023215);
    d_line(6.6319291633966, -9.395842549083,8.2, -9.4);

    d_line(5.7252574377825, -9.7862545103504,5.7252574377825, -9.089301255982);
    d_line(5.7252574377825, -9.089301255982,6.2652273297983, -9.1083094994623);
    d_line(6.2652273297983, -9.1083094994623,6.2663120657472, -8.5609851854852);
    d_line(6.2663120657472, -8.5609851854852,8.2871160205437, -8.5609851854852);
    d_line(8.2871160205437, -8.5609851854852,8.2865606475866, -9.7688306789912);
    d_line(8.2865606475866, -9.7688306789912,5.7252574377825, -9.7862545103504);

    glColor3ub(8,184,210);// window part
    d_fourppolygon(6.362936034703, -9.1580992819667,6.364939767799, -8.8214721218349,6.6494698674343, -8.8214721218349,6.6464642677903, -9.1580992819667);
    d_fourppolygon(6.758484851526, -9.1548148363864,6.758484851526, -8.8142208165065,7.1908500378737, -8.8142208165065,7.1880117543747, -9.1596804652419);
    d_fourppolygon(7.3064232079392, -9.1468349604471,7.3081764040217, -8.8132267915972,7.7438456305342, -8.8147295310965,7.7412158364104, -9.1543486579438);
    d_fourppolygon(7.8531339677711, -9.138725574223,7.8512432032407, -8.8127872333326,8.1919068508544, -8.820110343685,8.1931500540951, -9.1493816020002);

    glColor3ub(0,0,0);
    d_fourline(6.362936034703, -9.1580992819667,6.364939767799, -8.8214721218349,6.6494698674343, -8.8214721218349,6.6464642677903, -9.1580992819667);
    d_fourline(6.758484851526, -9.1548148363864,6.758484851526, -8.8142208165065,7.1908500378737, -8.8142208165065,7.1880117543747, -9.1596804652419);
    d_fourline(7.3064232079392, -9.1468349604471,7.3081764040217, -8.8132267915972,7.7438456305342, -8.8147295310965,7.7412158364104, -9.1543486579438);
    d_fourline(7.8531339677711, -9.138725574223,7.8512432032407, -8.8127872333326,8.1919068508544, -8.820110343685,8.1931500540951, -9.1493816020002);

    d_circle(0.22736,6.3705581920197, -9.7720401402034,0,0,0);//wheel part
    d_circle(0.22736,7.7937024146643, -9.7720401402034,0,0,0);

    glPopMatrix();
    }

    else
    {
        glPushMatrix();
    glTranslatef(d_movebus,0,0);

    glColor3ub(210,163,51);
    d_fourppolygon(5.7252574377825, -9.7862545103504,5.7252574377825, -9.089301255982,8.2831726803779, -9.1357648062732,8.2865606475866, -9.7688306789912);
    d_fourppolygon(6.2652273297983, -9.1083094994623,6.2663120657472, -8.5609851854852,8.2871160205437, -8.5609851854852,8.2845156076154, -9.162835008525);

    glColor3ub(0,0,0);
    d_line(6.3793326642474, -8.6399522734334,8.1984706098751, -8.6437507170297);
    d_line(6.2375241033214, -9.262897023215,8.2117651624619, -9.262897023215);
    d_line(6.6319291633966, -9.395842549083,8.2, -9.4);

    d_line(5.7252574377825, -9.7862545103504,5.7252574377825, -9.089301255982);
    d_line(5.7252574377825, -9.089301255982,6.2652273297983, -9.1083094994623);
    d_line(6.2652273297983, -9.1083094994623,6.2663120657472, -8.5609851854852);
    d_line(6.2663120657472, -8.5609851854852,8.2871160205437, -8.5609851854852);
    d_line(8.2871160205437, -8.5609851854852,8.2865606475866, -9.7688306789912);
    d_line(8.2865606475866, -9.7688306789912,5.7252574377825, -9.7862545103504);

    glColor3ub(7,153,175);
    d_fourppolygon(6.362936034703, -9.1580992819667,6.364939767799, -8.8214721218349,6.6494698674343, -8.8214721218349,6.6464642677903, -9.1580992819667);
    d_fourppolygon(6.758484851526, -9.1548148363864,6.758484851526, -8.8142208165065,7.1908500378737, -8.8142208165065,7.1880117543747, -9.1596804652419);
    d_fourppolygon(7.3064232079392, -9.1468349604471,7.3081764040217, -8.8132267915972,7.7438456305342, -8.8147295310965,7.7412158364104, -9.1543486579438);
    d_fourppolygon(7.8531339677711, -9.138725574223,7.8512432032407, -8.8127872333326,8.1919068508544, -8.820110343685,8.1931500540951, -9.1493816020002);

    glColor3ub(0,0,0);
    d_fourline(6.362936034703, -9.1580992819667,6.364939767799, -8.8214721218349,6.6494698674343, -8.8214721218349,6.6464642677903, -9.1580992819667);
    d_fourline(6.758484851526, -9.1548148363864,6.758484851526, -8.8142208165065,7.1908500378737, -8.8142208165065,7.1880117543747, -9.1596804652419);
    d_fourline(7.3064232079392, -9.1468349604471,7.3081764040217, -8.8132267915972,7.7438456305342, -8.8147295310965,7.7412158364104, -9.1543486579438);
    d_fourline(7.8531339677711, -9.138725574223,7.8512432032407, -8.8127872333326,8.1919068508544, -8.820110343685,8.1931500540951, -9.1493816020002);

    d_circle(0.22736,6.3705581920197, -9.7720401402034,0,0,0);
    d_circle(0.22736,7.7937024146643, -9.7720401402034,0,0,0);

    glPopMatrix();
    }

}




bool d_buskeymove = true;

void d_updatebus(int value)//UB01
{
    if(d_buskeymove)
    {
        d_movebus -=0.02f;
    if (d_movebus < -16)
    {
        d_movebus = 5;
    }

    }

    glutPostRedisplay();
    glutTimerFunc(10,d_updatebus,0);
}




void d_sun()//SN01
{
    if (day)
    {
        d_circle(1.0480 ,-7.1347657571657, 8.5328388567529,245,140,3);
    }

    else{d_circle(1.0480 ,-7.1347657571657, 8.5328388567529,217,220,220);}
}


float d_movecloud = 0.0f;


void d_cloud()//CD01
{
    if(day)
    {
        glPushMatrix();
    glTranslatef(d_movecloud,0,0);
    //CL01
    d_circle(0.29 ,-3.6834058542266, 8.9830917563906,255,255,255);//A42
    d_circle(0.29 ,-3.2735488836609, 8.9830917563906,255,255,255);//A43
    d_circle(0.29 ,-2.8636919130952, 9.0160266915253,255,255,255);//A44
    d_circle(0.29 ,-3.4784773689437, 9.2904844843148,255,255,255);//A45
    d_circle(0.29 ,-3.0919258734774, 9.284554552417,255,255,255);//A46
    d_circle(0.29 ,-3.4807470301099, 8.7406873466517,255,255,255);//A47
    d_circle(0.29 ,-3.0324659685536, 8.7406873466517,255,255,255);//A48

    //CL02
    d_circle(0.29 ,-1.6834058542266, 8.9830917563906,255,255,255);//A12
    d_circle(0.29 ,-1.2735488836609, 8.9830917563906 ,255,255,255);//A13
    d_circle(0.29 , -0.8636919130952, 9.0160266915253,255,255,255);//A14
    d_circle(0.29 , -1.4784773689437, 9.2904844843148,255,255,255);//A15
    d_circle(0.29 , -1.0919258734774, 9.284554552417,255,255,255);//A16
    d_circle(0.29 ,-1.4807470301099, 8.7406873466517 ,255,255,255);//A17
    d_circle(0.29 ,-1.0324659685536, 8.7406873466517 ,255,255,255);//A18

    //CL03
    d_circle(0.29 ,-2.7834058542266, 7.4830917563906 ,255,255,255);//A19
    d_circle(0.29 ,-2.3735488836609, 7.4830917563906 ,255,255,255);//A20
    d_circle(0.29 , -1.9636919130952, 7.5160266915253,255,255,255);//A21
    d_circle(0.29 , -2.5784773689437, 7.7904844843148,255,255,255);//A22
    d_circle(0.29 ,-2.1919258734774, 7.784554552417 ,255,255,255);//A23
    d_circle(0.29 ,-2.5807470301099, 7.2406873466517 ,255,255,255);//A24
    d_circle(0.29 , -2.1324659685536, 7.2406873466517,255,255,255);//A25

    //CL04
    d_circle(0.29 , 0.2165941457734, 8.9830917563906,255,255,255);//A26
    d_circle(0.29 , 0.6264511163391, 8.9830917563906,255,255,255);//A27
    d_circle(0.29 , 1.0363080869048, 9.0160266915253,255,255,255);//A28
    d_circle(0.29 , 0.4215226310563, 9.2904844843148,255,255,255);//A29
    d_circle(0.29 ,0.8080741265226, 9.284554552417 ,255,255,255);//A30
    d_circle(0.29 , 0.4192529698901, 8.7406873466517,255,255,255);//A31
    d_circle(0.29 ,0.8675340314464, 8.7406873466517 ,255,255,255);//A32

    //CL05
    d_circle(0.29 ,-0.7834058542266, 7.4830917563906 ,255,255,255);//A33
    d_circle(0.29 ,-0.3735488836609, 7.4830917563906 ,255,255,255);//A34
    d_circle(0.29 , 0.0363080869048, 7.5160266915253,255,255,255);//A35
    d_circle(0.29 ,-0.5784773689437, 7.7904844843148 ,255,255,255);//A36
    d_circle(0.29 , -0.1919258734774, 7.784554552417,255,255,255);//A37
    d_circle(0.29 ,-0.5807470301099, 7.2406873466517 ,255,255,255);//A38
    d_circle(0.29 , -0.1324659685536, 7.2406873466517,255,255,255);//A39

    glPopMatrix();
    }

    else
    {
        glPushMatrix();
    glTranslatef(d_movecloud,0,0);
    //CL01
    d_circle(0.29 ,-3.6834058542266, 8.9830917563906,204,207,208);//A42
    d_circle(0.29 ,-3.2735488836609, 8.9830917563906,204,207,208);//A43
    d_circle(0.29 ,-2.8636919130952, 9.0160266915253,204,207,208);//A44
    d_circle(0.29 ,-3.4784773689437, 9.2904844843148,204,207,208);//A45
    d_circle(0.29 ,-3.0919258734774, 9.284554552417,204,207,208);//A46
    d_circle(0.29 ,-3.4807470301099, 8.7406873466517,204,207,208);//A47
    d_circle(0.29 ,-3.0324659685536, 8.7406873466517,204,207,208);//A48

    //CL02
    d_circle(0.29 ,-1.6834058542266, 8.9830917563906,204,207,208);//A12
    d_circle(0.29 ,-1.2735488836609, 8.9830917563906 ,204,207,208);//A13
    d_circle(0.29 , -0.8636919130952, 9.0160266915253,204,207,208);//A14
    d_circle(0.29 , -1.4784773689437, 9.2904844843148,204,207,208);//A15
    d_circle(0.29 , -1.0919258734774, 9.284554552417,204,207,208);//A16
    d_circle(0.29 ,-1.4807470301099, 8.7406873466517 ,204,207,208);//A17
    d_circle(0.29 ,-1.0324659685536, 8.7406873466517 ,204,207,208);//A18

    //CL03
    d_circle(0.29 ,-2.7834058542266, 7.4830917563906 ,204,207,208);//A19
    d_circle(0.29 ,-2.3735488836609, 7.4830917563906 ,204,207,208);//A20
    d_circle(0.29 , -1.9636919130952, 7.5160266915253,204,207,208);//A21
    d_circle(0.29 , -2.5784773689437, 7.7904844843148,204,207,208);//A22
    d_circle(0.29 ,-2.1919258734774, 7.784554552417 ,204,207,208);//A23
    d_circle(0.29 ,-2.5807470301099, 7.2406873466517 ,204,207,208);//A24
    d_circle(0.29 , -2.1324659685536, 7.2406873466517,204,207,208);//A25

    //CL04
    d_circle(0.29 , 0.2165941457734, 8.9830917563906,204,207,208);//A26
    d_circle(0.29 , 0.6264511163391, 8.9830917563906,204,207,208);//A27
    d_circle(0.29 , 1.0363080869048, 9.0160266915253,204,207,208);//A28
    d_circle(0.29 , 0.4215226310563, 9.2904844843148,204,207,208);//A29
    d_circle(0.29 ,0.8080741265226, 9.284554552417 ,204,207,208);//A30
    d_circle(0.29 , 0.4192529698901, 8.7406873466517,204,207,208);//A31
    d_circle(0.29 ,0.8675340314464, 8.7406873466517 ,204,207,208);//A32

    //CL05
    d_circle(0.29 ,-0.7834058542266, 7.4830917563906 ,204,207,208);//A33
    d_circle(0.29 ,-0.3735488836609, 7.4830917563906 ,204,207,208);//A34
    d_circle(0.29 , 0.0363080869048, 7.5160266915253,204,207,208);//A35
    d_circle(0.29 ,-0.5784773689437, 7.7904844843148 ,204,207,208);//A36
    d_circle(0.29 , -0.1919258734774, 7.784554552417,204,207,208);//A37
    d_circle(0.29 ,-0.5807470301099, 7.2406873466517 ,204,207,208);//A38
    d_circle(0.29 , -0.1324659685536, 7.2406873466517,204,207,208);//A39

    glPopMatrix();
    }

}



void d_updatecloud(int value)//UCD01
{
    d_movecloud +=0.02f;
    if (d_movecloud > 10.0f)
    {
        d_movecloud =-10.0f;
    }
    glutPostRedisplay();
    glutTimerFunc(20,d_updatecloud,0);
}




void d_crane()// CRN01
{

    if(day)
    {
        glColor3ub(68,69,69);//bottom black part
    glLineWidth(10);
    d_oneline(0.6534158913639, -5.61641531566,1.7776687956387, -5.6093231695954);
    d_oneline(0.820967842139, -5.4054239702395,1.5904656901431, -5.4089700432718);

    d_oneline(0.8402642485177, -1.1744482631612,1.6087953178554, -1.1795245805745);// top black part

    glLineWidth(12);// main 2 stand
    glColor3ub(240,225,79);
    d_oneline(0.9324269167821, -5.2482658874366,0.9567826374154, -1.2814876576077);
    d_oneline(1.4515440754912, -5.2560679872342,1.4701494177246, -1.2768287434245);


    glLineWidth(3);// joint between two stand
    d_fourline(0.9767221044277, -5.1484639470231,1.4291930004154, -5.151807328028,0.9825730211861, -4.6837339873511,1.4272426948292, -4.6837339873511);
    d_fourline(0.9825730211861, -4.6837339873511,1.4272426948292, -4.6837339873511,1, -4.2,1.4194414724846, -4.1889135986356);
    d_fourline(1, -4.2,1.4194414724846, -4.1889135986356,1.0098772993923, -3.714153495949,1.4194414724846, -3.7074667339394);
    d_fourline(1.0098772993923, -3.714153495949,1.4194414724846, -3.7074667339394,1.0157282161507, -3.1959294401997,1.4155408613123, -3.1925860591948);
    d_fourline(1.0157282161507, -3.1959294401997,1.4155408613123, -3.1925860591948,1.0254797440815, -2.6843921464599,1.4135905557262, -2.6777053844503);
    d_fourline(1.0254797440815, -2.6843921464599,1.4135905557262, -2.6777053844503,1.0293803552538, -2.1661680907106,1.4174911668985, -2.1594813287009);
    d_fourline(1.0293803552538, -2.1661680907106,1.4174911668985, -2.1594813287009,1.03133066084, -1.7248417980724,1.4096899445538, -1.7281851790772);
    d_fourline(1.03133066084, -1.7248417980724,1.4096899445538, -1.7281851790772,1.03133066084, -1.2902022674439,1.4096899445538, -1.2902022674439);

    //joint between top two part//
    d_fourline(2.2, -1,2.178627220967, -0.881305375247,1.8919641805308, -0.9796976200171,1.95, -0.75);
    d_fourline(1.8919641805308, -0.9796976200171,1.95, -0.75,1.5999313218983, -0.9228970129249,1.6699109587416, -0.6049895198368);
    d_fourline(1.5999313218983, -0.9228970129249,1.6699109587416, -0.6049895198368,1.320012774525, -0.9408917766847,1.4284812116322, -0.4370383914129);
    d_fourline(1.320012774525, -0.9408917766847,1.4284812116322, -0.4370383914129,0.959617644782, -0.9408917766847,1.0925789547843, -0.3350680634412);
    d_fourline(0.959617644782, -0.9408917766847,1.0925789547843, -0.3350680634412,0.5572347329329, -0.9468900312712,0.6762001155665, -0.4250418822397);
    d_fourline(0.5572347329329, -0.9468900312712,0.6762001155665, -0.4250418822397,0.2178334942428, -0.9288952675115,0.2913121129283, -0.4970209372785);
    d_fourline(0.2178334942428, -0.9288952675115,0.2913121129283, -0.4970209372785,-0.0620850531305, -0.9348935220981,-0.0130993073402, -0.5749982469039);
    d_fourline(-0.0620850531305, -0.9348935220981,-0.0130993073402, -0.5749982469039,-0.2930178547135, -0.9288952675115,-0.2545290544496, -0.6169860290099);
    d_fourline(-0.2930178547135, -0.9288952675115,-0.2545290544496, -0.6169860290099,-0.5204516744542, -0.9288952675115,-0.4994577834012, -0.6649720657025);
    d_fourline(-0.5204516744542, -0.9288952675115,-0.4994577834012, -0.6649720657025,-0.7723783670902, -0.9348935220981,-0.7653804034059, -0.7189563569816);
    d_fourline(-0.7723783670902, -0.9348935220981,-0.7653804034059, -0.7189563569816,-1.0103091323575, -0.9348935220981,-0.999812186831, -0.7609441390876);


    // top body part //
    glLineWidth(10);
    d_oneline(0.672352333759, -1.0344820206713,1.7327242835923, -1.0379444596911);


    glLineWidth(5);
    d_fourline(2.2, -1,-1.5568267174936, -0.9460842966806,-1.5457159498894, -0.8523831179745,1.2598665991271, -0.2776853962391);

    //container and rope part//

    glColor3ub(0,0,0);//rope
    glLineWidth(2);
    d_oneline(-1.5568267174936, -0.9460842966806,-1.5561502997354, -2.5064362237792);
    d_oneline(-1.5561502997354, -2.5064362237792,-1.759091246581, -2.9383105540121);
    d_oneline(-1.5561502997354, -2.5064362237792,-1.3672052802584, -2.926314044839);

    glColor3ub(97,7,7);//container
    d_fourppolygon(-2.040459106488, -3.6286540806259,-2.0368114551148, -2.9141862954079,-0.9754791205175, -2.9118333956583,-0.9788196456296, -3.6243515904096);
    glColor3ub(0,0,0);
    d_fourline(-2.040459106488, -3.6286540806259,-2.0368114551148, -2.9141862954079,-0.9754791205175, -2.9118333956583,-0.9788196456296, -3.6243515904096);
    }

    else
    {
        glColor3ub(68,69,69);//bottom black part
    glLineWidth(10);
    d_oneline(0.6534158913639, -5.61641531566,1.7776687956387, -5.6093231695954);
    d_oneline(0.820967842139, -5.4054239702395,1.5904656901431, -5.4089700432718);

    d_oneline(0.8402642485177, -1.1744482631612,1.6087953178554, -1.1795245805745);// top black part

    glLineWidth(12);// main 2 stand
    glColor3ub(196,183,62);
    d_oneline(0.9324269167821, -5.2482658874366,0.9567826374154, -1.2814876576077);
    d_oneline(1.4515440754912, -5.2560679872342,1.4701494177246, -1.2768287434245);


    glLineWidth(3);// joint between two stand
    d_fourline(0.9767221044277, -5.1484639470231,1.4291930004154, -5.151807328028,0.9825730211861, -4.6837339873511,1.4272426948292, -4.6837339873511);
    d_fourline(0.9825730211861, -4.6837339873511,1.4272426948292, -4.6837339873511,1, -4.2,1.4194414724846, -4.1889135986356);
    d_fourline(1, -4.2,1.4194414724846, -4.1889135986356,1.0098772993923, -3.714153495949,1.4194414724846, -3.7074667339394);
    d_fourline(1.0098772993923, -3.714153495949,1.4194414724846, -3.7074667339394,1.0157282161507, -3.1959294401997,1.4155408613123, -3.1925860591948);
    d_fourline(1.0157282161507, -3.1959294401997,1.4155408613123, -3.1925860591948,1.0254797440815, -2.6843921464599,1.4135905557262, -2.6777053844503);
    d_fourline(1.0254797440815, -2.6843921464599,1.4135905557262, -2.6777053844503,1.0293803552538, -2.1661680907106,1.4174911668985, -2.1594813287009);
    d_fourline(1.0293803552538, -2.1661680907106,1.4174911668985, -2.1594813287009,1.03133066084, -1.7248417980724,1.4096899445538, -1.7281851790772);
    d_fourline(1.03133066084, -1.7248417980724,1.4096899445538, -1.7281851790772,1.03133066084, -1.2902022674439,1.4096899445538, -1.2902022674439);

    //joint between top two part//
    d_fourline(2.2, -1,2.178627220967, -0.881305375247,1.8919641805308, -0.9796976200171,1.95, -0.75);
    d_fourline(1.8919641805308, -0.9796976200171,1.95, -0.75,1.5999313218983, -0.9228970129249,1.6699109587416, -0.6049895198368);
    d_fourline(1.5999313218983, -0.9228970129249,1.6699109587416, -0.6049895198368,1.320012774525, -0.9408917766847,1.4284812116322, -0.4370383914129);
    d_fourline(1.320012774525, -0.9408917766847,1.4284812116322, -0.4370383914129,0.959617644782, -0.9408917766847,1.0925789547843, -0.3350680634412);
    d_fourline(0.959617644782, -0.9408917766847,1.0925789547843, -0.3350680634412,0.5572347329329, -0.9468900312712,0.6762001155665, -0.4250418822397);
    d_fourline(0.5572347329329, -0.9468900312712,0.6762001155665, -0.4250418822397,0.2178334942428, -0.9288952675115,0.2913121129283, -0.4970209372785);
    d_fourline(0.2178334942428, -0.9288952675115,0.2913121129283, -0.4970209372785,-0.0620850531305, -0.9348935220981,-0.0130993073402, -0.5749982469039);
    d_fourline(-0.0620850531305, -0.9348935220981,-0.0130993073402, -0.5749982469039,-0.2930178547135, -0.9288952675115,-0.2545290544496, -0.6169860290099);
    d_fourline(-0.2930178547135, -0.9288952675115,-0.2545290544496, -0.6169860290099,-0.5204516744542, -0.9288952675115,-0.4994577834012, -0.6649720657025);
    d_fourline(-0.5204516744542, -0.9288952675115,-0.4994577834012, -0.6649720657025,-0.7723783670902, -0.9348935220981,-0.7653804034059, -0.7189563569816);
    d_fourline(-0.7723783670902, -0.9348935220981,-0.7653804034059, -0.7189563569816,-1.0103091323575, -0.9348935220981,-0.999812186831, -0.7609441390876);


    // top body part //
    glLineWidth(10);
    d_oneline(0.672352333759, -1.0344820206713,1.7327242835923, -1.0379444596911);


    glLineWidth(5);
    d_fourline(2.2, -1,-1.5568267174936, -0.9460842966806,-1.5457159498894, -0.8523831179745,1.2598665991271, -0.2776853962391);

    //container and rope part//

    glColor3ub(0,0,0);//rope
    glLineWidth(2);
    d_oneline(-1.5568267174936, -0.9460842966806,-1.5561502997354, -2.5064362237792);
    d_oneline(-1.5561502997354, -2.5064362237792,-1.759091246581, -2.9383105540121);
    d_oneline(-1.5561502997354, -2.5064362237792,-1.3672052802584, -2.926314044839);

    glColor3ub(88,6,6);//container
    d_fourppolygon(-2.040459106488, -3.6286540806259,-2.0368114551148, -2.9141862954079,-0.9754791205175, -2.9118333956583,-0.9788196456296, -3.6243515904096);
    glColor3ub(0,0,0);
    d_fourline(-2.040459106488, -3.6286540806259,-2.0368114551148, -2.9141862954079,-0.9754791205175, -2.9118333956583,-0.9788196456296, -3.6243515904096);
    }

}



void d_border()//BDR01
{
    glColor3ub(255,255,255);
    glBegin(GL_LINES);
    {
        glVertex2f(-10,6);
        glVertex2f(10,6);

        glVertex2f(10,-1.34);
	    glVertex2f(-10,-1.34);

	    glVertex2f(10,-6.32);
	    glVertex2f(-10,-6.32);
    }
    glEnd();
}

float d_angle1=0.0f;
void d_windmill()//WM01
{
    if (day)
    {
        glColor3ub(255,255,255);// right
    d_fourppolygon(9.2179374834176, 5.9451068183186,9.2534372285975, 8.109999585682,9.3213561228743, 8.1132338187428,9.3990929031289, 5.9409259110373);

    glPushMatrix();
    glTranslatef(9.29,8.17,0);
	glRotatef(d_angle1, 0.0f, 0.0f,1.0f);
	glTranslatef(-9.29,-8.17,0);

    d_circle(0.064 ,9.2877428976189, 8.1680559447432,255,255,255);
    d_fourppolygon(9.2335664227988, 8.1510403133464,9.0069832492082, 7.9034967220214,8.6256172389348, 7.8031745013175,8.953566583286, 8.1274302845882);
    d_fourppolygon(9.2960642623289, 8.2293986498734,9.2160528719245, 8.5593330000607,9.2952592787176, 9.1611793651915,9.3851692539963, 8.5740121796981);
    d_fourppolygon(9.345916779023, 8.146664522007,9.5389121430034, 8.1638360044103,9.9345409311794, 7.8283719628233,9.4864877249132, 7.9305827212721);

    glPopMatrix();



    glColor3ub(255,255,255);// middle
    d_fourppolygon(7.8179374834177, 5.9451068183186,7.8537014127143, 8.1150648905413,7.9213561228743, 8.1132338187428,7.9990929031289, 5.9409259110373);

    glPushMatrix();
    glTranslatef(7.85,8.12,0);
	glRotatef(d_angle1, 0.0f, 0.0f,1.0f);
	glTranslatef(-7.85,-8.12,0);

    d_circle(0.064 ,7.8537014127143, 8.1150648905413,255,255,255);
    d_fourppolygon(7.8335664227988, 8.1510403133464,7.6069832492082, 7.9034967220214,7.2256172389348, 7.8031745013175,7.553566583286, 8.1274302845882);
    d_fourppolygon(7.8960642623289, 8.2293986498734,7.8160528719245, 8.5593330000607,7.8952592787176, 9.1611793651915,7.9851692539963, 8.5740121796981);
    d_fourppolygon(7.945916779023, 8.146664522007,8.1389121430034, 8.1638360044103,8.5345409311794, 7.8283719628233,8.0864877249132, 7.9305827212721);

    glPopMatrix();



    glColor3ub(255,255,255);// left
    d_fourppolygon(6.4179374834177, 5.9451068183186,6.4537014127143, 8.1150648905413,6.5213561228743, 8.1132338187428,6.5990929031289, 5.9409259110373);

    glPushMatrix();
    glTranslatef(6.49,8.17,0);
	glRotatef(d_angle1, 0.0f, 0.0f,1.0f);
	glTranslatef(-6.49,-8.17,0);

    d_circle(0.064 ,6.4877428976189, 8.1680559447432,255,255,255);
    d_fourppolygon(6.4335664227988, 8.1510403133464,6.2069832492082, 7.9034967220214,5.8256172389348, 7.8031745013175,6.1535665832861, 8.1274302845882);
    d_fourppolygon(6.4960642623289, 8.2293986498734,6.4160528719245, 8.5593330000607,6.4952592787176, 9.1611793651915,6.5851692539964, 8.5740121796981);
    d_fourppolygon(6.545916779023, 8.146664522007,6.7389121430034, 8.1638360044103,7.1345409311794, 7.8283719628233,6.6864877249132, 7.9305827212721);

    glPopMatrix();
    }


    else
    {
        glColor3ub(204,207,208);// right
    d_fourppolygon(9.2179374834176, 5.9451068183186,9.2534372285975, 8.109999585682,9.3213561228743, 8.1132338187428,9.3990929031289, 5.9409259110373);

    glPushMatrix();
    glTranslatef(9.29,8.17,0);
	glRotatef(d_angle1, 0.0f, 0.0f,1.0f);
	glTranslatef(-9.29,-8.17,0);

    d_circle(0.064 ,9.2877428976189, 8.1680559447432,255,255,255);
    d_fourppolygon(9.2335664227988, 8.1510403133464,9.0069832492082, 7.9034967220214,8.6256172389348, 7.8031745013175,8.953566583286, 8.1274302845882);
    d_fourppolygon(9.2960642623289, 8.2293986498734,9.2160528719245, 8.5593330000607,9.2952592787176, 9.1611793651915,9.3851692539963, 8.5740121796981);
    d_fourppolygon(9.345916779023, 8.146664522007,9.5389121430034, 8.1638360044103,9.9345409311794, 7.8283719628233,9.4864877249132, 7.9305827212721);

    glPopMatrix();



    glColor3ub(204,207,208);// middle
    d_fourppolygon(7.8179374834177, 5.9451068183186,7.8537014127143, 8.1150648905413,7.9213561228743, 8.1132338187428,7.9990929031289, 5.9409259110373);

    glPushMatrix();
    glTranslatef(7.85,8.12,0);
	glRotatef(d_angle1, 0.0f, 0.0f,1.0f);
	glTranslatef(-7.85,-8.12,0);

    d_circle(0.064 ,7.8537014127143, 8.1150648905413,255,255,255);
    d_fourppolygon(7.8335664227988, 8.1510403133464,7.6069832492082, 7.9034967220214,7.2256172389348, 7.8031745013175,7.553566583286, 8.1274302845882);
    d_fourppolygon(7.8960642623289, 8.2293986498734,7.8160528719245, 8.5593330000607,7.8952592787176, 9.1611793651915,7.9851692539963, 8.5740121796981);
    d_fourppolygon(7.945916779023, 8.146664522007,8.1389121430034, 8.1638360044103,8.5345409311794, 7.8283719628233,8.0864877249132, 7.9305827212721);

    glPopMatrix();



    glColor3ub(204,207,208);// left
    d_fourppolygon(6.4179374834177, 5.9451068183186,6.4537014127143, 8.1150648905413,6.5213561228743, 8.1132338187428,6.5990929031289, 5.9409259110373);

    glPushMatrix();
    glTranslatef(6.49,8.17,0);
	glRotatef(d_angle1, 0.0f, 0.0f,1.0f);
	glTranslatef(-6.49,-8.17,0);

    d_circle(0.064 ,6.4877428976189, 8.1680559447432,255,255,255);
    d_fourppolygon(6.4335664227988, 8.1510403133464,6.2069832492082, 7.9034967220214,5.8256172389348, 7.8031745013175,6.1535665832861, 8.1274302845882);
    d_fourppolygon(6.4960642623289, 8.2293986498734,6.4160528719245, 8.5593330000607,6.4952592787176, 9.1611793651915,6.5851692539964, 8.5740121796981);
    d_fourppolygon(6.545916779023, 8.146664522007,6.7389121430034, 8.1638360044103,7.1345409311794, 7.8283719628233,6.6864877249132, 7.9305827212721);

    glPopMatrix();
    }
}


void d_updateangle1(int value) {
    d_angle1+=2.0f;
	glutPostRedisplay(); //Notify GLUT that the display has changed

	glutTimerFunc(20, d_updateangle1, 0); //Notify GLUT to call update again in 25 milliseconds
}

float d_movewave = 0.0f;
float d_movewave1 = 0.0f;
float d_movewave2 = 0.0f;
float d_movewave3 = 0.0f;
void d_seawave()//SW01
{
    glColor3ub(255,255,255);


    glPushMatrix();
    glTranslatef(d_movewave1,0,0);
    d_line(-8.7426800289966, 4.7466899491939,-5.7848016347799, 4.7466899491939);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(d_movewave2,0,0);
    d_line(-3.8128827053021, 4.7189814864847,-1.1621064394466, 4.6912730237754);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(d_movewave3,0,0);
    d_line(1.6179759857188, 4.7743984119032,3.9293235833854, 4.7743984119032);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(d_movewave,0,0);
    d_line(7.0811612165672, 4.8298153373218,9.2147128451825, 4.8575238000311);
    glPopMatrix();



    glPushMatrix();
    glTranslatef(d_movewave,0,0);
    d_line(4.4525715575851, 3.9722915372907,6.6507762658554, 4);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(d_movewave3,0,0);
    d_line(-1.2267595191016, 3.776893754369,1.394286681888, 3.7783322983257);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(d_movewave1,0,0);
    d_line(-6.2535364622787, 3.776893754369,-3.649601011821, 3.7527374326344);
    glPopMatrix();


    glPushMatrix();
    glTranslatef(d_movewave1,0,0);
    d_line(-8.7394473750138, 2.6408467832883,-6.0078547595897, 2.6685552459975);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(d_movewave2,0,0);
    d_line(-3.7951031083969, 2.5688047802441,-1.2736330018515, 2.5410963175348);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(d_movewave3,0,0);
    d_line(1.6018127158051, 2.4967627772,4.0586297426954, 2.5244712399093);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(d_movewave,0,0);
    d_line(7.1167204103774, 2.4524292368651,9.2502720389928, 2.4801376995744);
    glPopMatrix();


    glPushMatrix();
    glTranslatef(d_movewave1,0,0);
    d_line(4.4881307513953, 1.442508891933,6.6863354596657, 1.4702173546422);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(d_movewave3,0,0);
    d_line(-1.1912003252914, 1.5214248898331,1.4298458756983, 1.5228634337899);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(d_movewave1,0,0);
    d_line(-6.2001976715633, 1.3080697269716,-3.5962622211056, 1.283913405237);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(d_movewave1,0,0);
    d_line(-8.7927861657292, -0.2242082608519,-6.061193550305, -0.1964997981426);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(d_movewave2,0,0);
    d_line(-3.4928499610098, -0.1438537189949,-0.9713798544644, -0.1715621817042);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(d_movewave3,0,0);
    d_line(1.9396250570025, -0.490209502861,4.3964420838929, -0.4625010401517);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(d_movewave,0,0);
    d_line(6.9567040382313, -0.2602292623739,9.0902556668466, -0.2325207996646);
    glPopMatrix();

}

void d_updatemovewave(int value)//UMW01
{
    d_movewave +=0.02f;
    if (d_movewave > 4.0f)
    {
        d_movewave =-16.0f;
    }

    d_movewave1 +=0.02f;
    if (d_movewave1 > 16.0f)
    {
        d_movewave1 =-4.0f;
    }

    d_movewave2 +=0.02f;
    if (d_movewave2 > 14.0f)
    {
        d_movewave2 =-6.0f;
    }

    d_movewave3 +=0.02f;
    if (d_movewave3 > 9.0f)
    {
        d_movewave3 =-11.0f;
    }

    glutPostRedisplay();
    glutTimerFunc(9,d_updatemovewave,0);
}

float d_moveship = 0.0f;
void d_ship()//SH01
{
    glPushMatrix();
    glTranslatef(d_moveship,0,0);

    glColor3ub(32,32,32);
    d_fourppolygon(-1.669075001521, 1.2372848602851,-1.6647131787792, 1.8878195663558,2.3394400982432, 1.8504325142828,1.8727250648647, 1.2372848602851);// black down body
    d_fourppolygon(-1.6647131787792, 1.8878195663558,-1.6626164096798, 2.0651792015722,-1.4999020070589, 2.0696782173129,-0.4782973929948, 1.8579099246974);// black upper left body
    d_fourppolygon(1.3628419319899, 1.8527202382096,1.7727996711423, 2.183905596929,2.8188818352061, 2.1515358548745,2.3394400982432, 1.8504325142828);// black upper right body

    d_fourppolygon(-1.3483497077306, 2.6831997997049,-1.3483497077306, 3.2286699918726,-0.5396143880929, 3.224882004427,-0.6213717837939, 2.6831997997049); // top black part

    glColor3ub(223,210,20);
    d_fourppolygon(-1.6637378745114, 2.0685357340165,-1.6655028426139, 2.6857702932956,-1.5066557133877, 2.6827446336913,-1.5031257771826, 2.0685357340165);//yellow left
    d_fourppolygon(-1.5062085968589, 2.55976239563,-1.5066557133877, 2.6827446336913,-0.4637741011929, 2.6778822525218,-0.4651202815081, 2.5624953683628);// upper yellow

    d_fourppolygon(-1.2595843226874, 3.1001763891949,-1.2583116723699, 3.1787170945049,-1.1032277254838, 3.1803975442451,-1.1031151263775, 3.1006716839997); //left yellow part in top black part
    d_fourppolygon(-0.9427834727069, 3.1060604387114,-0.9419162064757, 3.1803975442451,-0.7849410186237, 3.1774240600238,-0.7858082848549, 3.1045736966008); // middle yellow part in top black part
    d_fourppolygon(-0.6225301774247, 3.0981739852108,-0.6218649461034, 3.1802825368638,-0.5433676501943, 3.1802825368638,-0.5580027392621, 3.0981739852108); // right yellow part in top black part

    glColor3ub(32,32,32);
    d_fourppolygon(-0.4651202815081, 2.5624953683628,-0.4637741011929, 2.6778822525218,-0.3856956429119, 2.6571126133732,-0.3897341838575, 2.5509566799469);// yellow's part black border

    glColor3ub(152,2,2);
    d_fourppolygon(-1.5031257771826, 2.0685357340165,-1.5062085968589, 2.55976239563,-0.5445449201042, 2.5555721553132,-0.4782973929948, 1.8579099246974); // maroon part

    d_circle(0.102,-1.2930211753495, 2.3524912391933,233,210,20); // yellow circle inside maroon part

    glColor3ub(255,255,255);// white border in down black part
    d_fourppolygon(-1.664743491191, 1.6604693617336,-1.664743491191, 1.7425788137198,2.235666856115, 1.724191753165,2.1710020272373, 1.6329002300435);//b1
    d_fourppolygon(1.8561754762245, 1.4488692801102,1.8577331280819, 1.4835826643597,2.0376419176054, 1.4795772738693,2.0205077471746, 1.4408584991296);//b2
    d_fourppolygon(1.8164553538622, 1.408815375207,1.8164553538622, 1.4315125879855,2.0002582730291, 1.4261720673318,1.9877970581703, 1.4074802450436);// b3

    glColor3ub(97,7,7);// container
    d_fourppolygon(-0.2228391566953, 1.8511836200794,-0.2200013119207, 2.1084786725765,0.2239793786903, 2.1278084441405,0.2203343361291, 1.8602296845776);//c1
    d_fourppolygon(0.8577498049696, 1.8568778065644,0.8577909096836, 2.1256337839119,1.2293784377369, 2.1205901573049,1.2331601424462, 1.8468221725249);//c2
    d_fourppolygon(0.0604817275447, 2.1278084441405,0.0624753383186, 2.3694646049952,0.4500931777001, 2.3693455861341,0.4507210078787, 2.1259386456946);//c3

    glColor3ub(0,135,50);//container
    d_fourppolygon(0.3884868831238, 1.8535259285512,0.3905082215388, 2.1173802218309,0.7306316795513, 2.1256337839119,0.7306577636364, 1.8468221725249);//c1
    d_fourppolygon(0.6001480251018, 2.1270585371907,0.6009553557363, 2.3688887543148,0.9683241058365, 2.3733552436777,0.9633413817542, 2.1284832904695);//c2

    glPopMatrix();
}


bool d_movekeyship = false;

void d_updateship(int value)//USH01
{
    if (d_movekeyship)
    {
    d_moveship +=0.02f;
    if (d_moveship > 10.0f)
    {
        d_moveship =-10.0f;
    }
    }
    glutPostRedisplay();
    glutTimerFunc(20,d_updateship,0);
}



void d_building()//BD01
{
   if (day)
   {
        d_container(7.2761324528019, -3.116643009982,7.2823927080779, -1.2600301595593,9.8741383923388, -1.302957624309,9.8803986476148, -3.116643009982,7.2847261189428, -0.8459024726097,9.9215446433689, -0.8459024726097,255,255,204);//b1
    glColor3ub(0,0,0);
    d_line(7.2988997695289,-1.9599914714501,9.888324984188,-1.9805587741301);
    d_line(7.3031824374183,-2.6427710949513,9.9001160172749,-2.6564904745632);

    d_fourppolygon(7.6016411435576, -3.1442094889713,7.6139693048164, -2.7497083286903,8.0618924972188, -2.7497083286903,8.0577831101326, -3.1442094889713);
    d_fourppolygon(7.6262974660752, -2.4890557763618,7.638625627334, -2.0945546160808,8.0865488197364, -2.0945546160808,8.0824394326501, -2.4890557763618);
    d_fourppolygon(7.655063175679, -1.8550360544817,7.6632819498515, -1.4675795577771,8.1153145293402, -1.4605348942007,8.1112051422539, -1.8550360544817);
    d_fourppolygon(8.6536442376404, -1.8550360544817,8.6536442376404, -1.4746242213536,9.1303331396466, -1.4746242213536,9.1344425267329, -1.8550360544817);
    d_fourppolygon(8.6577536247266, -2.5031451035147,8.6577536247266, -2.1227332703866,9.1344425267329, -2.1227332703866,9.1385519138192, -2.5031451035147);
    d_fourppolygon(8.6536442376404, -3.1371648253949,8.6536442376404, -2.7567529922668,9.1303331396466, -2.7567529922668,9.1344425267329, -3.1371648253949);

    d_container(9.9843447255622, -6.2344037921618,9.476019911109, -6.1710282308793,9.3420166938794, -1.3458850890586,9.9050919705893, -1.3630482105059,9.1063291369612, -6.2819354631236,9.0477846959078, -3.3956715308547,255,255,204);//b2
    d_line(9.2516397884242,-1.9755017070022,9.3725105189857,-6.2020810485163);
    d_line(9.15445642363319,-2.6525512066843,9.2609101025551,-6.2355611734455);

    d_fourppolygon(9.0820096963645, -4.0408891356133,9.0767979211242, -3.5797949612155,9.1534144062344, -3.5242269610257,9.1605870932719, -4.0217159315559);
    d_fourppolygon(9.2135894274243, -3.714700487573,9.1960993393605, -3.2332542138931,9.2550483485879, -3.1334290469139,9.276926761832, -3.7078607690841);
    d_fourppolygon(9.3060649957537, -3.446625466915,9.3, -2.8,9.3481445179166, -2.7683190246402,9.3661104477403, -3.4365691234869);
    d_fourppolygon(9.3635260886026, -5.1940137314371,9.3487410258717, -4.5741715579396,9.4056056107654, -4.5157072891623,9.4235715405892, -5.1839573880091);
    d_fourppolygon(9.2517510497236, -5.2436211677435,9.2364368429634, -4.7579420390623,9.3005966951081, -4.6504678534654,9.3224751083523, -5.2248995756356);
    d_fourppolygon(9.1145442295932, -5.3906074855599,9.1093324543529, -4.9295133111621,9.1904942226827, -4.8542027672694,9.1994275099595, -5.3442573835964);
   }

   else
   {
    d_container(7.2761324528019, -3.116643009982,7.2823927080779, -1.2600301595593,9.8741383923388, -1.302957624309,9.8803986476148, -3.116643009982,7.2847261189428, -0.8459024726097,9.9215446433689, -0.8459024726097,205,205,160);//b1
    glColor3ub(0,0,0);
    d_line(7.2988997695289,-1.9599914714501,9.888324984188,-1.9805587741301);
    d_line(7.3031824374183,-2.6427710949513,9.9001160172749,-2.6564904745632);

    d_fourppolygon(7.6016411435576, -3.1442094889713,7.6139693048164, -2.7497083286903,8.0618924972188, -2.7497083286903,8.0577831101326, -3.1442094889713);
    d_fourppolygon(7.6262974660752, -2.4890557763618,7.638625627334, -2.0945546160808,8.0865488197364, -2.0945546160808,8.0824394326501, -2.4890557763618);
    d_fourppolygon(7.655063175679, -1.8550360544817,7.6632819498515, -1.4675795577771,8.1153145293402, -1.4605348942007,8.1112051422539, -1.8550360544817);
    d_fourppolygon(8.6536442376404, -1.8550360544817,8.6536442376404, -1.4746242213536,9.1303331396466, -1.4746242213536,9.1344425267329, -1.8550360544817);
    d_fourppolygon(8.6577536247266, -2.5031451035147,8.6577536247266, -2.1227332703866,9.1344425267329, -2.1227332703866,9.1385519138192, -2.5031451035147);
    d_fourppolygon(8.6536442376404, -3.1371648253949,8.6536442376404, -2.7567529922668,9.1303331396466, -2.7567529922668,9.1344425267329, -3.1371648253949);

    d_container(9.9843447255622, -6.2344037921618,9.476019911109, -6.1710282308793,9.3420166938794, -1.3458850890586,9.9050919705893, -1.3630482105059,9.1063291369612, -6.2819354631236,9.0477846959078, -3.3956715308547,205,205,160);//b2
    d_line(9.2516397884242,-1.9755017070022,9.3725105189857,-6.2020810485163);
    d_line(9.15445642363319,-2.6525512066843,9.2609101025551,-6.2355611734455);

    d_fourppolygon(9.0820096963645, -4.0408891356133,9.0767979211242, -3.5797949612155,9.1534144062344, -3.5242269610257,9.1605870932719, -4.0217159315559);
    d_fourppolygon(9.2135894274243, -3.714700487573,9.1960993393605, -3.2332542138931,9.2550483485879, -3.1334290469139,9.276926761832, -3.7078607690841);
    d_fourppolygon(9.3060649957537, -3.446625466915,9.3, -2.8,9.3481445179166, -2.7683190246402,9.3661104477403, -3.4365691234869);
    d_fourppolygon(9.3635260886026, -5.1940137314371,9.3487410258717, -4.5741715579396,9.4056056107654, -4.5157072891623,9.4235715405892, -5.1839573880091);
    d_fourppolygon(9.2517510497236, -5.2436211677435,9.2364368429634, -4.7579420390623,9.3005966951081, -4.6504678534654,9.3224751083523, -5.2248995756356);
    d_fourppolygon(9.1145442295932, -5.3906074855599,9.1093324543529, -4.9295133111621,9.1904942226827, -4.8542027672694,9.1994275099595, -5.3442573835964);
   }
}



void d_continercar()//CNCR01
{
    if(day)
    {
         glColor3ub(182,97,11);//full body part

    d_fourppolygon(-1.6862963619577, -5.7599267480242,-1.6862963619577, -5.4576682061187,-1.1615019061829, -5.3750736054058,-1.1632270253776, -5.7482103764144);
    d_fourppolygon(-1.1632270253776, -5.7482103764144,-1.1634636588412, -5.3279915416075,-0.8329083359239, -5.3767551076844,-0.8172143146578, -5.7567746226278);
    d_fourppolygon(-0.8172143146578, -5.7567746226278,-0.8387935938987, -5.4910972626231,-0.4170167723721, -5.4927787649016,-0.4170167723721, -5.7719081431344);

    d_fourppolygon(-1.3826484164085, -5.4299006183187,-1.5634599073402, -5.0912860614719,-1.470775025434, -5.0391915142647,-1.244380805696, -5.4038533447151);
    d_fourppolygon(-1.6211980304948, -5.3048737050214,-1.6819750022366, -5.1850439847174,-0.1276525394839, -4.3255282824565,-0.0637410445917, -4.4095354303625);

    //container holding part//
    d_line(-0.1396125447945, -4.3927230604161,-0.2318732429439, -4.6479377189333);
    d_line(-0.1396125447945, -4.3927230604161,0.0239405110159, -4.640748573623);

    glColor3ub(68,69,69);//window part

    d_fourppolygon(-1.1634636588412, -5.3279915416075,-1.1644597266613, -5.146063697269,-0.9363315023982, -5.1525816465337,-0.8329083359239, -5.3767551076844);

    glColor3ub(8,184,210);
    d_fourppolygon(-1.1303307422068, -5.3047523783924,-1.1308501125626, -5.191678032351,-0.9807520797267, -5.1988008258024,-0.9340087477017, -5.3181076161139);

    //car body border line//
    glColor3ub(0,0,0);
    glLineWidth(1.5);
    d_fourline(-1.6862963619577, -5.7599267480242,-1.6862963619577, -5.4576682061187,-0.4170167723721, -5.4927787649016,-0.4170167723721, -5.7719081431344);

    d_fourline(-1.3826484164085, -5.4299006183187,-1.5634599073402, -5.0912860614719,-1.470775025434, -5.0391915142647,-1.244380805696, -5.4038533447151);
    d_fourline(-1.6211980304948, -5.3048737050214,-1.6819750022366, -5.1850439847174,-0.1276525394839, -4.3255282824565,-0.0637410445917, -4.4095354303625);

    //Wheel part//
    d_circle(0.1410,-1.4563766461021, -5.6734162241026,0,0,0);
    d_circle(0.1410,-0.4962504423028, -5.6734162241026,0,0,0);

    //container part//
    glColor3ub(84,12,184);
    d_fourppolygon(-0.3129452064503, -5.1740744720929,-0.3179400392713, -4.6146531961392,0.1732185214619, -4.6146531961392,0.1732185214619, -5.1740744720929);

    glColor3ub(0,0,0);
    d_fourline(-0.3129452064503, -5.1740744720929,-0.3179400392713, -4.6146531961392,0.1732185214619, -4.6146531961392,0.1732185214619, -5.1740744720929);
    }

    else
    {
         glColor3ub(141,75,9);//full body part

    d_fourppolygon(-1.6862963619577, -5.7599267480242,-1.6862963619577, -5.4576682061187,-1.1615019061829, -5.3750736054058,-1.1632270253776, -5.7482103764144);
    d_fourppolygon(-1.1632270253776, -5.7482103764144,-1.1634636588412, -5.3279915416075,-0.8329083359239, -5.3767551076844,-0.8172143146578, -5.7567746226278);
    d_fourppolygon(-0.8172143146578, -5.7567746226278,-0.8387935938987, -5.4910972626231,-0.4170167723721, -5.4927787649016,-0.4170167723721, -5.7719081431344);

    d_fourppolygon(-1.3826484164085, -5.4299006183187,-1.5634599073402, -5.0912860614719,-1.470775025434, -5.0391915142647,-1.244380805696, -5.4038533447151);
    d_fourppolygon(-1.6211980304948, -5.3048737050214,-1.6819750022366, -5.1850439847174,-0.1276525394839, -4.3255282824565,-0.0637410445917, -4.4095354303625);

    //container holding part//
    d_line(-0.1396125447945, -4.3927230604161,-0.2318732429439, -4.6479377189333);
    d_line(-0.1396125447945, -4.3927230604161,0.0239405110159, -4.640748573623);

    glColor3ub(68,69,69);//window part

    d_fourppolygon(-1.1634636588412, -5.3279915416075,-1.1644597266613, -5.146063697269,-0.9363315023982, -5.1525816465337,-0.8329083359239, -5.3767551076844);

    glColor3ub(7,153,175);
    d_fourppolygon(-1.1303307422068, -5.3047523783924,-1.1308501125626, -5.191678032351,-0.9807520797267, -5.1988008258024,-0.9340087477017, -5.3181076161139);

    //car body border line//
    glColor3ub(0,0,0);
    glLineWidth(1.5);
    d_fourline(-1.6862963619577, -5.7599267480242,-1.6862963619577, -5.4576682061187,-0.4170167723721, -5.4927787649016,-0.4170167723721, -5.7719081431344);

    d_fourline(-1.3826484164085, -5.4299006183187,-1.5634599073402, -5.0912860614719,-1.470775025434, -5.0391915142647,-1.244380805696, -5.4038533447151);
    d_fourline(-1.6211980304948, -5.3048737050214,-1.6819750022366, -5.1850439847174,-0.1276525394839, -4.3255282824565,-0.0637410445917, -4.4095354303625);

    //Wheel part//
    d_circle(0.1410,-1.4563766461021, -5.6734162241026,0,0,0);
    d_circle(0.1410,-0.4962504423028, -5.6734162241026,0,0,0);

    //container part//
    glColor3ub(75,11,159);
    d_fourppolygon(-0.3129452064503, -5.1740744720929,-0.3179400392713, -4.6146531961392,0.1732185214619, -4.6146531961392,0.1732185214619, -5.1740744720929);

    glColor3ub(0,0,0);
    d_fourline(-0.3129452064503, -5.1740744720929,-0.3179400392713, -4.6146531961392,0.1732185214619, -4.6146531961392,0.1732185214619, -5.1740744720929);
    }
}



void Rectangle(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float r, float g, float b) {
    glColor3ub(r, g, b);
    glBegin(GL_POLYGON);
        glVertex2d(x1, y1);
        glVertex2d(x2, y2);
        glVertex2d(x3, y3);
        glVertex2d(x4, y4);
    glEnd();
}

// Function to draw a triangle..............................................................................
void triangle(float x1, float y1, float x2, float y2, float x3, float y3, float r, float g, float b) {
    glColor3ub(r, g, b);
    glBegin(GL_POLYGON);
        glVertex2d(x1, y1);
        glVertex2d(x2, y2);
        glVertex2d(x3, y3);
    glEnd();
}
//function for drawing lines..................................
void line(float x1, float y1, float x2, float y2,float r, float g, float b){

glBegin(GL_LINES);
glColor3ub(r, g, b);
    glVertex2i(x1, y1); // Starting point (x1, y1)
    glVertex2i(x2, y2); // Ending point (x2, y2)
    glEnd();


}

// Function to draw a circle .......................................................................................
void Circle(float radius, float xc, float yc,float r,float g, float b) {
    glColor3ub(r, g, b);  // Default white color for clouds
    glBegin(GL_POLYGON);
    for (int i = 0; i < 200; i++) {
        float pi = 3.1416;
        float A = (i * 2 * pi) / 200;
        float r = radius;
        float x = r * cos(A);
        float y = r * sin(A);
        glVertex2f(x + xc, y + yc);
    }
    glEnd();
}

// Function to draw the ground......................................................................................
void ground() {
    if(day){
    Rectangle(-10,4,-10,3.18,10,3.2,10,4, 196, 186, 118);

    //ground color shedding
        Rectangle(-5.28,4,-4.59085, 3.20521,-3.19,3.19,-4, 4, 165, 156, 88); // shade for building one
        Rectangle(-3,4,-2.2,3.19,0.93,3.19,0,4, 165, 156, 88); // shade for building two
        Rectangle( 1.8,4,2.94,3.2,5.2,3.2,4.22,4,165, 156, 88); // shade for building three

        // ground 2........................................

    Rectangle(-10,1.18,-10,0.42,10,0.42,10,1.22, 196, 186, 118);
    }
    else{
        Rectangle(-10,4,-10,3.18,10,3.2,10,4, 126, 127, 85);

    //ground color shedding
        Rectangle(-5.28,4,-4.59085, 3.20521,-3.19,3.19,-4, 4, 141, 142, 32); // shade for building one
        Rectangle(-3,4,-2.2,3.19,0.93,3.19,0,4, 141, 142, 32); // shade for building two
        Rectangle( 1.8,4,2.94,3.2,5.2,3.2,4.22,4,141, 142, 32); // shade for building three

        // ground 2222

    Rectangle(-10,1.18,-10,0.42,10,0.42,10,1.22, 126, 127, 85);


    }



}
// function for road ...................................................................................................
void road(){

  if (day){
    Rectangle(-10,3.18,-10,1.18,10, 1.22,10,3.2,168, 167, 159);// road body
      // road lines start from here ..............................................................................
        Rectangle(-9, 2.4,-9, 2.2,-7.5, 2.2,-7.5, 2.4,236, 236, 232);  // zebra 1
        Rectangle(-5.5, 2.4,-5.5, 2.2,-4, 2.2,-4, 2.4,236, 236, 232);  // zebra 2
        Rectangle(-2, 2.4,-2, 2.2,-0.5, 2.2,-0.5, 2.4,236, 236, 232);  // zebra 3
        Rectangle(1.5, 2.4,1.5, 2.2,3, 2.2,3, 2.4,236, 236, 232);  // zebra 4
        Rectangle(5, 2.4,5, 2.2,6.5, 2.2,6.5, 2.4,236, 236, 232);  // zebra 5
        Rectangle(8.5, 2.4,8.5, 2.2,10,2.2,10,2.4,236, 236, 232);  // zebra
  }
  else{
     Rectangle(-10,3.18,-10,1.18,10, 1.22,10,3.2,33, 26, 25);// road body
      // road lines start from here ..............................................................................
        Rectangle(-9, 2.4,-9, 2.2,-7.5, 2.2,-7.5, 2.4,236, 236, 232);  // zebra 1
        Rectangle(-5.5, 2.4,-5.5, 2.2,-4, 2.2,-4, 2.4,236, 236, 232);  // zebra 2
        Rectangle(-2, 2.4,-2, 2.2,-0.5, 2.2,-0.5, 2.4,236, 236, 232);  // zebra 3
        Rectangle(1.5, 2.4,1.5, 2.2,3, 2.2,3, 2.4,236, 236, 232);  // zebra 4
        Rectangle(5, 2.4,5, 2.2,6.5, 2.2,6.5, 2.4,236, 236, 232);  // zebra 5
        Rectangle(8.5, 2.4,8.5, 2.2,10,2.2,10,2.4,236, 236, 232);  // zebra
  }

  }

void lamppost (){

        Rectangle(0.59249, 4.49617,0.59782, 3.08713,0.82086, 3.08245,0.81703, 4.49617,91, 76, 71  );  // zebra
                  Circle(0.53,0.67871, 4.91188,193, 62, 13 );
                Circle(0.27,0.67871, 4.91188,194, 191, 182  );




}


// Function to draw the sky..........................................................................................
void Sky() {
    if (day){
        Rectangle(-10, 10,-10,4,10,4,10, 10,125, 209, 222 );
    }
    else{
        Rectangle(-10, 10,-10,4,10,4,10, 10,0, 0, 0 );
    }
}
float raidon_movecloud=0.0f;
//function for cloud .....................................................
void cloud (){
         // cloud one..................................
         glPushMatrix();
         glTranslatef(raidon_movecloud,0,0);

         if (day){

            Circle(0.44,-7.45174, 9.00753,230, 228, 227 );
            Circle(0.47,-6.68,9.2,230, 228, 227 );
            Circle(0.5,-6.15416, 9.04067,230, 228, 227 );
            Circle(0.32,-5.24235, 9.10695,230, 228, 227 );

            //cloud two...............................................
                        Circle(0.44,1.73653, 8.9302,230, 228, 227 );
                        Circle(0.63,2.63081, 8.97439,230, 228, 227 );
                        Circle(0.46,3.5777, 8.9302,230, 228, 227 );

   // cloud three ...................................................

                             Circle(0.32,5.93961, 7.82801,230, 228, 227 );
                            Circle(0.54,6.50829, 7.98607,230, 228, 227 );
                            Circle(0.27,7.14387, 7.85962,230, 228, 227 );
         }
         else{

            Circle(0.44,-7.45174, 9.00753,140, 140, 140  );
            Circle(0.47,-6.68,9.2,183, 183, 183  );
            Circle(0.5,-6.15416, 9.04067,140, 140, 140  );
            Circle(0.32,-5.24235, 9.10695,183, 183, 183  );

            //cloud two...............................................
                        Circle(0.44,1.73653, 8.9302,140, 140, 140  );
                        Circle(0.63,2.63081, 8.97439,183, 183, 183 );
                        Circle(0.46,3.5777, 8.9302,140, 140, 140 );

   // cloud three ...................................................

                             Circle(0.32,5.93961, 7.82801,140, 140, 140  );
                            Circle(0.54,6.50829, 7.98607,183, 183, 183 );
                            Circle(0.27,7.14387, 7.85962,140, 140, 140 );


         }


             glPopMatrix();


}
//**********************************************FUNCTION FOR CLOUD MOVEMENT ******************************************
void raidon_updatecloud(int value){


raidon_movecloud +=0.02f;
if(raidon_movecloud>+10.0f)
{
   raidon_movecloud=-10.0f;
}
glutPostRedisplay();
glutTimerFunc(20,raidon_updatecloud,0);
}

// function for sun .................
void sun (){

if(day){
   Circle(0.74,-2.60429, 9.01254,241, 142, 73  );
}
else{
      Circle(0.74,-2.60429, 9.01254,174, 175, 184  );

}


}

//function to draw the mountains.....................................................................................

void mountain(){
    if(day){
 Rectangle(-7, 6,-10,4,-7.43,4,-6.03581, 5.37229, 83, 191, 73   );  //mountain 1
  Rectangle(-7.43,4, -4.30782, 7.01799,-2.7444, 5.47103,-5,4, 169, 173, 172 );  //mountain 2
 triangle(-5,4,-1.13161, 6.59011,3, 4, 83, 191, 73 );  //mountain 3
  Rectangle(3.59255, 6.78525,0.59,5.51,3, 4,8, 4, 169, 173, 172 );   //mountain 4
  Rectangle(8.6347, 6.49475,5.76,5.42,8, 4,10,5.54, 83, 191, 73  );   //mountain 5
   triangle(10,5.54,8, 4,10,4, 169, 173, 172 );  //mountain 6
// mountain shedding start

 triangle(-7, 6,-6.48,4.94,-6.03581, 5.37229, 73, 158, 28  );  //mountain 1 shedding
triangle(-4.30782, 7.01799,-3.44415, 5.03668,-2.7444, 5.47103, 139, 144, 139  );  //mountain 2 shedding
triangle(-1.13161, 6.59011,2,4,3, 4, 73, 158, 28  );  //mountain 3 shedding
triangle(3.59,6.79,6.85,4,8, 4, 139, 144, 139  );  //mountain 4 shedding
triangle(8.6347, 6.49475,9.68,5.29,10,5.54, 73, 158, 28  );  //mountain 5 shedding
    }
    else{
        Rectangle(-7, 6,-10,4,-7.43,4,-6.03581, 5.37229, 25, 84, 39  );  //mountain 1
  Rectangle(-7.43,4, -4.30782, 7.01799,-2.7444, 5.47103,-5,4, 101, 106, 102 );  //mountain 2
 triangle(-5,4,-1.13161, 6.59011,3, 4, 25, 84, 39 );  //mountain 3
  Rectangle(3.59255, 6.78525,0.59,5.51,3, 4,8, 4, 101, 106, 102 );   //mountain 4
  Rectangle(8.6347, 6.49475,5.76,5.42,8, 4,10,5.54, 25, 84, 39  );   //mountain 5
   triangle(10,5.54,8, 4,10,4, 101, 106, 102 );  //mountain 6
// mountain shedding start

 triangle(-7, 6,-6.48,4.94,-6.03581, 5.37229, 13, 53, 23  );  //mountain 1 shedding
triangle(-4.30782, 7.01799,-3.44415, 5.03668,-2.7444, 5.47103, 71, 71, 71   );  //mountain 2 shedding
triangle(-1.13161, 6.59011,2,4,3, 4, 13, 53, 23  );  //mountain 3 shedding
triangle(3.59,6.79,6.85,4,8, 4, 71, 71, 71  );  //mountain 4 shedding
triangle(8.6347, 6.49475,9.68,5.29,10,5.54, 13, 53, 23  );  //mountain 5 shedding

    }


}

// watch tower....................................
void watchtower(){
if(day){
//watchtower 1 body
  Rectangle(5.50166, 6.72187,5.48876, 5.45016,6.19172, 5.43797,6.19172, 6.71781, 184, 188, 191 );
triangle(5.84991, 7.15254,5.50166, 6.72187,6.19172, 6.71781, 221, 86, 86  );
// watchtower 1 windows
  Rectangle(5.71416, 6.60162,5.71821, 6.39237,5.95314, 6.39492,5.95719, 6.59907, 101, 106, 102 );
  Rectangle(5.72226, 6.20098,5.71821, 6.00449,5.95719, 6.00194,5.96125, 6.20098, 101, 106, 102 );
  Rectangle(5.71821, 5.80545,5.71416, 5.60428,5.95719, 5.6013,5.96125, 5.8029, 101, 106, 102 );
// watch tower two
  Rectangle(-6.55473, 7.37562,-6.50695, 5.21805,-5.79014, 5.21805,-5.76625, 7.37562, 184, 188, 191 );
  triangle(-6.12465, 7.94262,-6.55473, 7.37562,-5.76625, 7.37562, 221, 86, 86  );
  //watchtower two windows
    Rectangle(-6.30783, 7.1699,-6.314, 6.80565,-6, 6.8,-5.99088, 7.17132, 101, 106, 102 );
    Rectangle(-6.28684, 6.33333,-6.29408, 6.00034,-6, 6,-5.99088, 6.33065, 101, 106, 102 );



}
else{

    //watchtower 1 body
  Rectangle(5.50166, 6.72187,5.48876, 5.45016,6.19172, 5.43797,6.19172, 6.71781, 90, 85, 85  );
triangle(5.84991, 7.15254,5.50166, 6.72187,6.19172, 6.71781, 151, 33, 33 );
// watchtower 1 windows
  Rectangle(5.71416, 6.60162,5.71821, 6.39237,5.95314, 6.39492,5.95719, 6.59907, 230, 195, 53  );
  Rectangle(5.72226, 6.20098,5.71821, 6.00449,5.95719, 6.00194,5.96125, 6.20098, 230, 195, 53 );
  Rectangle(5.71821, 5.80545,5.71416, 5.60428,5.95719, 5.6013,5.96125, 5.8029,230, 195, 53  );

// watch tower two
  Rectangle(-6.55473, 7.37562,-6.50695, 5.21805,-5.79014, 5.21805,-5.76625, 7.37562, 90, 85, 85);
  triangle(-6.12465, 7.94262,-6.55473, 7.37562,-5.76625, 7.37562, 151, 33, 33  );
  //watchtower two windows
    Rectangle(-6.30783, 7.1699,-6.314, 6.80565,-6, 6.8,-5.99088, 7.17132, 230, 195, 53 );
    Rectangle(-6.28684, 6.33333,-6.29408, 6.00034,-6, 6,-5.99088, 6.33065, 230, 195, 53 );


}









}
// all buildings function ......................................................................

void building (){

//building 1  {the big building in the middle }.........................................................................
Rectangle(-3, 6,-3,4,0,4,0,6, 115, 136, 187 ); // building 1  ground floor
Rectangle( -2.59793, 7.99931,-2.60231, 5.99987,-0.42,6,-0.41032, 8.00998,115, 136, 187 ); // building 1  second floor
Rectangle(-2.16985, 9.80215,-2.16,8,-0.8,8.01,-0.7997, 9.80215, 115, 136, 187 ); // building 1  3rd floor

//building 1 front shedding

Rectangle(-2.17,9.02,-2.16,8,-0.8,8.01,-0.8,9.02, 60, 81, 133  );

Rectangle(-2.6,6.99,-2.60231, 5.99987,-0.42,6,-0.41,7.02, 60, 81, 133  );

Rectangle(-3,5,-3,4,0,4,0,5 ,60, 81, 133  );

//building 1 side  shedding


Rectangle(-0.6,6,-0.6,5,0,5,0,6 ,96, 122, 184 ); //ground floor
Rectangle(-0.6,5,-0.6,4,0,4,0,5 , 32, 47, 86 );//ground floor

Rectangle(-1,7.01,-1, 6,-0.42,6,-0.41,7.02, 32, 47, 86 );//second floor
Rectangle(-1,8.01,-1,7.01,-0.41,7.02,-0.41032, 8.00998,96, 122, 184 ); //second floor

Rectangle( -1.2,9.8,-1.2,9.02,-0.8,9.02,-0.7997, 9.80215,96, 122, 184 );//third floor
Rectangle(-1.2, 8,-0.8,8.01,-0.8,9.02,-1.2,9.02,32, 47, 86 ); //third floor

//building two start {building one the left}................................................................................................

Rectangle(-5.28297, 5.98816,-5.28,4,-4, 4,-4, 6,47, 142, 132  ); //BUILDING BASE
Rectangle(-4.29,6,-4.3,4,-4, 4,-4, 6,42, 116, 108   ); // BUILDING SHADDING

// building three stART {building on the right} ................................................................................

Rectangle( 1.8,6.02,1.8,4,4.22,4,4.22135, 6.01361,150, 90, 155 ); // BUILDING BASE
Rectangle( 3.58,6.08,3.6,4,4.22,4,4.22135, 6.01361,117, 63, 122); // BUILDING shedding

// building on the left windows
if(day){
Rectangle( -5.12331, 5.9168,-5.12331, 5.80583,-4.95421, 5.80361,-4.96125, 5.91902, 83, 77, 76); // BUILDING window 1
Rectangle( -4.59839, 5.9168,-4.6, 5.8,-4.43986, 5.79917,-4.43986, 5.92124,83, 77, 76 ); // BUILDING window 2
Rectangle( -4.19326, 5.91902,-4.2, 5.8,-4.07348, 5.80139,-4.06995, 5.92124,83, 77, 76 ); // BUILDING window 3
Rectangle( -5.12683, 5.52174,-5.12331, 5.40633,-4.95421, 5.40189,-4.95773, 5.51731,83, 77, 76 ); // BUILDING window 4
Rectangle( -4.59487, 5.52174,-4.6, 5.4,-4.43986, 5.39746,-4.43634, 5.52174,83, 77, 76 ); // BUILDING window 5
Rectangle( -4.19678, 5.51952,-4.2, 5.4,-4.08052, 5.40189,-4.08052, 5.52174,83, 77, 76 ); // BUILDING window 6
Rectangle( -4.91193, 4.27664,-4.91193, 4.00808,-4.64,4,-4.64067, 4.27886,83, 77, 76 ); // BUILDING window  door
Rectangle( -5.12331, 5.12003,-5.12331, 5.00018,-4.96125, 5.00018,-4.96125, 5.12003,83, 77, 76 ); // BUILDING window 7
Rectangle( -4.60191, 5.11781,-4.6, 5,-4.43986, 5.00018,-4.43986, 5.11781,83, 77, 76 ); // BUILDING window 8
Rectangle( -4.2003, 5.12003,-4.2, 5,-4.08052, 5.00018,-4.08052, 5.12003,83, 77, 76 ); // BUILDING window 9

Rectangle( -5.11978, 4.72275,-5.11978, 4.6029,-4.95773, 4.6029,-4.96125, 4.72053,83, 77, 76 ); // BUILDING window 10
Rectangle(-4.60191, 4.72053,-4.6, 4.6,-4.43986, 4.60068,-4.43986, 4.72053 ,83, 77, 76 ); // BUILDING window  11
Rectangle( -4.2003, 4.72053,-4.2, 4.6,-4.08,4.6,-4.07348, 4.72053,83, 77, 76 ); // BUILDING window  12

// building middle windows { big building  }....................................
Rectangle( -1.99926, 9.67767,-1.99926, 9.51954,-1.77294, 9.51695,-1.76883, 9.67767,83, 77, 76 ); // BUILDING window 1
Rectangle( -1.59189, 9.67767,-1.59601, 9.51695,-1.34912, 9.52213,-1.34912, 9.67767,83, 77, 76 ); // BUILDING window 2
Rectangle( -1.11458, 9.68026,-1.11458, 9.51695,-0.88827, 9.51695,-0.88415, 9.68026,83, 77, 76 ); // BUILDING window 3
Rectangle(-2.00337, 9.32253,-1.99926, 9.1644,-1.77519, 9.16157,-1.78267, 9.32418,83, 77, 76 ); // BUILDING window 4
Rectangle( -1.59938, 9.32418,-1.59564, 9.15685,-1.35623, 9.15921,-1.35997, 9.32418,83, 77, 76 ); // BUILDING window 5
Rectangle(-1.11803, 9.3207,-1.11426, 9.16139,-0.88027, 9.16615,-0.88404, 9.32545 ,83, 77, 76 ); // BUILDING window 6
Rectangle(-2, 8.9,-1.99858, 8.75986,-1.80163, 8.76182,-1.8, 8.9,83, 77, 76 ); // BUILDING window 7
Rectangle(-1.6, 8.9,-1.59775, 8.76182,-1.36341, 8.75887,-1.36341, 8.90207,83, 77, 76 ); // BUILDING window 8
Rectangle(-1.12673, 8.90059,-1.12438, 8.76182,-0.88301, 8.76477,-0.88301, 8.90059,83, 77, 76 ); // BUILDING window 9
Rectangle(-2, 8.3,-1.99853, 8.16243,-1.80071, 8.16243,-1.8, 8.3,83, 77, 76 ); // BUILDING window 10
Rectangle(-1.6, 8.3,-1.59497, 8.16243,-1.36022, 8.16409,-1.36285, 8.30035,83, 77, 76 ); // BUILDING window 11
Rectangle(-1.11755, 8.30035,-1.11491, 8.16076,-0.87752, 8.16575,-0.88543, 8.30201,83, 77, 76 ); // BUILDING window 12
Rectangle( -2.4015, 7.79919,-2.4015, 7.59678,-2, 7.6,-2, 7.8,83, 77, 76 ); // BUILDING window 13
Rectangle( -1.59454, 7.80389,-1.59454, 7.59678,-1.22095, 7.59678,-1.22842, 7.79919,83, 77, 76 ); // BUILDING window 14
Rectangle( -0.89219, 7.79448,-0.89219, 7.58736,-0.60079, 7.58736,-0.60079, 7.80389,83, 77, 76 ); // BUILDING window 15
Rectangle(-2.39403, 7.39907,-2.39403, 7.20137,-2, 7.2,-2, 7.4,83, 77, 76 ); // BUILDING window 16
Rectangle(-1.59454, 7.40849,-1.59454, 7.20137,-1.19854, 7.19666,-1.20601, 7.39907,83, 77, 76 ); // BUILDING window 17
Rectangle(-0.90714, 7.40378,-0.90714, 7.20137,-0.59332, 7.20137,-0.58585, 7.40849,83, 77, 76 ); // BUILDING window 18
Rectangle(-2.4015, 6.86716,-2.4015, 6.67887,-2.00549, 6.67887,-2.01296, 6.86716,83, 77, 76 ); // BUILDING window 19
Rectangle(-1.60949, 6.87657,-1.60201, 6.67887,-1.20601, 6.68828,-1.20601, 6.87186,83, 77, 76 ); // BUILDING window 20

Rectangle(-0.90714, 6.87657,-0.90714, 6.68357,-0.59332, 6.67416,-0.59332, 6.88128,83, 77, 76 ); // BUILDING window 21
Rectangle(-2.4015, 6.86716,-2.4015, 6.67887,-2.00549, 6.67887,-2.01296, 6.86716,83, 77, 76 ); // BUILDING window 22
Rectangle(-1.60485, 6.48239,-1.61233, 6.28939,-1.20138, 6.28468,-1.19391, 6.47768,83, 77, 76 ); // BUILDING window 23

Rectangle(-0.89503, 6.4785,-0.88886, 6.2762,-0.59246, 6.2762,-0.58628, 6.47071,83, 77, 76 ); // BUILDING window 24
Rectangle(-2.70432, 5.87939,-2.70432, 5.68099,-2.30912, 5.68099,-2.30912, 5.87939,83, 77, 76 ); // BUILDING window 25
Rectangle(-1.98802, 5.88328,-1.98802, 5.68877,-1.59899, 5.69266,-1.59281, 5.88717,83, 77, 76 ); // BUILDING window 26

Rectangle(-1.29641, 5.88328,-1.29024, 5.68099,-0.90121, 5.6771,-0.90738, 5.88328,83, 77, 76 ); // BUILDING window 27

Rectangle(-0.49366, 5.88328,-0.49983, 5.68488,-0.10463, 5.6771,-0.1108, 5.88717,83, 77, 76 ); // BUILDING window 28

Rectangle(-2.70754, 5.40301,-2.70754, 5.19806,-2.29788, 5.19806,-2.29788, 5.4068,83, 77, 76 ); // BUILDING window 29
Rectangle(-2, 5.4,-2, 5.2,-1.59904, 5.20565,-1.59904, 5.4068,83, 77, 76 ); // BUILDING window 30

Rectangle(-1.29782, 5.4068,-1.2918, 5.19806,-0.90021, 5.19806,-0.89419, 5.40301,83, 77, 76 ); // BUILDING window 31

Rectangle(-0.5, 5.4,-0.5, 5.2,-0.10499, 5.19806,-0.09896, 5.40301,83, 77, 76 ); // BUILDING window 32

Rectangle(-2.70754, 4.9172,-2.70754, 4.72743,-2.30993, 4.71984,-2.30993, 4.9172,83, 77, 76 ); // BUILDING window 33
Rectangle(-2.00871, 4.9172,-2.00871, 4.71984,-1.60507, 4.71984,-1.61109, 4.9172,83, 77, 76 ); // BUILDING window 34

Rectangle(-1.29782, 4.92099,-1.29782, 4.72363,-0.91226, 4.71984,-0.91226, 4.92099,83, 77, 76 ); // BUILDING window 35

Rectangle(-0.5026, 4.92099,-0.49657, 4.72363,-0.11101, 4.71984,-0.10499, 4.92099,83, 77, 76 ); // BUILDING window 36

Rectangle(-2.69549, 4.39723,-2.68947, 4.19607,-2.29788, 4.20367,-2.29185, 4.40103,83, 77, 76 ); // BUILDING window 37
Rectangle(-2, 4.4,-2, 4.4,-1.59904, 4.19987,-1.59904, 4.40103,83, 77, 76 ); // BUILDING window 38

Rectangle(-1.30987, 4.40103,-1.30385, 4.19607,-0.90021, 4.19607,-0.90021, 4.40103,83, 77, 76 ); // BUILDING window 39

Rectangle(-0.5, 4.4,-0.5, 4.2,-0.10499, 4.20367,-0.10499, 4.39344,83, 77, 76 ); // BUILDING window 40

// building three windows
Rectangle(2, 5.8,2, 5.6,2.5, 5.6,2.5, 5.8,83, 77, 76 ); // BUILDING window 1
Rectangle(3, 5.8,3, 5.6,3.5, 5.6,3.5, 5.8,83, 77, 76 ); // BUILDING window 2

Rectangle(3.7863, 5.80101,3.7863, 5.60352,4.08837, 5.60712,4.09407, 5.79382,83, 77, 76 ); // BUILDING window 3

Rectangle(2, 5.2,2, 5,2.5, 5,2.5, 5.2,83, 77, 76 ); // BUILDING window 4

Rectangle(3, 5.2,3, 5,3.5, 5,3.5, 5.2,83, 77, 76 ); // BUILDING window 5

Rectangle(3.8, 5.2,3.8, 5,4.09364, 5.00079,4.08893, 5.1996,83, 77, 76 ); // BUILDING window 6

 Rectangle(2, 4.6,2, 4.4,2.5, 4.4,2.5, 4.6,83, 77, 76 ); // BUILDING window 7
 Rectangle(3, 4.6,3, 4.4,3.5, 4.4,3.5, 4.6,83, 77, 76 ); // BUILDING window 8
Rectangle(3.8, 4.6,3.8, 4.4,4.07951, 4.40137,4.0748, 4.60019,83, 77, 76 ); // BUILDING window 9




}
else{

    Rectangle( -5.12331, 5.9168,-5.12331, 5.80583,-4.95421, 5.80361,-4.96125, 5.91902,   230, 195, 53 ); // BUILDING window 1
Rectangle( -4.59839, 5.9168,-4.6, 5.8,-4.43986, 5.79917,-4.43986, 5.92124,  230, 195, 53 ); // BUILDING window 2
Rectangle( -4.19326, 5.91902,-4.2, 5.8,-4.07348, 5.80139,-4.06995, 5.92124,  230, 195, 53  ); // BUILDING window 3
Rectangle( -5.12683, 5.52174,-5.12331, 5.40633,-4.95421, 5.40189,-4.95773, 5.51731, 230, 195, 53 ); // BUILDING window 4
Rectangle( -4.59487, 5.52174,-4.6, 5.4,-4.43986, 5.39746,-4.43634, 5.52174,  230, 195, 53  ); // BUILDING window 5
Rectangle( -4.19678, 5.51952,-4.2, 5.4,-4.08052, 5.40189,-4.08052, 5.52174,  230, 195, 53); // BUILDING window 6
Rectangle( -4.91193, 4.27664,-4.91193, 4.00808,-4.64,4,-4.64067, 4.27886,  230, 195, 53 ); // BUILDING window  door
Rectangle( -5.12331, 5.12003,-5.12331, 5.00018,-4.96125, 5.00018,-4.96125, 5.12003,  230, 195, 53  ); // BUILDING window 7
Rectangle( -4.60191, 5.11781,-4.6, 5,-4.43986, 5.00018,-4.43986, 5.11781,  230, 195, 53 ); // BUILDING window 8
Rectangle( -4.2003, 5.12003,-4.2, 5,-4.08052, 5.00018,-4.08052, 5.12003,  230, 195, 53  ); // BUILDING window 9

Rectangle( -5.11978, 4.72275,-5.11978, 4.6029,-4.95773, 4.6029,-4.96125, 4.72053,  230, 195, 53 ); // BUILDING window 10
Rectangle(-4.60191, 4.72053,-4.6, 4.6,-4.43986, 4.60068,-4.43986, 4.72053 ,  230, 195, 53 ); // BUILDING window  11
Rectangle( -4.2003, 4.72053,-4.2, 4.6,-4.08,4.6,-4.07348, 4.72053,  230, 195, 53 ); // BUILDING window  12

// building middle windows { big building  }....................................
Rectangle( -1.99926, 9.67767,-1.99926, 9.51954,-1.77294, 9.51695,-1.76883, 9.67767,  230, 195, 53 ); // BUILDING window 1
Rectangle( -1.59189, 9.67767,-1.59601, 9.51695,-1.34912, 9.52213,-1.34912, 9.67767,  230, 195, 53  ); // BUILDING window 2
Rectangle( -1.11458, 9.68026,-1.11458, 9.51695,-0.88827, 9.51695,-0.88415, 9.68026,  230, 195, 53  ); // BUILDING window 3
Rectangle(-2.00337, 9.32253,-1.99926, 9.1644,-1.77519, 9.16157,-1.78267, 9.32418,  230, 195, 53  ); // BUILDING window 4
Rectangle( -1.59938, 9.32418,-1.59564, 9.15685,-1.35623, 9.15921,-1.35997, 9.32418,  230, 195, 53); // BUILDING window 5
Rectangle(-1.11803, 9.3207,-1.11426, 9.16139,-0.88027, 9.16615,-0.88404, 9.32545 ,  230, 195, 53 ); // BUILDING window 6
Rectangle(-2, 8.9,-1.99858, 8.75986,-1.80163, 8.76182,-1.8, 8.9,  230, 195, 53 ); // BUILDING window 7
Rectangle(-1.6, 8.9,-1.59775, 8.76182,-1.36341, 8.75887,-1.36341, 8.90207,  230, 195, 53 ); // BUILDING window 8
Rectangle(-1.12673, 8.90059,-1.12438, 8.76182,-0.88301, 8.76477,-0.88301, 8.90059,  230, 195, 53); // BUILDING window 9
Rectangle(-2, 8.3,-1.99853, 8.16243,-1.80071, 8.16243,-1.8, 8.3,  230, 195, 53); // BUILDING window 10
Rectangle(-1.6, 8.3,-1.59497, 8.16243,-1.36022, 8.16409,-1.36285, 8.30035,  230, 195, 53  ); // BUILDING window 11
Rectangle(-1.11755, 8.30035,-1.11491, 8.16076,-0.87752, 8.16575,-0.88543, 8.30201, 230, 195, 53  ); // BUILDING window 12
Rectangle( -2.4015, 7.79919,-2.4015, 7.59678,-2, 7.6,-2, 7.8,  230, 195, 53 ); // BUILDING window 13
Rectangle( -1.59454, 7.80389,-1.59454, 7.59678,-1.22095, 7.59678,-1.22842, 7.79919,  230, 195, 53 ); // BUILDING window 14
Rectangle( -0.89219, 7.79448,-0.89219, 7.58736,-0.60079, 7.58736,-0.60079, 7.80389,  230, 195, 53 ); // BUILDING window 15
Rectangle(-2.39403, 7.39907,-2.39403, 7.20137,-2, 7.2,-2, 7.4, 230, 195, 53 ); // BUILDING window 16
Rectangle(-1.59454, 7.40849,-1.59454, 7.20137,-1.19854, 7.19666,-1.20601, 7.39907, 230, 195, 53); // BUILDING window 17
Rectangle(-0.90714, 7.40378,-0.90714, 7.20137,-0.59332, 7.20137,-0.58585, 7.40849, 230, 195, 53); // BUILDING window 18
Rectangle(-2.4015, 6.86716,-2.4015, 6.67887,-2.00549, 6.67887,-2.01296, 6.86716, 230, 195, 53 ); // BUILDING window 19
Rectangle(-1.60949, 6.87657,-1.60201, 6.67887,-1.20601, 6.68828,-1.20601, 6.87186, 230, 195, 53); // BUILDING window 20

Rectangle(-0.90714, 6.87657,-0.90714, 6.68357,-0.59332, 6.67416,-0.59332, 6.88128, 230, 195, 53); // BUILDING window 21
//Rectangle(-2.41181, 6.47768,-2.41181, 6.28468,-2.00549, 6.67887,-2.00833, 6.47768, 230, 195, 53 ); // BUILDING window 22
//Rectangle(-1.60485, 6.48239,-1.61233, 6.28939,-1.20138, 6.28468,-1.19391, 6.47768, 230, 195, 53 ); // BUILDING window 23

//Rectangle(-0.89503, 6.4785,-0.88886, 6.2762,-0.59246, 6.2762,-0.58628, 6.47071, 230, 195, 53 ); // BUILDING window 24
Rectangle(-2.70432, 5.87939,-2.70432, 5.68099,-2.30912, 5.68099,-2.30912, 5.87939, 230, 195, 53 ); // BUILDING window 25
Rectangle(-1.98802, 5.88328,-1.98802, 5.68877,-1.59899, 5.69266,-1.59281, 5.88717, 230, 195, 53 ); // BUILDING window 26

Rectangle(-1.29641, 5.88328,-1.29024, 5.68099,-0.90121, 5.6771,-0.90738, 5.88328, 230, 195, 53 ); // BUILDING window 27

Rectangle(-0.49366, 5.88328,-0.49983, 5.68488,-0.10463, 5.6771,-0.1108, 5.88717, 230, 195, 53 ); // BUILDING window 28

Rectangle(-2.70754, 5.40301,-2.70754, 5.19806,-2.29788, 5.19806,-2.29788, 5.4068, 230, 195, 53); // BUILDING window 29
Rectangle(-2, 5.4,-2, 5.2,-1.59904, 5.20565,-1.59904, 5.4068, 230, 195, 53 ); // BUILDING window 30

Rectangle(-1.29782, 5.4068,-1.2918, 5.19806,-0.90021, 5.19806,-0.89419, 5.40301, 230, 195, 53 ); // BUILDING window 31

Rectangle(-0.5, 5.4,-0.5, 5.2,-0.10499, 5.19806,-0.09896, 5.40301, 230, 195, 53 ); // BUILDING window 32

Rectangle(-2.70754, 4.9172,-2.70754, 4.72743,-2.30993, 4.71984,-2.30993, 4.9172, 230, 195, 53 ); // BUILDING window 33
Rectangle(-2.00871, 4.9172,-2.00871, 4.71984,-1.60507, 4.71984,-1.61109, 4.9172, 230, 195, 53 ); // BUILDING window 34

Rectangle(-1.29782, 4.92099,-1.29782, 4.72363,-0.91226, 4.71984,-0.91226, 4.92099, 230, 195, 53 ); // BUILDING window 35

Rectangle(-0.5026, 4.92099,-0.49657, 4.72363,-0.11101, 4.71984,-0.10499, 4.92099, 230, 195, 53 ); // BUILDING window 36

//Rectangle(-2.69549, 4.39723,-2.68947, 4.19607,-2.29788, 4.20367,-2.29185, 4.40103, 230, 195, 53 ); // BUILDING window 37
//Rectangle(-2, 4.4,-2, 4.4,-1.59904, 4.19987,-1.59904, 4.40103, 230, 195, 53 ); // BUILDING window 38

//Rectangle(-1.30987, 4.40103,-1.30385, 4.19607,-0.90021, 4.19607,-0.90021, 4.40103, 230, 195, 53); // BUILDING window 39

//Rectangle(-0.5, 4.4,-0.5, 4.2,-0.10499, 4.20367,-0.10499, 4.39344, 230, 195, 53 ); // BUILDING window 40


// building three windows
Rectangle(2, 5.8,2, 5.6,2.5, 5.6,2.5, 5.8,230, 195, 53 ); // BUILDING window 1
Rectangle(3, 5.8,3, 5.6,3.5, 5.6,3.5, 5.8,230, 195, 53  ); // BUILDING window 2

Rectangle(3.7863, 5.80101,3.7863, 5.60352,4.08837, 5.60712,4.09407, 5.79382,230, 195, 53  ); // BUILDING window 3

Rectangle(2, 5.2,2, 5,2.5, 5,2.5, 5.2,230, 195, 53 ); // BUILDING window 4

Rectangle(3, 5.2,3, 5,3.5, 5,3.5, 5.2,230, 195, 53  ); // BUILDING window 5

Rectangle(3.8, 5.2,3.8, 5,4.09364, 5.00079,4.08893, 5.1996,230, 195, 53  ); // BUILDING window 6

 Rectangle(2, 4.6,2, 4.4,2.5, 4.4,2.5, 4.6,230, 195, 53  ); // BUILDING window 7
 Rectangle(3, 4.6,3, 4.4,3.5, 4.4,3.5, 4.6,230, 195, 53  ); // BUILDING window 8
Rectangle(3.8, 4.6,3.8, 4.4,4.07951, 4.40137,4.0748, 4.60019,230, 195, 53  ); // BUILDING window 9

}



}
void tree(){


//tree one
 triangle(-8.5, 4.8,-9, 4.6,-8, 4.6, 23, 122, 68 );
 triangle(-8.5, 4.6,-9, 4.4,-8, 4.4, 23, 122, 68 );
 triangle(-8.5, 4.4,-9, 4.2,-8, 4.2, 23, 122, 68 );
 Rectangle( -8.58978, 4.1995,-8.59,4,-8.41,4,-8.41843, 4.20721,  70, 40, 37 ); // BUILDING shedding

// tree two


 triangle(-7, 5,-7.5, 4.8,-6.5, 4.8, 23, 122, 68 );
  triangle(-7.00484, 4.86261,-7.5, 4.6,-6.5, 4.6, 23, 122, 68 );

 triangle(-6.99872, 4.69298,-7.5, 4.4,-6.5, 4.4, 23, 122, 68 );
  triangle(-7.00484, 4.5272,-7.5, 4.2,-6.50869, 4.22754, 23, 122, 68 );
   triangle(-7.01096, 4.32287,-7.47603, 4.13396,-6.51528, 4.13011, 23, 122, 68 );
    Rectangle( -7.07428, 4.32184,-7.07,4,-6.92,4,-6.92151, 4.32373, 70, 40, 37 );

    // tree three
     triangle(6, 5.3,5.4, 4.9,6.6, 4.9, 23, 122, 68 );
          triangle(6, 5,5.2, 4.5,6.8, 4.5, 23, 122, 68 );
        Rectangle( 5.92,4.5,5.92,4,6.16,4,6.16,4.5,  70, 40, 37 );
        // tree four
             triangle(7.88118, 5.25365,7.01037, 4.92135,8.79179, 4.91508, 23, 122, 68 );
                  triangle(7.8961, 5.03734,6.99046, 4.7458,8.73208, 4.72072, 23, 122, 68 );
                 triangle(7.86625, 4.8085,6.98051, 4.5483,8.66241, 4.54516,23, 122, 68 );
                    triangle(7.81151, 4.67056,6.96558, 4.40096,8.69227, 4.38842,23, 122, 68 );

                         Rectangle( 7.73,4.45,7.72,4,7.9,4,7.92,4.55,  70, 40, 37 );

}

// function for sea.................................................................................................
void sea (){
if(day){
Rectangle(-10,0.42,-10, -10,10, -10,10,0.42,3, 124, 203 );
}
else{
    Rectangle(-10,0.42,-10, -10,10, -10,10,0.42,16, 27, 119 );

}


}
// sea wave..........................................
float raidon_movewave=0.0f;

void wave(){
    glPushMatrix();
    glTranslatef(raidon_movewave,0,0);

    line(2, -1,7, -1,125,200,135);
    line(-9.59,0,-8, 0,125,200,135);
    line(1.39,0,6,0,125,200,135);
    line(-1, -1,1, -1,125,200,135);
    line(2, -2,4, -2,125,200,135);
    line(6, -4,9.1773, -4.04274,125,200,135);
    line(6, -6,9.20661, -6.00529,125,200,135);
    line(4.05979, -9.7732,9.51637, -9.7732,125,200,135);
    line(-4.16083, -9.59306,2.01059, -9.60807,125,200,135);
    line(-8, -9,-4, -9,125,200,135);
    line(-9.18852, -8.00183,-5.61434, -8.01684,125,200,135);
    line(-9.56977, -6.99606,-6.5198, -6.99606,125,200,135);
    line(-9.40297, -5.96026,-5.16161, -5.96026,125,200,135);
    line(-8, -5,-4, -5,125,200,135);

glPopMatrix();

}
//wave movement function
void raidon_update_wave(int value){


raidon_movewave -=0.02f;
if(raidon_movewave<-17.0f)
{
   raidon_movewave=+10.0f;
}
glutPostRedisplay();
glutTimerFunc(10,raidon_update_wave,0);
}

// ship start here.............................................................................................
float raidon_moveship=0.0f;
  void ship_one (){
    glPushMatrix();
    glTranslatef(raidon_moveship,0,0);

// big ship at the front ...........................................................................
  Rectangle(-6, -7,-2.98905, -9.01223,5.12634, -8.99466,6, -7, 149, 35, 25 );
  Rectangle(-2.37551, -5.97272,-4, -7,5.1,-7,4.81957, -5.97272, 120, 119, 119 );
  Rectangle(-2, -5,-2.37551, -5.97272,4.81957, -5.97272,4.34548, -4.98883,255, 255, 255 );
  Rectangle(0.80371, -3.98738,0.8,-5,2, -5,2, -4,73, 64, 63 );

   //ship shadow
      Rectangle(-2.37551, -5.97272,-4, -7,-2.69,-7,-1.59,-5.97,101, 96, 95  );

      Rectangle(-2, -5,-2.37551, -5.97272,-1.59,-5.97,-1.25,-5,191, 189, 189 );




      // ship window
          Circle(0.16, -2.99, -7.74,60, 57, 56 );
                    Circle(0.16, -0.99, -7.76,60, 57, 56 );
                    Circle(0.16, -0.99, -7.76,60, 57, 56 );
                    Circle(0.17, 0.99, -7.76,60, 57, 56 );
                    Circle(0.14, 3, -7.74,60, 57, 56 );
                    // square window
            Rectangle(-1.12066, -5.06496,-1.43824, -5.8816,-0.29754, -5.87343,-0.02533, -5.06496,191, 189, 189 );
        Rectangle(0.09782, -5.07313,-0.15495, -5.8816,0.83668, -5.88976,1.06352, -5.07313,191, 189, 189 );
                Rectangle(1.20628, -5.07864,0.99041, -5.88796,1.89728, -5.88441,2.099, -5.07864,191, 189, 189 );
        Rectangle(2.24063, -5.07594,2.06471, -5.8783,2.96597, -5.86819,3.15481, -5.07864,191, 189, 189 );
                Rectangle(3.27928, -5.08135,3.09902, -5.8763,4.00032, -5.86819,4.15054, -5.07324,191, 189, 189 );

                // second layer window

        Rectangle(-1.46465, -6.11501,-2.21083, -6.81773,-1.08771, -6.82257,-0.48769, -6.11016,191, 189, 189 );
        Rectangle(-0.27999, -6.11501,-0.85693, -6.83227,0.09695, -6.82257,0.54312, -6.11501,191, 189, 189 );
        Rectangle(0.78159, -6.11985,0.37389, -6.82257,1.4047, -6.81288,1.72009, -6.11501,191, 189, 189 );
        Rectangle(2.00472, -6.10532,1.68163, -6.7935,2.75859, -6.78865,3.02014, -6.10532,191, 189, 189 );
        Rectangle(3.28169, -6.10532,3, -6.8,4, -6.8,4.22788, -6.11501,191, 189, 189 );

glPopMatrix();
}
//****************************************FUNCTION FOR SHIP MOVEMENT ***************************************
void raidon_update_ship_one(int value){


raidon_moveship -=0.02f;
if(raidon_moveship<-17.0f)
{
   raidon_moveship=+10.0f;
}
glutPostRedisplay();
glutTimerFunc(10,raidon_update_ship_one,0);
}


//.................................................................................................................
float raidon_moveship_two=0.0f;
// ship two start .................................................
void ship_two(){
    glPushMatrix();
    glTranslatef(raidon_moveship_two,0,0);

// container carrier ship .............................................................
            // ship lower part
    Rectangle(-9.59205, -2.26025,-9.60624, -3.1007,-0.18282, -3.1007,-1.91424, -2.26025,43, 37, 36  ); // body
    Rectangle(-1.91424, -2.26025,-0.18282, -3.1007,1, -2,-1.48848, -1.99203,43, 37, 36  ); // front part
    Rectangle(-9.60624, -3.1007,-9.77655, -3.36893,0.10101, -3.36893,-0.18282, -3.1007,147, 31, 13 ); // lower

      // ship upper part
    Rectangle(-9.18049, -1.49134,-9.19,-2.26,-7.63,-2.26,-7.61938, -1.49134,124, 124, 124  ); // back one
    Rectangle(-8.59732, -0.51815,-8.6,-1.49,-7.62,-1.49,-7.62,-0.51,86, 86, 86  ); // back two
    Rectangle(-7.61838, 0.81429,-7.63,-2.26,-5.97,-2.26,-5.9989, 0.81429,64, 61, 61 ); //back three
    // window of ship
         Rectangle(-7, 0.5,-7.00468, 0.1186,-6.50063, 0.1186,-6.5, 0.5,206, 206, 206  ); // window one
         Rectangle(-7, -0.5,-7, -1,-6.5, -1,-6.5, -0.5,206, 206, 206 ); // window two
         Rectangle(-7, -1.5,-7, -2,-6.5, -2,-6.5, -1.5,206, 206, 206  ); // window three


                // ship container main box
    Rectangle(-5.79513, 0.30324,-5.82,-2.26,-3.5,-2.26,-3.49207, 0.31078,191, 189, 189 ); // box 1
    Rectangle(-3.30064, -0.19799,-3.31,-2.26,-2,-2.26,-2, -0.2,191, 189, 189 ); // box 2

           // container shedding

        Rectangle(-5.79513, 0.30324,-5.8,-0.03,-3.49,-0.03,-3.49207, 0.31078,172, 20, 20   ); // container one
        Rectangle(-5.8,-0.03,-5.8,-0.42,-3.5,-0.42,-3.49,-0.03,207, 107, 107 ); // container two
        Rectangle(-5.8,-0.42,-5.8,-0.71,-3.5,-0.72,-3.5,-0.42,172, 20, 20   ); // container three
        Rectangle(-5.8,-0.71,-5.81,-1.01,-3.5,-1,-3.5,-0.72,207, 107, 107    ); // container four
        Rectangle(-5.81,-1.01,-5.81,-1.3,-3.5,-1.3,-3.5,-1,172, 20, 20     ); // container five
        Rectangle(-5.81,-1.3,-5.81,-1.59,-3.5,-1.59,-3.5,-1.3,207, 107, 107  ); // container five
        Rectangle(-5.81,-1.59,-5.81,-1.87,-3.5,-1.88,-3.5,-1.59,172, 20, 20    ); // container six
        Rectangle(-5.81,-1.87,-5.82,-2.26,-3.5,-2.26,-3.5,-1.88,207, 107, 107  ); // container seven
        Rectangle(-5.81,-1.87,-5.82,-2.26,-3.5,-2.26,-3.5,-1.88,207, 107, 107   ); // container eight

   // second layer container shedding

        Rectangle(-3.30064, -0.19799,-3.3,-0.6,-2,-0.6,-2, -0.2,207, 107, 107 ); // container one
        Rectangle(-3.3,-0.6,-3.3,-0.99,-2,-1,-2,-0.6,172, 20, 20  ); // container two
        Rectangle(-3.3,-0.99,-3.31,-1.41,-2,-1.4,-2,-1,207, 107, 107 ); // container three
        Rectangle(-3.31,-1.41,-3.31,-1.79,-2,-1.8,-2,-1.4,172, 20, 20  ); // container four
        Rectangle(-3.31,-1.79,-3.31,-2.26,-2,-2.26,-2,-1.8,207, 107, 107); // container five



glPopMatrix();

}
// translation function for ship two ..........................................
bool ship_twoMoving= true;
void raidon_update_ship_two(int value){ //id001


if(ship_twoMoving){

    raidon_moveship_two +=0.02f;
if(raidon_moveship_two>+17.0f)
{
   raidon_moveship_two=-10.0f;
}
}
glutPostRedisplay();
glutTimerFunc(10,raidon_update_ship_two,0);

}
// small boat start...............................................
float raidon_movesmallboat=0.0f;

void smallboat(){

 glPushMatrix();
    glTranslatef(raidon_movesmallboat,0,0);

         Rectangle(4.1898, -1.98442,5, -2.5,9, -2.5,9.81528, -1.99963,80, 71, 71 );
         triangle(6.99047, -0.25802,6, -2,7,-1.99 ,165, 154, 154 );
         triangle(7, 0.5,7,-1.99,8.43, -2 ,199, 193, 193);


glPopMatrix();
}
//transition function for small_boat
void raidon_update_smallboat(int value){


raidon_movesmallboat-=0.02f;
if(raidon_movesmallboat<-17.0f)
{
   raidon_movesmallboat=+17.0f;
}
glutPostRedisplay();
glutTimerFunc(10,raidon_update_smallboat,0);
}
//third big ship start here ............................
float raidon_moveship_three=0.0f;

void ship_three(){

glPushMatrix();
    glTranslatef(raidon_moveship_three,0,0);
        Rectangle(-9.61276, -4.51197,-9.61276, -5.4999,-3.20954, -5.4999,-2, -4.5,18, 5, 1 );

        Rectangle(-9.61276, -4.00155,-9.61276, -4.51197,-7.23,-4.51,-9.25993, -4.00155,18, 5, 1 );

        Rectangle(-3.05273, -3.90275,-4,-4.5,-2,-4.5,-0.76586, -3.89452,18, 5, 1 );

        Rectangle(-9.6,-2.36,-9.61276, -4.00155,-9.25993, -4.00155,-9.22,-2.36,227, 176, 48 );

        Rectangle(-9.22,-2.36,-9.22,-2.61,-7, -2.6,-6.99556, -2.36322,227, 176, 48 );

        Rectangle(-9.22,-2.61,-9.25993, -4.00155,-7.23,-4.51,-7.63,-2.6,154, 42, 20 ); //m
        Circle(0.22,-8.48306, -3.26455,227, 176, 48);
        Rectangle(-9.61,-4.68,-9.61,-4.81,-2.35,-4.79,-2.17,-4.64,239, 239, 239 );

       //container
    Rectangle(-6.81042, -3.99882,-6.80807, -4.49864,-5.49451, -4.49864,-5.5, -4,163, 63, 33  );
    Rectangle(-5, -4,-4.99019, -4.49864,-4,-4.5,-4, -4,163, 63, 33   );
    Rectangle(-6, -3.6,-6,-4,-4.5, -4,-4.5, -3.6,11, 122, 33  );



glPopMatrix();
}

//transition function for ship three
void raidon_update_ship_three(int value){


raidon_moveship_three +=0.02f;
if(raidon_moveship_three>+17.0f)
{
   raidon_moveship_three=-10.0f;
}
glutPostRedisplay();
glutTimerFunc(20,raidon_update_ship_three,0);
}
// car start here ........................................................................

float raidon_movecar=0.0f;

void car(){
glPushMatrix();
    glTranslatef(raidon_movecar,0,0);
       // car one ..............................................
    Rectangle(-8.48965, 3.12202,-9, 2.6,-6.5, 2.6,-7.00628, 3.11708,185, 17, 4  );
    Rectangle(-9.81606, 2.5979,-9.80036, 1.99466,-5.80545, 1.9996,-5.8133, 2.60284,109, 28, 22  ); // car body
    Rectangle(-5.8133, 2.60284,-5.80545, 1.9996,-5.32669, 1.9996,-5.33454, 2.44461,109, 28, 22 ); // car body
    Circle(0.25,-9,2,0, 0, 0 );
    Circle(0.25,-6.4,2,0, 0, 0 );
    Rectangle(-8.40454, 3.0435,-8.79788, 2.64392,-7.80962, 2.63773,-7.79979, 3.03731,162, 158, 158 ); // car window
    Rectangle(-7.64596, 3.03941,-7.64245, 2.64646,-6.68933, 2.63984,-7.07478, 3.04383,162, 158, 158 ); // car window two
  glPopMatrix();

}
//car transition function
void raidon_updatecar(int value){


raidon_movecar +=0.1f;
if(raidon_movecar>+17.0f)
{
   raidon_movecar=-10.0f;
}
glutPostRedisplay();
glutTimerFunc(20,raidon_updatecar,0);
}

// bus start here .............................................................................................
float raidon_movebus=0.0f;

void bus(){

glPushMatrix();
    glTranslatef(raidon_movebus,0,0);
          // bus start here.......................................................................................
    Rectangle(4.17388, 3.60556,3.49737, 1.77106,9.23845, 1.76039,9.25899, 3.61661,49, 118, 86  ); // bus body
    Circle( 0.23,5, 1.77,44, 17, 4  ); // bus front tire 1
    Circle( 0.09,5,1.77,250, 250, 250  );// bus front tire in
    Circle( 0.23,8,1.76,44, 17, 4 );// bus front tire in
    Circle( 0.1,8,1.76,250, 250, 250  );// bus front tire in
   // bus window and door
       Rectangle(4.21023, 2.9992,4.20333, 2.00042,5.0098, 2.49112,5, 3,49, 195, 221  ); // door one
    Rectangle(5.5, 3,5.5, 2.6,6.29877, 2.59534,6.29877, 2.9992,49, 195, 221  ); // window 1
    Rectangle(6.5, 3,6.5, 2.6,7.29824, 2.59968,7.29824, 2.9992,49, 195, 221  );// window 2
    Rectangle(7.5, 3,7.5, 2.6,8.29771, 2.59534,8.30461, 2.9992,49, 195, 221  ); // window 3
    Rectangle(8.5, 3,8.5, 2,9.11108, 2.00042,9.11108, 3.00788,49, 195, 221  ); // door back


// bus shedding
    Rectangle(4.48869, 3.39561,4.48869, 3.24206,9.00303, 3.24642,9, 3.4,112, 197, 212   ); // bus body
        Rectangle(5.48855, 2.52571,5.48855, 2.44845,8.39003, 2.44594,8.39338, 2.52619,112, 197, 212   ); // bus body

glPopMatrix();
}
//bus transition function
void raidon_updatebus(int value){


raidon_movebus -=0.1f;
if(raidon_movebus<-17.0f)
{
   raidon_movebus=+10.0f;
}
glutPostRedisplay();
glutTimerFunc(10,raidon_updatebus,0);
}
// truck start here .......................................
float raidon_movetruck=0.0f;

void truck(){
    glPushMatrix();
    glTranslatef(raidon_movetruck,0,0);

    Rectangle(-3.4111, 3.30649,-3.42553, 1.99507,-0.24015, 1.99973,-0.2163, 3.30649,170, 28, 28  );
    Rectangle(-0.22,2.89,-0.24,2,1.39302, 1.99973,1.23805, 2.88592,218, 28, 28  );
    Rectangle(0,2.8,0,2.4,1, 2.4,1, 2.8,149, 195, 221  );

    //line
    Rectangle(-2.90006, 2.87426,-2.89366, 2.75437,-0.69143, 2.76138,-0.68587, 2.8805,234, 234, 234   );
    Rectangle(-2.90479, 2.52314,-2.90237, 2.43003,-0.69926, 2.42104,-0.697, 2.52314,234, 234, 234  );
// tire
     Circle( 0.28,-2.22,2,59, 57, 56  );
     Circle( 0.13,-2.22,2,214, 210, 208 );
     Circle(0.24,0.4,2,59, 57, 56  );
     Circle(0.12,0.4,2,214, 210, 208 );
glPopMatrix();
}
// truck transition
void raidon_updatetruck(int value){


raidon_movetruck +=0.1f;
if(raidon_movetruck>+17.0f)
{
   raidon_movetruck=-10.0f;
}
glutPostRedisplay();
glutTimerFunc(20,raidon_updatetruck,0);
}


//Screen  Three from here


void al_circle(float radius, float xc, float yc)
{
    glBegin(GL_POLYGON);
	for(int i=0;i<200;i++)
        {
            float pi=3.1416;
            float A=(i*2*pi)/200;
            float r=radius;
            float x = r * cos(A);
            float y = r * sin(A);
            glVertex2f(x+xc,y+yc);
        }

	glEnd();
}
void initGL()
{

glClearColor(1.0f, 1.0f, 1.0f, 1.0f); // Black and opaque

}

void al_division()
{
    //DIVISION PART
glBegin(GL_LINES);
glColor3f(0.0f, 0.0f, 0.0f);
glVertex2f(-10, 4);
glVertex2f(10, 4);

glBegin(GL_LINES);
glColor3f(0.0f, 0.0f, 0.0f);
glVertex2f(-10.00016,3.94414);
glVertex2f(10.00071,3.94419);

glEnd();

}
void al_sky()
{
    if (day)
    {
    glBegin(GL_POLYGON);
    glColor3ub(5,47,115 );
    glVertex2f(-10, 10);
    glColor3ub(255,255,255 );
    glVertex2f(-10, 4);
    glVertex2f(10, 4);
    glColor3ub(5,47,115 );
    glVertex2f(10, 10);
    glEnd();
    }
    else
    {
    glBegin(GL_POLYGON);
    glColor3ub(165, 164, 184 );
    glVertex2f(-10, 10);
    glColor3ub(0,0,0 );
    glVertex2f(-10, 4);
    glVertex2f(10, 4);
    glColor3ub(5,47,115 );
    glVertex2f(10, 10);
    glEnd();
        }


}
void al_sun()
{
    if(day){
        glColor3ub(243, 77, 15  );
    al_circle (1.31,8.5, 4);

    }
    else{
 glColor3ub( 238, 243, 176  );
    al_circle (1,8.41664, 6.81077);
 glColor3ub(255,255,255  );

    }
}


float al_movecloud = 0.0f;
void al_cloud()
{
    //1st cloud
    glPushMatrix();
    glTranslatef(al_movecloud,0,0);
    glColor3ub(212, 234, 235  );
    al_circle ( 0.63,-7.65457,8.35075);
    al_circle ( 0.64,-7.06,8.88);
    al_circle ( 0.41,-6.73966, 8.15951);
    al_circle ( 0.49,-6.24806, 8.79349);
    al_circle ( 0.35,-6.12305, 8.28291);
    al_circle ( 0.35,-6.12305, 8.28291);

    //2nd cloud
    al_circle ( 0.84,-1.92408, 7.54313);
    al_circle ( 0.74,-1.25967, 8.31844);
    al_circle ( 0.53,6.49654,8.57719);
    al_circle ( 0.42,-0.36416, 8.02491);
    al_circle ( 0.35,-6.12305, 8.28291);
    al_circle ( 0.35,-6.12305, 8.28291);

    //3rd cloud
    al_circle ( 0.84,5.33384,8.6724);
    al_circle ( 0.74,6.00698,9.31509);
    al_circle ( 0.53,-0.65064, 7.25239);
    al_circle ( 0.42,-0.36416, 8.02491);
    al_circle ( 0.35,-6.12305, 8.28291);
    al_circle ( 0.35,-6.12305, 8.28291);
    glEnd();
    glPopMatrix();
}
void al_updatecloud(int value)
{
    al_movecloud -=0.02f;
    if (al_movecloud <- 10.0f)
    {
        al_movecloud =+10.0f;
    }
    glutPostRedisplay();
    glutTimerFunc(20,al_updatecloud,0);
}
void al_border()
{
   glBegin(GL_POLYGON);
    glColor3ub(8, 8, 8  );
    glVertex2f(-10, 4);
    glVertex2f(-10.00016, 3.94414);
    glVertex2f(10.00071, 3.94419);
    glVertex2f(10, 4);
    glEnd();
}
void al_sea()
{
    if (day)
    {
    glBegin(GL_POLYGON);
    glColor3ub(11, 136, 213 );
    glVertex2f(-9.99891, 3.93194);
    glVertex2f(-10, -4);
    glVertex2f(10, -4);
    glVertex2f(10.00071, 3.94419);
    glEnd();
    }
    else
    {
    glBegin(GL_POLYGON);
    glColor3ub(17, 89, 243  );
    glVertex2f(-9.99891, 3.93194);
    glVertex2f(-10, -4);
    glVertex2f(10, -4);
    glVertex2f(10.00071, 3.94419);
    glEnd();
    }
}
float al_moveflow = 0.0f;
void al_sea_flow()
{
    //1st line
    glPushMatrix();
    glTranslatef(al_moveflow,0,0);
    glBegin(GL_LINES);
    glColor3ub(249, 248, 245 );
    glVertex2f(-7, 3);
    glVertex2f(-5, 3);

    //2nd line
    glBegin(GL_LINES);
    glColor3ub(249, 248, 245  );
    glVertex2f(-2, 3);
    glVertex2f(0, 3);

    //3rd line
    glBegin(GL_LINES);
    glColor3ub(249, 248, 245  );
    glVertex2f(4, 3);
    glVertex2f(6, 3);

    //4thline
    glBegin(GL_LINES);
    glColor3ub(249, 248, 245  );
    glVertex2f(-10, 1);
    glVertex2f(-8, 1);

    //5th line
    glBegin(GL_LINES);
    glColor3ub(249, 248, 245  );
    glVertex2f(-5, 1);
    glVertex2f(-3, 1);

    //6th line
    glBegin(GL_LINES);
    glColor3ub(249, 248, 245  );
    glVertex2f(1, 1);
    glVertex2f(3, 1);

    //7th line
    glBegin(GL_LINES);
    glColor3ub(249, 248, 245  );
    glVertex2f(-1, -1);
    glVertex2f(1, -1);

    //8th line
    glBegin(GL_LINES);
    glColor3ub(249, 248, 245  );
    glVertex2f(6, -1);
    glVertex2f(8, -1);

    //9th line
    glBegin(GL_LINES);
    glColor3ub(249, 248, 245  );
    glVertex2f(-6, -2);
    glVertex2f(-4, -2);

    //10th line
    glBegin(GL_LINES);
    glColor3ub(249, 248, 245  );
    glVertex2f(2, -2);
    glVertex2f(4, -2);
    glEnd();

    //11th line
    glBegin(GL_LINES);
    glColor3ub(249, 248, 245  );
    glVertex2f(7, 1);
    glVertex2f(8, 1);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(249, 248, 245  );
    glVertex2f(9.17295, 0.20581);
    glVertex2f(10.44211, 0.20581);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(249, 248, 245  );
    glVertex2f(-12.43725, 1.62744);
    glVertex2f(-9.03234, 1.62744);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(249, 248, 245  );
    glVertex2f(10, 2);
    glVertex2f(13, 2);
    glEnd();
    glPopMatrix();

}
void al_update_flow(int value)
{
    al_moveflow +=0.02f;
    if (al_moveflow > 10.0f)
    {
        al_moveflow =-10.0f;
    }
    glutPostRedisplay();
    glutTimerFunc(20,al_update_flow,0);
}
void al_ground()
{
    if (day)
    {
    glBegin(GL_POLYGON);
    glColor3ub(159, 243, 107  );
    glVertex2f(-9.98529, -2.4708);
    glVertex2f(-10, -4);
    glVertex2f(10, -4);
    glVertex2f(9.97864, -2.4352);
    glEnd();
    }

    else
        {
    glBegin(GL_POLYGON);
    glColor3ub(66, 229, 103   );
    glVertex2f(-9.98529, -2.4708);
    glVertex2f(-10, -4);
    glVertex2f(10, -4);
    glVertex2f(9.97864, -2.4352);
    glEnd();
        }

}
void al_road_border()
{

    glBegin(GL_POLYGON);
    glColor3ub(151, 101, 212 );
    glVertex2f(-10, -4);
    glVertex2f(-10, -4.5);
    glVertex2f(10, -4.5);
    glVertex2f(10, -4);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(227, 238, 226 );
    glVertex2f(-10, -4);
    glVertex2f(-10, -4.5);
    glVertex2f(-4.99, -4.5);
    glVertex2f(-5,-4);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(227, 238, 226 );
    glVertex2f(0,-4);
    glVertex2f(0,-4.49);
    glVertex2f(5.01, -4.5);
    glVertex2f(5,-4);
    glEnd();
}
float al_moveCar1=0.0f;
void al_cars_1()
{
    //car 1
    glPushMatrix();
    glTranslatef(al_moveCar1,0,0);
    glBegin(GL_POLYGON);
    glColor3ub(199, 0, 57  );
    glVertex2f(-8, -5);
    glVertex2f(-8, -6);
    glVertex2f(-6, -6);
    glVertex2f(-6, -5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(199, 0, 57  );
    glVertex2f(-7.59416, -4.30791);
    glVertex2f(-7.8, -5);
    glVertex2f(-6.2, -5);
    glVertex2f(-6.4095, -4.30259);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(152, 151, 138  );
    glVertex2f(-7, -4.4);
    glVertex2f(-6.89079, -4.82321);
    glVertex2f(-6.45752, -4.82321);
    glVertex2f(-6.6, -4.4);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(152, 151, 138  );
    glVertex2f(-7.51009, -4.42554);
    glVertex2f(-7.61194, -4.81776);
    glVertex2f(-7.06703, -4.81776);
    glVertex2f(-7.14342, -4.42554);
    glEnd();

    //wheels car 1
    glColor3ub(243, 242, 232  );
    al_circle (0.32,-7.44894,-6.0106);
    glEnd();

    glColor3ub(0, 0, 0  );
    al_circle (0.23,-7.44894,-6.00525);
    glEnd();

    //wheels car 1
    glColor3ub(243, 242, 232  );
    al_circle (0.32,-6.5507,-6.00525);
    glEnd();

    glColor3ub(0, 0, 0  );
    al_circle (0.23,-6.54612,-6.00525);
    glEnd();
    glPopMatrix();

}
void al_updateCar1(int value)
{
    al_moveCar1+=0.02f;
    if(al_moveCar1>+18.0f){
        al_moveCar1=-10.0f;
    }
    glutPostRedisplay();
    glutTimerFunc(20,al_updateCar1,0);

}
float al_moveCar2=0.0f;
void al_cars_2()
{
    //cars 2
    glPushMatrix();
    glTranslatef(al_moveCar2,0,0);
    glBegin(GL_POLYGON);
    glColor3ub(231, 225, 101  );
    glVertex2f(-4, -5);
    glVertex2f(-4, -6);
    glVertex2f(-2, -6);
    glVertex2f(-2, -5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(231, 225, 101  );
    glVertex2f(-3.4893, -4.33524);
    glVertex2f(-3.69495, -4.99919);
    glVertex2f(-2.26, -5);
    glVertex2f(-2.51587, -4.33524);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(44, 205, 218  );
    glVertex2f(-2.88947, -4.39965);
    glVertex2f(-2.73209, -4.92483);
    glVertex2f(-2.36488, -4.92161);
    glVertex2f(-2.57195, -4.39643);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(44, 205, 218  );
    glVertex2f(-3.43287, -4.40785);
    glVertex2f(-3.53973, -4.92251);
    glVertex2f(-2.82107, -4.9195);
    glVertex2f(-2.98422, -4.40785);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(41, 17, 240   );
    glVertex2f(-3.6, -5.2);
    glVertex2f(-3.6, -5.4);
    glVertex2f(-2.4, -5.4);
    glVertex2f(-2.4, -5.2);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(170, 161, 241   );
    glVertex2f(-3.95781, -5.20242);
    glVertex2f(-3.95781, -5.39951);
    glVertex2f(-3.6, -5.4);
    glVertex2f(-3.65993, -5.20242);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(170, 161, 241   );
    glVertex2f(-2.34958, -5.20241);
    glVertex2f(-2.35153, -5.40027);
    glVertex2f(-2.03191, -5.40027);
    glVertex2f(-2.03191, -5.20468);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(255, 58, 0  );
    glVertex2f(-2.9, -4.2);
    glVertex2f(-2.90199, -4.31994);
    glVertex2f(-2.59811, -4.31994);
    glVertex2f(-2.6, -4.2);
    glEnd();

    //wheels car 2
    glColor3ub(0,0,0  );
    al_circle (0.32,-3.4348,-5.9939);
    glEnd();

    glColor3ub(243, 242, 232  );
    al_circle (0.23,-3.4348,-5.98855);
    glEnd();

    //wheels car 2
    glColor3ub(0,0,0);
    al_circle (0.32,-2.56278, -6.00537);
    glEnd();

    glColor3ub(243, 242, 232  );
    al_circle (0.23,-2.56775,-6.00525);
    glEnd();
    glPopMatrix();

}
void al_updateCar2(int value)
{
    al_moveCar2+=0.02f;
    if(al_moveCar2>+18.0f){
        al_moveCar2=-10.0f;
    }
    glutPostRedisplay();
    glutTimerFunc(20,al_updateCar2,0);

}
float al_movetruck=0.0f;
void al_truck()
{
    glPushMatrix();
    glTranslatef(al_movetruck,0,0);
    glBegin(GL_POLYGON);
    glColor3ub(177, 200, 63  );
    glVertex2f(2.5, -8.5);
    glVertex2f(2.5, -9.5);
    glVertex2f(5.5, -9.5);
    glVertex2f(5.5, -8.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(177, 200, 63  );
    glVertex2f(3.06859, -7.3921);
    glVertex2f(2.5, -8.5);
    glVertex2f(4, -8.5);
    glVertex2f(4, -7.4);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(246, 247, 243  );
    glVertex2f(3.13407, -7.53968);
    glVertex2f(2.72243, -8.36134);
    glVertex2f(3.85986, -8.36766);
    glVertex2f(3.86528, -7.546);
    glEnd();

    //driver part
    glColor3ub(0,0,0 );
    al_circle (0.17,3.41553,-7.86268);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(246, 186, 0 );
    glVertex2f(3.35625, -8.11483);
    glVertex2f(3.30079, -8.35583);
    glVertex2f(3.53, -8.37);
    glVertex2f(3.4748, -8.1193);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(0,0,0 );
    glVertex2f(3.04647, -8.19516);
    glVertex2f(3.28358, -8.1193);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(0,0,0 );
    glVertex2f(3.15738, -8.24872);
    glVertex2f(3.3, -8.2);
    glEnd();

    glColor3ub(0,0,0 );
    al_circle (0.08,3.01779,-8.25764);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(240, 101, 101 );
    glVertex2f(4.69767, -6.47983);
    glVertex2f(4.69176, -8.47876);
    glVertex2f(5, -8.5);
    glVertex2f(5, -6.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(0,0,0 );
    glVertex2f(5, -6.5);
    glVertex2f(5, -6.71);
    glVertex2f(5.44, -8.5);
    glVertex2f(5.5, -8.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(247, 212, 135  );
    glVertex2f(4.2, -8.2);
    glVertex2f(4.20141, -8.49494);
    glVertex2f(4.49889, -8.49494);
    glVertex2f(4.5, -8.2);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(234, 168, 28   );
    glVertex2f(4.1503, -8.23724);
    glVertex2f(4.15213, -8.49281);
    glVertex2f(4.20141, -8.49494);
    glVertex2f(4.2, -8.2);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(242, 67, 16   );
    glVertex2f(4.23511, -7.99727);
    glVertex2f(4.23618, -8.20049);
    glVertex2f(4.463, -8.19798);
    glVertex2f(4.46408, -7.99727);
    glEnd();

    //1st wheel
    glColor3ub(0,0,0 );
    al_circle (0.32,3.06599,-9.43573);
    glEnd();

    glColor3ub(250, 250, 250  );
    al_circle (0.23,3.06667,-9.43754);
    glEnd();

    //2nd wheel
    glColor3ub(0,0,0  );
    al_circle (0.32,4.94028,-9.43112);
    glEnd();

    glColor3ub(250, 250, 250  );
    al_circle (0.23,4.94491,-9.43293);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3ub(0,0,0 );
    glVertex2f(4.87095, -9.16013);
    glVertex2f(4.94491, -9.43293);
    glVertex2f(4.98752, -9.15917);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3ub(0,0,0 );
    glVertex2f(5.25341, -9.44407);
    glVertex2f(4.93981, -9.43084);
    glVertex2f(5.2336, -9.56352);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3ub(0,0,0 );
    glVertex2f(4.93981, -9.43084);
    glVertex2f(4.71046, -9.53517);
    glVertex2f(4.77463, -9.64257);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3ub(0,0,0 );
    glVertex2f(2.98068, -9.18199);
    glVertex2f(3.06667, -9.43293);
    glVertex2f(3.12996, -9.18538);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3ub(0,0,0 );
    glVertex2f(3.32915, -9.3661);
    glVertex2f(3.06871,-9.43284);
    glVertex2f(3.32739, -9.51498);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3ub(0,0,0 );
    glVertex2f(3.06294,-9.43587);
    glVertex2f(2.81479, -9.49208);
    glVertex2f(2.91301, -9.63893);
    glEnd();
    glPopMatrix();

}
void al_update_truck(int value)
{
    al_movetruck-=0.02f;
    if(al_movetruck<-18.0f)
        {
        al_movetruck=+10.0f;
        }
    glutPostRedisplay();
    glutTimerFunc(10,al_update_truck,0);

}
void al_grill_roadside()
{
    glBegin(GL_LINES);
    glColor3ub(25, 24, 23  );
    glVertex2f(-9.99247, -1.75036);
    glVertex2f(9.95693, -1.72442);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(25, 24, 23  );
    glVertex2f(-8.02, -1.75);
    glVertex2f(-8.02, -2.47);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(25, 24, 23  );
    glVertex2f(-5.38, -1.74);
    glVertex2f(-5.38, -2.46);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(25, 24, 23  );
    glVertex2f(-2.97518, -1.7921);
    glVertex2f(-2.96, -2.46);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(25, 24, 23  );
    glVertex2f(-0.4, -1.74);
    glVertex2f(-0.4, -2.45);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(25, 24, 23  );
    glVertex2f(1.89, -1.74);
    glVertex2f(1.90654, -2.3892);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(25, 24, 23  );
    glVertex2f(4.94898, -1.80824);
    glVertex2f(4.94898, -2.35692);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(25, 24, 23  );
    glVertex2f(7.61802, -1.7921);
    glVertex2f(7.61802, -2.3892);
    glEnd();

}
void al_road()
{
    glBegin(GL_POLYGON);
    glColor3ub(83, 81, 71);
    glVertex2f(-10, -4.5);
    glVertex2f(-10, -10);
    glVertex2f(10, -10);
    glVertex2f(10, -4.5);
    glEnd();
}
void al_road_between_under_line()
{
    glBegin(GL_POLYGON);
    glColor3ub(238, 234, 216  );
    glVertex2f(-10, -7);
    glVertex2f(-10, -7.3);
    glVertex2f(-8.4, -7.3);
    glVertex2f(-8.4, -7);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(238, 234, 216  );
    glVertex2f(-8, -7);
    glVertex2f(-8, -7.3);
    glVertex2f(-6.4, -7.3);
    glVertex2f(-6.4, -7);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(238, 234, 216  );
    glVertex2f(-6, -7);
    glVertex2f(-6, -7.3);
    glVertex2f(-4.4, -7.3);
    glVertex2f(-4.4, -7);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(238, 234, 216  );
    glVertex2f(-4, -7);
    glVertex2f(-4, -7.3);
    glVertex2f(-2.4, -7.3);
    glVertex2f(-2.4, -7);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(238, 234, 216  );
    glVertex2f(-2, -7);
    glVertex2f(-2, -7.3);
    glVertex2f(-0.4, -7.3);
    glVertex2f(-0.4, -7);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(238, 234, 216  );
    glVertex2f(0, -7);
    glVertex2f(0, -7.3);
    glVertex2f(1.6, -7.3);
    glVertex2f(1.6, -7);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(238, 234, 216  );
    glVertex2f(2, -7);
    glVertex2f(2, -7.3);
    glVertex2f(3.6, -7.3);
    glVertex2f(3.6, -7);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(238, 234, 216  );
    glVertex2f(4, -7);
    glVertex2f(4, -7.3);
    glVertex2f(5.6, -7.3);
    glVertex2f(5.6, -7);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(238, 234, 216  );
    glVertex2f(6, -7);
    glVertex2f(6, -7.3);
    glVertex2f(7.6, -7.3);
    glVertex2f(7.6, -7);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(238, 234, 216  );
    glVertex2f(8, -7);
    glVertex2f(8, -7.3);
    glVertex2f(9.6, -7.3);
    glVertex2f(9.6, -7);
    glEnd();

}
void al_building()
{
    if (day)
    {
    //building 1
    glBegin(GL_POLYGON);
    glColor3ub(228, 139, 106  );
    glVertex2f(-9, 8);
    glVertex2f(-9, 4);
    glVertex2f(-7,4);
    glVertex2f(-7, 8);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(215, 111, 72  );
    glVertex2f(-7, 8);
    glVertex2f(-7,4);
    glVertex2f(-6.5, 4);
    glVertex2f(-6.5, 7.5);
    glEnd();

    //building 1 windows
    glBegin(GL_POLYGON);
    glColor3ub(227, 222, 61  );
    glVertex2f(-8.5, 7.5);
    glVertex2f(-8.5, 7);
    glVertex2f(-7.5, 7);
    glVertex2f(-7.5, 7.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(227, 222, 61  );
    glVertex2f(-8.5, 6.5);
    glVertex2f(-8.5, 6);
    glVertex2f(-7.5, 6);
    glVertex2f(-7.5, 6.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(227, 222, 61  );
    glVertex2f(-8.5, 5.5);
    glVertex2f(-8.5, 5);
    glVertex2f(-7.5, 5);
    glVertex2f(-7.5, 5.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(227, 222, 61  );
    glVertex2f(-8.28256, 4.50699);
    glVertex2f(-8.29, 4);
    glVertex2f(-7.73, 4);
    glVertex2f(-7.73213, 4.49842);
    glEnd();


    //building 2
    glBegin(GL_POLYGON);
    glColor3ub(171, 136, 59  );
    glVertex2f(-5, 9);
    glVertex2f(-5, 4);
    glVertex2f(-2, 4);
    glVertex2f(-2, 9);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(209, 154, 34  );
    glVertex2f(-2, 9);
    glVertex2f(-2, 4);
    glVertex2f(-1.5, 4);
    glVertex2f(-1.5, 8.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(243, 244, 249   );
    glVertex2f(-1.83684, 6.80274);
    glVertex2f(-1.83913, 6.32832);
    glVertex2f(-1.59992, 6.26541);
    glVertex2f(-1.60163, 6.74253);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(238, 116, 9  );
    glVertex2f(-4.70522, 6.98713);
    glVertex2f(-4.70522, 6.00554);
    glVertex2f(-3.77186, 6.00554);
    glVertex2f(-3.77186, 6.98713);
    glEnd();


    //building 2 windwos
    glBegin(GL_LINES);
    glColor3ub(21, 22, 24  );
    glVertex2f(-5,7.5);
    glVertex2f(-2, 7.5);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(21, 22, 24  );
    glVertex2f(-5,5.5);
    glVertex2f(-2, 5.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(243, 244, 249   );
    glVertex2f(-1.83684, 6.80274);
    glVertex2f(-1.83913, 6.32832);
    glVertex2f(-1.50299, 6.29935);
    glVertex2f(-1.49965, 6.74065);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-1.83913, 6.32832);
    glVertex2f(1,6.34);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(49, 52, 48  );
    glVertex2f(-1.83913, 6.32832);
    glVertex2f(-1.5, 5.79);
    glVertex2f(-1.0138, 6.13179);
    glVertex2f(-1.01, 6.33);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(49, 52, 48  );
    glVertex2f(-1.01, 6.33);
    glVertex2f(-1.0138, 6.13179);
    glVertex2f(-0.50068, 5.78425);
    glVertex2f(-0.5, 6.34);
    glEnd();
    //
    glBegin(GL_POLYGON);
    glColor3ub(158, 229, 236  );
    glVertex2f(-1.39974, 6.25898);
    glVertex2f(-1.4, 6);
    glVertex2f(-1.10013, 6.17515);
    glVertex2f(-1.10013, 6.26463);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(158, 229, 236 );
    glVertex2f(-0.93223, 6.26716);
    glVertex2f(-0.93223, 6.17521);
    glVertex2f(-0.60464, 5.97369);
    glVertex2f(-0.60356, 6.26782);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-1.84, 6.53);
    glVertex2f(-0.5,6.53);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-1.6,6.53);
    glVertex2f(-1.6,6.33);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-1.4,6.53);
    glVertex2f(-1.4,6.33);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-1.2,6.53);
    glVertex2f(-1.20186, 6.34376);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-0.96,6.53);
    glVertex2f(-0.96, 6.33);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-0.8,6.53);
    glVertex2f(-0.8, 6.34);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-0.61,6.53);
    glVertex2f(-0.60972, 6.34645);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-0.5,6.53);
    glVertex2f(-0.5, 6.34);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(202, 154, 34 );
    glVertex2f(-4.2,6.99);
    glVertex2f(-4.2, 6);
    glVertex2f(-3.77186, 6.00554);
    glVertex2f(-3.77186, 6.98713);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(50, 48, 41   );
    glVertex2f(-5,7.2);
    glVertex2f(-2, 7.2);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(83, 74, 77  );
    glVertex2f(-5,7.5);
    glVertex2f(-5, 7.2);
    glVertex2f(-4.5,7.2);
    glVertex2f(-4.5,7.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(83, 74, 77  );
    glVertex2f(-4,7.5);
    glVertex2f(-4,7.2);
    glVertex2f(-3.5,7.2);
    glVertex2f(-3.5,7.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(83, 74, 77  );
    glVertex2f(-3,7.5);
    glVertex2f(-2.99943, 7.20101);
    glVertex2f(-2.5,7.2);
    glVertex2f(-2.5,7.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 150, 64 );
    glVertex2f(-3, 7);
    glVertex2f(-3, 6);
    glVertex2f(-2.18831, 5.99229);
    glVertex2f(-2.19379, 7.00275);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(88, 80, 71  );
    glVertex2f(-4.24, 6.99);
    glVertex2f(-4.24, 6.01);
    glVertex2f(-4.2, 6);
    glVertex2f(-4.2, 6.99);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(88, 80, 71 );
    glVertex2f(-5, 5.5);
    glVertex2f(-2, 5.5);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(88, 80, 71 );
    glVertex2f(-5, 5.2);
    glVertex2f(-2, 5.2);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(88, 80, 71  );
    glVertex2f(-5, 5.5);
    glVertex2f(-5, 5.2);
    glVertex2f(-4.49893, 5.19159);
    glVertex2f(-4.5, 5.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(88, 80, 71  );
    glVertex2f(-4, 5.5);
    glVertex2f(-4.00268, 5.20188);
    glVertex2f(-3.49545, 5.20188);
    glVertex2f(-3.5, 5.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(88, 80, 71  );
    glVertex2f(-3, 5.5);
    glVertex2f(-3.00358, 5.20188);
    glVertex2f(-2.49635, 5.18992);
    glVertex2f(-2.5, 5.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(88, 80, 71  );
    glVertex2f(-2.5, 7);
    glVertex2f(-2.49928, 5.99569);
    glVertex2f(-2.45001, 5.9937);
    glVertex2f(-2.45, 7);
    glEnd();








    //BUILDING 3
    glBegin(GL_POLYGON);
    glColor3ub(171, 136, 59  );
    glVertex2f(-0.5, 8.5);
    glVertex2f(-0.5, 4);
    glVertex2f(1, 4);
    glVertex2f(1, 8.5);
    glEnd();

    //BUILDING 3 WINDWOS
    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(-0.2, 8.2);
    glVertex2f(-0.2, 7.8);
    glVertex2f(0.2, 7.8);
    glVertex2f(0.2, 8.2);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(0.4, 8.2);
    glVertex2f(0.4, 7.8);
    glVertex2f(0.8, 7.8);
    glVertex2f(0.8, 8.2);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(-0.2, 7.4);
    glVertex2f(-0.2, 7);
    glVertex2f(0.2, 7);
    glVertex2f(0.2, 7.4);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(0.4, 7.4);
    glVertex2f(0.4, 7);
    glVertex2f(0.8, 7);
    glVertex2f(0.8, 7.4);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(-0.2, 6.6);
    glVertex2f(-0.2, 6.2);
    glVertex2f(0.2, 6.2);
    glVertex2f(0.2, 6.6);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(0.4, 6.6);
    glVertex2f(0.4, 6.2);
    glVertex2f(0.8, 6.2);
    glVertex2f(0.8, 6.6);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(-0.2, 5.8);
    glVertex2f(-0.2, 5.4);
    glVertex2f(0.2, 5.4);
    glVertex2f(0.2, 5.8);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(0.4, 5.8);
    glVertex2f(0.4, 5.4);
    glVertex2f(0.8, 5.4);
    glVertex2f(0.8, 5.8);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(-0.2, 5);
    glVertex2f(-0.2, 4.6);
    glVertex2f(0.2, 4.6);
    glVertex2f(0.2, 5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(0.4, 5);
    glVertex2f(0.4, 4.6);
    glVertex2f(0.8, 4.6);
    glVertex2f(0.8, 5);
    glEnd();
    }
    else
    {
    //building 1
    glBegin(GL_POLYGON);
    glColor3ub( 215, 111, 72 );
    glVertex2f(-9, 8);
    glVertex2f(-9, 4);
    glVertex2f(-7,4);
    glVertex2f(-7, 8);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(228, 139, 106 );
    glVertex2f(-7, 8);
    glVertex2f(-7,4);
    glVertex2f(-6.5, 4);
    glVertex2f(-6.5, 7.5);
    glEnd();

    //building 1 windows
    glBegin(GL_POLYGON);
    glColor3ub(227, 222, 61  );
    glVertex2f(-8.5, 7.5);
    glVertex2f(-8.5, 7);
    glVertex2f(-7.5, 7);
    glVertex2f(-7.5, 7.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(227, 222, 61  );
    glVertex2f(-8.5, 6.5);
    glVertex2f(-8.5, 6);
    glVertex2f(-7.5, 6);
    glVertex2f(-7.5, 6.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(227, 222, 61  );
    glVertex2f(-8.5, 5.5);
    glVertex2f(-8.5, 5);
    glVertex2f(-7.5, 5);
    glVertex2f(-7.5, 5.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(227, 222, 61  );
    glVertex2f(-8.28256, 4.50699);
    glVertex2f(-8.29, 4);
    glVertex2f(-7.73, 4);
    glVertex2f(-7.73213, 4.49842);
    glEnd();


    //building 2
    glBegin(GL_POLYGON);
    glColor3ub( 209, 154, 34 );
    glVertex2f(-5, 9);
    glVertex2f(-5, 4);
    glVertex2f(-2, 4);
    glVertex2f(-2, 9);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(171, 136, 59  );
    glVertex2f(-2, 9);
    glVertex2f(-2, 4);
    glVertex2f(-1.5, 4);
    glVertex2f(-1.5, 8.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(243, 244, 249  );
    glVertex2f(-1.83684, 6.80274);
    glVertex2f(-1.83913, 6.32832);
    glVertex2f(-1.59992, 6.26541);
    glVertex2f(-1.60163, 6.74253);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(0,0,0 );
    glVertex2f(-4.70522, 6.98713);
    glVertex2f(-4.70522, 6.00554);
    glVertex2f(-3.77186, 6.00554);
    glVertex2f(-3.77186, 6.98713);
    glEnd();


    //building 2 windwos
    glBegin(GL_LINES);
    glColor3ub( 21, 22, 24 );
    glVertex2f(-5,7.5);
    glVertex2f(-2, 7.5);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(21, 22, 24  );
    glVertex2f(-5,5.5);
    glVertex2f(-2, 5.5);
    glEnd();
//bridge door
    glBegin(GL_POLYGON);
    glColor3ub(243, 244, 249  );
    glVertex2f(-1.83684, 6.80274);
    glVertex2f(-1.83913, 6.32832);
    glVertex2f(-1.50299, 6.29935);
    glVertex2f(-1.49965, 6.74065);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-1.83913, 6.32832);
    glVertex2f(1,6.34);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(49, 52, 48 );
    glVertex2f(-1.83913, 6.32832);
    glVertex2f(-1.5, 5.79);
    glVertex2f(-1.0138, 6.13179);
    glVertex2f(-1.01, 6.33);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(49, 52, 48  );
    glVertex2f(-1.01, 6.33);
    glVertex2f(-1.0138, 6.13179);
    glVertex2f(-0.50068, 5.78425);
    glVertex2f(-0.5, 6.34);
    glEnd();

//building border night vision
    glBegin(GL_POLYGON);
    glColor3ub(60, 58, 56  );
    glVertex2f(-4.00296, 5.49993);
    glVertex2f(-4, 5.2);
    glVertex2f(-3.52393, 5.1898);
    glVertex2f(-3.52393, 5.50376);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(60, 58, 56  );
    glVertex2f(-2.99897, 5.50376);
    glVertex2f(-3, 5.2);
    glVertex2f(-2.49369, 5.20129);
    glVertex2f(-2.49369, 5.49993);
    glEnd();


    //bridge
    glBegin(GL_POLYGON);
    glColor3ub(158, 229, 236  );
    glVertex2f(-1.39974, 6.25898);
    glVertex2f(-1.4, 6);
    glVertex2f(-1.10013, 6.17515);
    glVertex2f(-1.10013, 6.26463);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(158, 229, 236 );
    glVertex2f(-0.93223, 6.26716);
    glVertex2f(-0.93223, 6.17521);
    glVertex2f(-0.60464, 5.97369);
    glVertex2f(-0.60356, 6.26782);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-1.84, 6.53);
    glVertex2f(-0.5,6.53);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-1.6,6.53);
    glVertex2f(-1.6,6.33);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-1.4,6.53);
    glVertex2f(-1.4,6.33);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-1.2,6.53);
    glVertex2f(-1.20186, 6.34376);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-0.96,6.53);
    glVertex2f(-0.96, 6.33);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-0.8,6.53);
    glVertex2f(-0.8, 6.34);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-0.61,6.53);
    glVertex2f(-0.60972, 6.34645);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(49, 52, 48  );
    glVertex2f(-0.5,6.53);
    glVertex2f(-0.5, 6.34);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(255, 151, 0 );
    glVertex2f(-4.2,6.99);
    glVertex2f(-4.2, 6);
    glVertex2f(-3.77186, 6.00554);
    glVertex2f(-3.77186, 6.98713);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(50, 48, 41   );
    glVertex2f(-5,7.2);
    glVertex2f(-2, 7.2);
    glEnd();
//building border
    glBegin(GL_POLYGON);
    glColor3ub(83, 74, 77  );
    glVertex2f(-5,7.5);
    glVertex2f(-5, 7.2);
    glVertex2f(-4.5,7.2);
    glVertex2f(-4.5,7.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(83, 74, 77  );
    glVertex2f(-4,7.5);
    glVertex2f(-4,7.2);
    glVertex2f(-3.5,7.2);
    glVertex2f(-3.5,7.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(83, 74, 77 );
    glVertex2f(-3,7.5);
    glVertex2f(-2.99943, 7.20101);
    glVertex2f(-2.5,7.2);
    glVertex2f(-2.5,7.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(255, 216, 0 );
    glVertex2f(-3, 7);
    glVertex2f(-3, 6);
    glVertex2f(-2.18831, 5.99229);
    glVertex2f(-2.19379, 7.00275);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(88, 80, 71);
    glVertex2f(-4.24, 6.99);
    glVertex2f(-4.24, 6.01);
    glVertex2f(-4.2, 6);
    glVertex2f(-4.2, 6.99);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(88, 80, 71 );
    glVertex2f(-5, 5.5);
    glVertex2f(-2, 5.5);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(88, 80, 71 );
    glVertex2f(-5, 5.2);
    glVertex2f(-2, 5.2);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(88, 80, 71  );
    glVertex2f(-5, 5.5);
    glVertex2f(-5, 5.2);
    glVertex2f(-4.49893, 5.19159);
    glVertex2f(-4.5, 5.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(88, 80, 71 );
    glVertex2f(-2.5, 7);
    glVertex2f(-2.49928, 5.99569);
    glVertex2f(-2.45001, 5.9937);
    glVertex2f(-2.45, 7);
    glEnd();


    //BUILDING 3
    glBegin(GL_POLYGON);
    glColor3ub(171, 136, 59  );
    glVertex2f(-0.5, 8.5);
    glVertex2f(-0.5, 4);
    glVertex2f(1, 4);
    glVertex2f(1, 8.5);
    glEnd();

    //BUILDING 3 WINDWOS
    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(-0.2, 8.2);
    glVertex2f(-0.2, 7.8);
    glVertex2f(0.2, 7.8);
    glVertex2f(0.2, 8.2);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(0.4, 8.2);
    glVertex2f(0.4, 7.8);
    glVertex2f(0.8, 7.8);
    glVertex2f(0.8, 8.2);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(-0.2, 7.4);
    glVertex2f(-0.2, 7);
    glVertex2f(0.2, 7);
    glVertex2f(0.2, 7.4);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(0.4, 7.4);
    glVertex2f(0.4, 7);
    glVertex2f(0.8, 7);
    glVertex2f(0.8, 7.4);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(-0.2, 6.6);
    glVertex2f(-0.2, 6.2);
    glVertex2f(0.2, 6.2);
    glVertex2f(0.2, 6.6);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(0.4, 6.6);
    glVertex2f(0.4, 6.2);
    glVertex2f(0.8, 6.2);
    glVertex2f(0.8, 6.6);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(-0.2, 5.8);
    glVertex2f(-0.2, 5.4);
    glVertex2f(0.2, 5.4);
    glVertex2f(0.2, 5.8);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(0.4, 5.8);
    glVertex2f(0.4, 5.4);
    glVertex2f(0.8, 5.4);
    glVertex2f(0.8, 5.8);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(-0.2, 5);
    glVertex2f(-0.2, 4.6);
    glVertex2f(0.2, 4.6);
    glVertex2f(0.2, 5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(218, 205, 215  );
    glVertex2f(0.4, 5);
    glVertex2f(0.4, 4.6);
    glVertex2f(0.8, 4.6);
    glVertex2f(0.8, 5);
    glEnd();

    }

}
float al_moveship=0.0f;
void al_ship()
{
    glPushMatrix();
    glTranslatef(al_moveship,0,0);
    glBegin(GL_POLYGON);
    glColor3ub(32,32,32 );
    glVertex2f(-7.98498, 1.49205);
    glVertex2f(-8, 0);
    glVertex2f(-3.61,0);
    glVertex2f(-3, 1.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(0,0,0 );
    glVertex2f(-3.70808, 2.30399);
    glVertex2f(-4.23209, 1.50141);
    glVertex2f(-3, 1.5);
    glVertex2f(-2.38985, 2.23711);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(32,32,32 );
    glVertex2f(-7.98498, 1.49205);
    glVertex2f(-8, 2);
    glVertex2f(-7, 2);
    glVertex2f(-6.5, 1.5);
    glEnd();
    //up building
    glBegin(GL_POLYGON);
    glColor3ub(32,32,32 );
    glVertex2f(-7.6, 4.8);
    glVertex2f(-7.60233, 3.50385);
    glVertex2f(-6.6983, 3.4958);
    glVertex2f(-6.6, 4.8);
    glEnd();
    //up building windows
    glBegin(GL_POLYGON);
    glColor3ub(233,210,20 );
    glVertex2f(-7.5, 4.7);
    glVertex2f(-7.5, 4.5);
    glVertex2f(-7.3, 4.5);
    glVertex2f(-7.3, 4.7);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(233,210,20  );
    glVertex2f(-7.1, 4.7);
    glVertex2f(-7.1, 4.5);
    glVertex2f(-6.9, 4.5);
    glVertex2f(-6.9, 4.7);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(233,210,20 );
    glVertex2f(-6.7, 4.7);
    glVertex2f(-6.7, 4.5);
    glVertex2f(-6.62058, 4.49952);
    glVertex2f(-6.61326, 4.69931);
    glEnd();

    //SHIP BORDER
    glBegin(GL_POLYGON);
    glColor3ub(229, 239, 219  );
    glVertex2f(-8, 1.2);
    glVertex2f(-8, 1);
    glVertex2f(-3.2, 1);
    glVertex2f(-3.13804, 1.19566);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(221, 176, 238  );
    glVertex2f(-6.4, 0.8);
    glVertex2f(-6, 0.8);
    glVertex2f(-6, 0.6);
    glVertex2f(-6.2, 0.6);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(221, 176, 238  );
    glVertex2f(-6.2, 0.4);
    glVertex2f(-6, 0.4);
    glVertex2f(-6, 0.2);
    glVertex2f(-6.4, 0.2);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(221, 176, 238  );
    glVertex2f(-6.4, 0.8);
    glVertex2f(-6.4, 0.2);
    glVertex2f(-6.2, 0.4);
    glVertex2f(-6.2, 0.6);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(221, 176, 238  );
    glVertex2f(-5.4, 0.8);
    glVertex2f(-5.2, 0.2);
    glVertex2f(-5.35396, 0.19865);
    glVertex2f(-5.4, 0.4);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(221, 176, 238  );
    glVertex2f(-5.6, 0.8);
    glVertex2f(-5.8, 0.2);
    glVertex2f(-5.647, 0.20067);
    glVertex2f(-5.6, 0.4);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(221, 176, 238  );
    glVertex2f(-5.6, 0.8);
    glVertex2f(-5.6, 0.4);
    glVertex2f(-5.4, 0.4);
    glVertex2f(-5.4, 0.8);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3ub(107, 113, 86 );
    glVertex2f(-5.5, 0.7);
    glVertex2f(-5.58114, 0.50273);
    glVertex2f(-5.41561, 0.50094);
    glEnd();
    //ship type
    glBegin(GL_POLYGON);
    glColor3ub(221, 176, 238 );
    glVertex2f(-5, 0.8);
    glVertex2f(-5, 0.2);
    glVertex2f(-4.8, 0.2);
    glVertex2f(-4.8, 0.8);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(229, 239, 219  );
    glVertex2f(-3.6, 0.6);
    glVertex2f(-3.60168, 0.51732);
    glVertex2f(-3.39824, 0.51776);
    glVertex2f(-3.36882, 0.59783);
    glEnd();
    //room bar
    glBegin(GL_POLYGON);
    glColor3ub(229, 239, 219  );
    glVertex2f(-3.65, 0.5);
    glVertex2f(-3.65, 0.45);
    glVertex2f(-3.42614, 0.44871);
    glVertex2f(-3.40669, 0.49902);
    glEnd();
    //room bar
    glBegin(GL_POLYGON);
    glColor3ub(189, 192, 83  );
    glVertex2f(-8, 3.5);
    glVertex2f(-8, 2);
    glVertex2f(-7.8, 2);
    glVertex2f(-7.8, 3.2);
    glEnd();
    //room bar
    glBegin(GL_POLYGON);
    glColor3ub(189, 192, 83   );
    glVertex2f(-8, 3.5);
    glVertex2f(-6.5, 3.5);
    glVertex2f(-6.50487, 3.19001);
    glVertex2f(-7.8, 3.2);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(54, 54, 47  );
    glVertex2f(-3.2, 2.6);
    glVertex2f(-3.20445, 2.27663);
    glVertex2f(-2.38985, 2.23711);
    glVertex2f(-2.36868, 2.54196);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(11, 136, 213 );
    glVertex2f(-3.12972, 2.55525);
    glVertex2f(-3.13358, 2.27449);
    glVertex2f(-2.44137, 2.23695);
    glVertex2f(-2.42464, 2.5027);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(54, 54, 47  );
    glVertex2f(-3.00105, 2.54474);
    glVertex2f(-3.00579, 2.27042);

    glBegin(GL_LINES);
    glColor3ub(54, 54, 47  );
    glVertex2f(-2.85938, 2.53454);
    glVertex2f(-2.86387, 2.26203);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(54, 54, 47 );
    glVertex2f(-2.71657, 2.52406);
    glVertex2f(-2.72286, 2.25574);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(54, 54, 47  );
    glVertex2f(-2.56119, 2.51463);
    glVertex2f(-2.57107, 2.24631);
    glEnd();
    //bar
    glBegin(GL_POLYGON);
    glColor3ub(77, 77, 68  );
    glVertex2f(-6.5, 3.5);
    glVertex2f(-6.50487, 3.19001);
    glVertex2f(-6.41035, 3.15077);
    glVertex2f(-6.40637, 3.4511);
    glEnd();
    //1st room
    glBegin(GL_POLYGON);
    glColor3ub(152,2,2 );
    glVertex2f(-7.8, 3.2);
    glVertex2f(-7.8, 2);
    glVertex2f(-6.5, 1.5);
    glVertex2f(-6.6, 3.2);
    glEnd();

    glColor3ub(255, 195, 0 );
    al_circle (0.21,-7.53195,2.67895);
    glEnd();

    //container on ship
    glBegin(GL_POLYGON);
    glColor3ub(97,7,7  );
    glVertex2f(-6, 2);
    glVertex2f(-6, 1.5);
    glVertex2f(-5.5, 1.5);
    glVertex2f(-5.5, 2);
    glEnd();
    //3rd containerr
    glBegin(GL_POLYGON);
    glColor3ub(97,7,7   );
    glVertex2f(-5.3, 2);
    glVertex2f(-5.3, 1.5);
    glVertex2f(-4.8, 1.5);
    glVertex2f(-4.8, 2);
    glEnd();
    //2nd container
    glBegin(GL_POLYGON);
    glColor3ub(0,135,50  );
    glVertex2f(-5.64924, 2.49768);
    glVertex2f(-5.64919, 2.00411);
    glVertex2f(-4.9375, 2.00684);
    glVertex2f(-4.9366, 2.49768);
    glEnd();
    glPopMatrix();
}
bool al_shipmoving = true;
void al_update_ship(int value)
{
    if(al_shipmoving){
        al_moveship+=0.02f;
    if(al_moveship>+18.0f)
        {
        al_moveship=-10.0f;
        }
    }
    glutPostRedisplay();
    glutTimerFunc(20,al_update_ship,0);

}


void al_bus_stop()
{
    glBegin(GL_POLYGON);
    glColor3ub(5, 3, 0  );
    glVertex2f(1.24349, -3.29793);
    glVertex2f(1.23583, -4.49923);
    glVertex2f(1.32844, -4.49923);
    glVertex2f(1.33691, -3.29477);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(26, 192, 172  );
    glVertex2f(1.14167, -3.40727);
    glVertex2f(1.1494, -3.80751);
    glVertex2f(1.42792, -3.81052);
    glVertex2f(1.44339, -3.40426);
    glEnd();

    glColor3ub(236, 65, 23 );
    al_circle (0.34,1.29292,-2.95089);

    glEnd();

    glColor3ub(255, 254, 254 );
    al_circle (0.14,1.29292,-2.95089);

    glEnd();

}
void al_furnace()
{
    glBegin(GL_POLYGON);
    glColor3ub(155, 158, 123  );
    glVertex2f(3.2, 5.6);
    glVertex2f(3, 4);
    glVertex2f(4.5, 4);
    glVertex2f(4.30961, 5.60558);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(155, 158, 123  );
    glVertex2f(3, 7);
    glVertex2f(3.2, 5.6);
    glVertex2f(4.30961, 5.60558);
    glVertex2f(4.5, 7);
    glEnd();

}
float al_movesmoke =0.0f;
void al_furnace_smoke()
{
    glPushMatrix();
    glTranslatef(0,al_movesmoke,0);
    glColor3ub(160, 165, 163);
    al_circle (0.41,3.63911,7.32656);
    glEnd();

    glColor3ub(160, 165, 163  );
    al_circle (0.18,4.14638,8.00072);
    glEnd();

    glColor3ub(199, 203, 201   );
    al_circle (0.14,3.98,7.87);
    glEnd();

    glColor3ub(199, 203, 201  );
    al_circle (0.04,3.77817,7.64095);
    glEnd();
    glPopMatrix();
}
void al_update_furnace(int value)
{
    al_movesmoke+=0.005f;
    //cout<<al_movesmoke<<endl;
    if(al_movesmoke> 3.0f)
        {
        al_movesmoke=0.0f;
        }
    glutPostRedisplay();
    glutTimerFunc(4,al_update_furnace,0);

}
void al_sun_shadow()
{
    if(day){
        glBegin(GL_QUADS);
    glColor3ub(238, 90, 30  );
    glVertex2f(7.28098, 3.94752);
     glColor3ub(11, 136, 213 );
    glVertex2f(7.8, 2.8);
    glVertex2f(9.2, 2.8);
    glColor3ub(238, 90, 30  );
    glVertex2f(9.75308, 3.94752);
    glEnd();

    glColor3ub(11, 136, 213 );
    }
    else{

    }
}
void al_lamp()
{
    glBegin(GL_POLYGON);
    glColor3ub(0,0,0  );
    glVertex2f(-9.2, -2.5);
    glVertex2f(-9.2, -4.5);
    glVertex2f(-9.15, -4.5);
    glVertex2f(-9.15, -2.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(0,0,0  );
    glVertex2f(-4.50664, -2.53045);
    glVertex2f(-4.51299, -4.49931);
    glVertex2f(-4.44344, -4.50945);
    glVertex2f(-4.44344, -2.53109);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(0,0,0  );
    glVertex2f(3.15, -2.5);
    glVertex2f(3.15, -4.5);
    glVertex2f(3.20634, -4.50121);
    glVertex2f(3.2, -2.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(0,0,0  );
    glVertex2f(3.1, -2.5);
    glVertex2f(3.1, -2.6);
    glVertex2f(3.4, -2.6);
    glVertex2f(3.4, -2.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(0,0,0  );
    glVertex2f(-4.60273, -2.53043);
    glVertex2f(-4.6, -2.64);
    glVertex2f(-4.2, -2.64);
    glVertex2f(-4.20082, -2.53208);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(0,0,0  );
    glVertex2f(-9.3, -2.5);
    glVertex2f(-9.3, -2.6);
    glVertex2f(-8.95, -2.6);
    glVertex2f(-8.95, -2.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(245, 205, 5  );
    glVertex2f(-9.05, -2.6);
    glVertex2f(-9.05, -2.7);
    glVertex2f(-8.96617, -2.70137);
    glVertex2f(-8.9667, -2.5994);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(245, 205, 5  );
    glVertex2f(-4.33939, -2.63974);
    glVertex2f(-4.33792, -2.79976);
    glVertex2f(-4.22438, -2.79976);
    glVertex2f(-4.22585, -2.63974);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(245, 205, 5  );
    glVertex2f(3.24849, -2.5992);
    glVertex2f(3.25, -2.7);
    glVertex2f(3.35, -2.7);
    glVertex2f(3.35061, -2.5992);
    glEnd();



}
void al_ice_cream_shop()
{
    glBegin(GL_POLYGON);
    glColor3ub(245, 169, 5   );
    glVertex2f(8, -3);
    glVertex2f(8, -4);
    glVertex2f(9.5, -4);
    glVertex2f(9.5, -3);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(223, 177, 80   );
    glVertex2f(7.49949, -3.24919);
    glVertex2f(7.5, -4);
    glVertex2f(8, -4);
    glVertex2f(8, -3);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(0,0,0   );
    glVertex2f(8.25181, -2.3292);
    glVertex2f(8.24998, -3.00249);
    glVertex2f(8.3, -3);
    glVertex2f(8.29853, -2.33271);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(0,0,0   );
    glVertex2f(9.29927, -2.32484);
    glVertex2f(9.3, -3);
    glVertex2f(9.35, -3);
    glVertex2f(9.34993, -2.32543);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(228, 208, 166   );
    glVertex2f(8, -1.5);
    glVertex2f(7.99649, -2.28108);
    glVertex2f(9.59582, -2.28108);
    glVertex2f(9.6, -1.5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(0,0,0  );
    glVertex2f(8.4, -1.6);
    glVertex2f(8.4, -2.2);
    glVertex2f(8.5, -2.2);
    glVertex2f(8.5, -1.6);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(0,0,0  );
    glVertex2f(8.87709, -1.59964);
    glVertex2f(8.7062, -1.89362);
    glVertex2f(8.84186, -1.89568);
    glVertex2f(9, -1.6);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(0,0,0  );
    glVertex2f(8.7062, -1.89362);
    glVertex2f(8.87709, -2.202);
    glVertex2f(9, -2.2);
    glVertex2f(8.84186, -1.89568);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(0,0,0  );
    glVertex2f(9.2, -1.6);
    glVertex2f(9.2, -2.2);
    glVertex2f(9.4, -2.2);
    glVertex2f(9.4, -1.6);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(228, 208, 166  );
    glVertex2f(9.3, -1.7);
    glVertex2f(9.3, -1.9);
    glVertex2f(9.4, -1.9);
    glVertex2f(9.4, -1.7);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(0,0,0  );
    glVertex2f(9.3, -1.9);
    glVertex2f(9.30154, -1.94679);
    glVertex2f(9.39909, -1.94849);
    glVertex2f(9.4, -1.9);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(228, 208, 166  );
    glVertex2f(9.30154, -1.94679);
    glVertex2f(9.3, -2.1);
    glVertex2f(9.4, -2.1);
    glVertex2f(9.39909, -1.94849);
    glEnd();
}
void al_tree()
{
    glBegin(GL_POLYGON);
    glColor3ub(99, 71, 12  );
    glVertex2f(6, -3.1);
    glVertex2f(6.1, -3.1);
    glVertex2f(6.1, -4);
    glVertex2f(6, -4);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(99, 71, 12  );
    glVertex2f(6, -3.1);
    glVertex2f(6.1, -3.1);
    glVertex2f(6.1, -4);
    glVertex2f(6, -4);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3ub(51, 117, 13   );
    glVertex2f(6.04656, -2.49662);
    glVertex2f(5.6, -3.4);
    glVertex2f(6.6, -3.4);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3ub(67, 158, 14  );
    glVertex2f(6.05367, -1.80009);
    glVertex2f(5.6, -3);
    glVertex2f(6.53778, -3.00293);
    glEnd();


}
void al_man()
{
    glColor3ub(0,0,0 );
    al_circle (0.11,7.11007,-3.40614);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(247, 243, 112  );
    glVertex2f(7.06255, -3.50986);
    glVertex2f(7.00336, -3.72281);
    glVertex2f(7.20311, -3.72568);
    glVertex2f(7.17845, -3.51274);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(21, 69, 107  );
    glVertex2f(7.00336, -3.72281);
    glVertex2f(7.00583, -3.93863);
    glVertex2f(7.05268, -3.93863);
    glVertex2f(7.09954, -3.79475);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(21, 69, 107  );
    glVertex2f(7.09954, -3.79475);
    glVertex2f(7.14886, -3.94151);
    glVertex2f(7.19078, -3.93863);
    glVertex2f(7.20311, -3.72568);
    glEnd();



}
float al_movemen =0.0f;
void al_men()
{
    glPushMatrix();
    glTranslatef(al_movemen,0,0);
    glBegin(GL_POLYGON);
    glColor3ub(0,0,0 );
    glVertex2f(4.2, -2.4);
    glVertex2f(4.14199, -2.59758);
    glVertex2f(4.44265, -2.59758);
    glVertex2f(4.4, -2.4);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(225, 224, 186  );
    glVertex2f(4.14199, -2.59758);
    glVertex2f(4.13872, -2.89885);
    glVertex2f(4.44265, -2.90266);
    glVertex2f(4.44265, -2.59758);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(225, 224, 186  );
    glVertex2f(4.25, -2.85);
    glVertex2f(4.25, -3.05);
    glVertex2f(4.35, -3.05);
    glVertex2f(4.35, -2.85);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(226, 14, 236  );
    glVertex2f(4.09897, -3.0519);
    glVertex2f(4.1, -3.1);
    glVertex2f(4.5, -3.1);
    glVertex2f(4.49927, -3.0498);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(226, 14, 236  );
    glVertex2f(4.15, -3.1);
    glVertex2f(4.15, -3.4);
    glVertex2f(4.45, -3.4);
    glVertex2f(4.45, -3.1);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(14, 3, 250   );
    glVertex2f(4.15, -3.4);
    glVertex2f(4.15, -4);
    glVertex2f(4.45, -4);
    glVertex2f(4.45, -3.4);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3ub(159, 243, 107   );
    glVertex2f(4.3, -3.5);
    glVertex2f(4.25, -4);
    glVertex2f(4.35, -4);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(225, 224, 186   );
    glVertex2f(4.1, -3.1);
    glVertex2f(4.1, -3.35);
    glVertex2f(4.15, -3.35);
    glVertex2f(4.15, -3.1);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(225, 224, 186   );
    glVertex2f(4.45, -3.1);
    glVertex2f(4.45, -3.35);
    glVertex2f(4.5, -3.35);
    glVertex2f(4.5, -3.1);
    glEnd();
    glPopMatrix();
}
void al_update_men(int value)
{
    al_movemen-=0.02f;
    if(al_movemen<-18.0f)
        {
        al_movemen=+10.0f;
        }
    glutPostRedisplay();
    glutTimerFunc(25,al_update_men,0);

}


//Screen four start from here

void rectangle(float x1, float y1, float x2, float y2, float r, float g, float b) {
    glBegin(GL_POLYGON);
    glColor3ub(r, g, b); // Set the rectangle's color
    glVertex2f(x1, y1); // Bottom-left corner
    glVertex2f(x2, y1); // Bottom-right corner
    glVertex2f(x2, y2); // Top-right corner
    glVertex2f(x1, y2); // Top-left corner
    glEnd();
}

void S_triangle(float x1, float y1, float x2, float y2, float x3, float y3, float r, float g, float b) {
    glBegin(GL_TRIANGLES);
    glColor3ub(r, g, b); // Set the color of the S_triangle
    glVertex2f(x1, y1); // First vertex
    glVertex2f(x2, y2); // Second vertex
    glVertex2f(x3, y3); // Third vertex
    glEnd();
}




void drawCircle(float cx, float cy, float r, float red, float green, float blue) {
    glBegin(GL_TRIANGLE_FAN);
    glColor3ub(red, green, blue); // Set the color
    glVertex2f(cx, cy); // Center of the circle
    for (int i = 0; i <= 360; i++) {
        float theta = i * 3.14159f / 180; // Angle in radians
        glVertex2f(cx + r * cos(theta), cy + r * sin(theta));
    }
    glEnd();
}

void circle(float r, float x, float y)
{
    glBegin(GL_POLYGON);
	for(int i=0;i<200;i++)
        {
            glColor3f(1.0,1.0,1.0);
            float pi=3.1416;
            float A=(i*2*pi)/200;
            float x = r * cos(A);
            float y = r * sin(A);
            glVertex2f(x,y);
        }
        glEnd();
}

void drawLine(float x1, float y1, float x2, float y2, float red, float green, float blue, float lineWidth) {
    glLineWidth(lineWidth);           // Set the width of the line
    glBegin(GL_LINES);
    glColor3ub(red, green, blue);      // Set the color of the line
    glVertex2f(x1, y1);               // Starting point of the line
    glVertex2f(x2, y2);               // Ending point of the line
    glEnd();
}



// Draw the white dashed line on the road





void lines(){
    drawLine(-10,-2.7,10,-2.7,0,0,0,2);
    drawLine(-8.5,-2.7,-8.5,-3.8,0,0,0,2);
    drawLine(-7,-2.7,-7,-3.8,0,0,0,2);
    drawLine(-5.5,-2.7,-5.5,-3.8,0,0,0,2);
    drawLine(-4,-2.7,-4,-3.8,0,0,0,2);
    drawLine(-2.5,-2.7,-2.5,-3.8,0,0,0,2);
    drawLine(-1,-2.7,-1,-3.8,0,0,0,2);
    drawLine(0.5,-2.7,0.5,-3.8,0,0,0,2);
    drawLine(2,-2.7,2,-3.8,0,0,0,2);
    drawLine(3.5,-2.7,3.5,-3.8,0,0,0,2);
    drawLine(3.5,-2.7,3.5,-3.8,0,0,0,2);
    drawLine(5,-2.7,5,-3.8,0,0,0,2);
    drawLine(6.5,-2.7,6.5,-3.8,0,0,0,2);
    drawLine(8,-2.7,8,-3.8,0,0,0,2);
    drawLine(9.5,-2.7,9.5,-3.8,0,0,0,2);
    drawLine(-10,-3.8,10,-3.8,0,0,0,2);
    drawLine(-8,-7,-7,-7,196,196,196,4);


}


   void drawsky() {
    if(day){
        int skyTopColorR = 5, skyTopColorG = 47, skyTopColorB = 115; // Sky blue
    int skyBottomColorR = 255, skyBottomColorG = 255, skyBottomColorB = 255; // White

    float topY = 10.0;   // Top boundary of the sky
    float bottomY = 6.0; // Bottom boundary of the sky

    // Loop to create the gradient
    for (float y = topY; y > bottomY; y -= 0.01) { // Decrease y in small steps
        float t = (y - bottomY) / (topY - bottomY); // Normalize y for interpolation (0.0 to 1.0)

        // Interpolate the colors
        int r = skyTopColorR * t + skyBottomColorR * (1 - t);
        int g = skyTopColorG * t + skyBottomColorG * (1 - t);
        int b = skyTopColorB * t + skyBottomColorB * (1 - t);

        drawLine(-10, y, 10, y, r, g, b, 1); // Draw each line across the sky
    }


    }

    else{
       int skyTopColorR = 0, skyTopColorG = 0, skyTopColorB = 0; // Sky blue
    int skyBottomColorR = 255, skyBottomColorG = 255, skyBottomColorB = 255; // White

    float topY = 10.0;   // Top boundary of the sky
    float bottomY = 6.0; // Bottom boundary of the sky

    // Loop to create the gradient
    for (float y = topY; y > bottomY; y -= 0.01) { // Decrease y in small steps
        float t = (y - bottomY) / (topY - bottomY); // Normalize y for interpolation (0.0 to 1.0)

        // Interpolate the colors
        int r = skyTopColorR * t + skyBottomColorR * (1 - t);
        int g = skyTopColorG * t + skyBottomColorG * (1 - t);
        int b = skyTopColorB * t + skyBottomColorB * (1 - t);

        drawLine(-10, y, 10, y, r, g, b, 1); // Draw each line across the sky
    }


}
   }

float cloudMove = 0.0f; // Movement variable for clouds

void drawClouds() {
    glPushMatrix();
    glTranslatef(cloudMove,0,0);

    drawCircle(-6.19207, 9.17339, 0.3, 186, 190, 168);
    drawCircle(-5.85447, 8.76012, 0.3, 186, 190, 168);
    drawCircle(-5.13852, 9.17339, 0.3, 186, 190, 168);
    drawCircle(-5.10942, 9.45279, 0.3, 186, 190, 168);
    drawCircle(-5.51105, 9.24324, 0.3, 186, 190, 168);
    drawCircle(-5.5, 9, 0.3, 186, 190, 168);
    drawCircle(-5.83701, 9.36548, 0.3, 186, 190, 168);

    // Draw cloud group 2
    drawCircle(3.08238, 8.16259, 0.5, 186, 190, 168);
    drawCircle(4.16006, 8.79652, 0.5, 186, 190, 168);
    drawCircle(3.33595, 8.53238, 0.5, 186, 190, 168);
    drawCircle(2.83409, 9.2297, 0.5, 186, 190, 168);
    drawCircle(3.52613, 9.37234, 0.5, 186, 190, 168);
    drawCircle(3.32011, 9.17159, 0.5, 186, 190, 168);
    drawCircle(2.37113, 8.62713, 0.5, 186, 190, 168);
    //glEnd();

    glPopMatrix();
}

void updateClouds(int value) {
    cloudMove += 0.005f; // Increment the movement
    if (cloudMove > 10.0f) { // Reset position when moving out of bounds
        cloudMove = -10.0f;
    }

    glutPostRedisplay(); // Request a redraw
    glutTimerFunc(20, updateClouds, 0); // Schedule the next update
}



void drawSun(float r, float x, float y) {
    glBegin(GL_TRIANGLE_FAN);

    // Center of the sun

            glColor3ub(255, 255, 0);

            // Bright yellow at the center
    glVertex2f(x, y);


    for (int i = 0; i <= 200; i++) {
        float pi = 3.1416;
        float A = (i * 2 * pi) / 200; // Angle in radians
        float xOffset = r * cos(A);  // X offset for the circle
        float yOffset = r * sin(A);  // Y offset for the circle

        // Color gradient (fades from yellow to orange or red at the edge)
        float gradientFactor = 0.5; // Adjust this to control the gradient intensity
        glColor3f(1.0, 1.0 * gradientFactor, 0.0 * gradientFactor); // Faded yellow

        glVertex2f(x + xOffset, y + yOffset);
    }

    glEnd();
}




void drawseaport(){
    if(day){
        rectangle(-10,1,10,6,203,189,147);
    drawLine(-10,1,10,1,255,255,255,2);
    }
    else{
        rectangle(-10,1,10,6,200, 170, 78);
    drawLine(-10,1,10,1,255,255,255,2);
    }

}




void drawWarehouse1(){
    // Walls: Soft grayish-blue
    rectangle(-9, 5, -7, 6.5, 135, 165, 200);

    // Roof: Brick red
    S_triangle(-9, 6.5, -8, 7.5, -7, 6.5, 150, 50, 50);

    // Lines for roof
    drawLine(-9, 6.5, -7, 6.5, 0, 0, 0, 1);

    // Door: Dark wood color
    rectangle(-8.4, 5, -7.6, 5.8, 110, 70, 50);

    // Line for door separation
    drawLine(-8, 5.8, -8, 5, 0, 0, 0, 1);
}

void drawWarehouse2(){
    // Walls: Soft grayish-blue
    rectangle(-4.5, 5, -2.5, 6.5, 135, 165, 200);

    // Roof: Brick red
    S_triangle(-4.5, 6.5, -3.5, 7.5, -2.5, 6.5, 150, 50, 50);

    // Lines for roof
    drawLine(-4.5, 6.5, -2.5, 6.5, 0, 0, 0, 1);

    // Door: Dark wood color
    rectangle(-3.8, 5, -3.2, 5.8, 110, 70, 50);

    // Line for door separation
    drawLine(-3.5, 5.8, -3.5, 5, 0, 0, 0, 1);
}


void drawcontainer(){
    // First container
rectangle(-6.5, 5.5, -5, 6, 156, 83, 10); // Bottom section
drawLine(-6.4, 5.5, -6.4, 6, 0, 0, 0, 2); // Vertical line
drawLine(-6.2, 5.5, -6.2, 6, 0, 0, 0, 2); // Vertical line
drawLine(-6.0, 5.5, -6.0, 6, 0, 0, 0, 2); // Vertical line
drawLine(-6.5, 6, -5, 6, 0, 0, 0, 2); // Horizontal line

rectangle(-6.5, 6, -5, 6.5, 19, 156, 10); // Mid section
drawLine(-6.4, 6, -6.4, 6.5, 0, 0, 0, 2); // Vertical line
drawLine(-6.2, 6, -6.2, 6.5, 0, 0, 0, 2); // Vertical line
drawLine(-6.0, 6, -6.0, 6.5, 0, 0, 0, 2); // Vertical line
drawLine(-6.5, 6.5, -5, 6.5, 0, 0, 0, 2); // Horizontal line

rectangle(-6.5, 6.5, -5, 7, 156, 100, 200); // Top section
drawLine(-6.4, 6.5, -6.4, 7, 0, 0, 0, 2); // Vertical line
drawLine(-6.2, 6.5, -6.2, 7, 0, 0, 0, 2); // Vertical line
drawLine(-6.0, 6.5, -6.0, 7, 0, 0, 0, 2); // Vertical line
drawLine(-6.5, 7, -5, 7, 0, 0, 0, 2); // Horizontal line

rectangle(-6.5, 7, -5, 7.5, 77, 26, 19); // Topmost section
drawLine(-6.4, 7, -6.4, 7.5, 0, 0, 0, 2); // Vertical line
drawLine(-6.2, 7, -6.2, 7.5, 0, 0, 0, 2); // Vertical line
drawLine(-6.0, 7, -6.0, 7.5, 0, 0, 0, 2); // Vertical line
drawLine(-6.5, 7.5, -5, 7.5, 0, 0, 0, 2); // Horizontal line


// Second container
rectangle(6, 3, 7.5, 4, 156, 83, 10); // Bottom section
drawLine(6.2, 3, 6.2, 4, 0, 0, 0, 2); // Vertical line
drawLine(6.4, 3, 6.4, 4, 0, 0, 0, 2); // Vertical line
drawLine(6.6, 3, 6.6, 4, 0, 0, 0, 2); // Vertical line

rectangle(8, 3, 9.5, 4, 77, 26, 19); // Bottom section
drawLine(8.2, 3, 8.2, 4, 0, 0, 0, 2); // Vertical line
drawLine(8.4, 3, 8.4, 4, 0, 0, 0, 2); // Vertical line
drawLine(8.6, 3, 8.6, 4, 0, 0, 0, 2); // Vertical line

rectangle(6, 4.5, 7.5, 5.5, 77, 26, 19); // Mid section
drawLine(6.2, 4.5, 6.2, 5.5, 0, 0, 0, 2); // Vertical line
drawLine(6.4, 4.5, 6.4, 5.5, 0, 0, 0, 2); // Vertical line
drawLine(6.6, 4.5, 6.6, 5.5, 0, 0, 0, 2); // Vertical line

rectangle(4, 3, 5.5, 4, 77, 26, 19); // Bottom section
drawLine(4.2, 3, 4.2, 4, 0, 0, 0, 2); // Vertical line
drawLine(4.4, 3, 4.4, 4, 0, 0, 0, 2); // Vertical line
drawLine(4.6, 3, 4.6, 4, 0, 0, 0, 2); // Vertical line

rectangle(4, 4.5, 5.5, 5.5, 83, 34, 19); // Top section
drawLine(4.2, 4.5, 4.2, 5.5, 0, 0, 0, 2); // Vertical line
drawLine(4.4, 4.5, 4.4, 5.5, 0, 0, 0, 2); // Vertical line
drawLine(4.6, 4.5, 4.6, 5.5, 0, 0, 0, 2); // Vertical line

    //rectangle(4,6,5.5,7,123,255,45);


}

void drawBuilding() {
    // Walls: Soft grayish-blue (matching warehouse walls)
    rectangle(-2, 5, 2, 9, 135, 165, 200);

    // Windows: Black
    rectangle(-1.5, 5.5, -0.5, 6.5, 0, 0, 0);
    rectangle(0.5, 5.5, 1.5, 6.5, 0, 0, 0);
    rectangle(-1.5, 7.5, -0.5, 8.5, 0, 0, 0);
    rectangle(0.5, 7.5, 1.5, 8.5, 0, 0, 0);

    // Separator Line: Black
    drawLine(-2, 7, 2, 7, 0, 0, 0, 2);

    // Window Panes: White
    rectangle(-1.2, 7.6, -0.8, 8, 255, 255, 255);
    rectangle(0.8, 7.6, 1.2, 8, 255, 255, 255);
    rectangle(0.8, 5.8, 1.2, 6.2, 255, 255, 255);
    rectangle(-1.2, 5.8, -0.8, 6.2, 255, 255, 255);

    // Side Wall: Darker Grayish-Blue
    glBegin(GL_POLYGON);
    glColor3ub(110, 140, 170);
    glVertex2f(2, 5);
    glVertex2f(2, 9);
    glVertex2f(2.78175, 8.60894);
    glVertex2f(2.78175, 5);
    glEnd();
}


void drawTree(){

    rectangle(8.5, 4.4,9,6.5,108, 46, 8);
    if(day){
            drawCircle(8.35824, 6.69941,0.4,26, 128, 16);
    drawCircle(9.0041, 6.68379,0.4,26, 128, 16);
    drawCircle(8.73846, 7.15256,0.4,26, 128, 16);
    drawCircle(9.11348, 7.18902,0.4,26, 128, 16);
    drawCircle(8.19156, 7.24632,0.4,26, 128, 16);
    drawCircle(7.76966, 6.6942,0.6,26, 128, 16);
    drawCircle(8.3999, 6.09,0.6,26, 128, 16);
    drawCircle(9.1864, 6.01708,0.6,26, 128, 16);
    drawCircle(9.5, 6.5,0.4,26, 128, 16);

    }
    else{
        drawCircle(8.35824, 6.69941,0.4,19,61,9);
    drawCircle(9.0041, 6.68379,0.4,19,61,9);
    drawCircle(8.73846, 7.15256,0.4,19,61,9);
    drawCircle(9.11348, 7.18902,0.4,19,61,9);
    drawCircle(8.19156, 7.24632,0.4,19,61,9);
    drawCircle(7.76966, 6.6942,0.6,19,61,9);
    drawCircle(8.3999, 6.09,0.6,19,61,9);
    drawCircle(9.1864, 6.01708,0.6,19,61,9);
    drawCircle(9.5, 6.5,0.4,19,61,9);
    }
}


float craneMove=0.0f;
void drawCrane() {

    glPushMatrix();               // Save the current transformation state
    glTranslatef(craneMove, 0.0f, 0.0f);
    // Base rectangle (vehicle body)
    rectangle(-5.0, 1.7, -2.0, 2.7,236, 64, 13); // Orange base
    drawLine(-3.7,2,-2.1,2,75, 54, 3,8);
    drawLine(-3.7,2.3,-2.1,2.3,120, 86, 34,8);

    // Wheels
    drawCircle(-4.5, 1.5, 0.3, 0,0,0); // Left wheel
    drawCircle(-3.5, 1.5 ,0.3, 0,0,0); // Middle wheel
    drawCircle(-2.5, 1.5, 0.3, 0,0,0); // Right wheel
    drawCircle(-4.5, 1.5, 0.15, 255,255,255); // Left wheel
    drawCircle(-3.5, 1.5 ,0.15, 255,255,255); // Middle wheel
    drawCircle(-2.5, 1.5, 0.15, 255,255,255);

    // Cabin
    rectangle(-4.5, 2.7, -3.7, 3.7, 236, 64, 13); // Black cabin
    rectangle(-4.4,2.9,-3.75,3.5,255,255,255);


    // Arm (Boom) - Using a tilted rectangle
    glBegin(GL_QUADS);
    glColor3f(0.9, 0.6, 0.0); // Orange color
    glVertex2f(-3.7, 3.0);    // Bottom-left
    glVertex2f(-3.3, 3.2);    // Bottom-right
    glVertex2f(-2.5, 4.0);    // Top-right
    glVertex2f(-2.9, 3.8);    // Top-left
    glEnd();

    // Hook
    glLineWidth(2);
    glBegin(GL_LINES);
    glColor3f(0.0, 0.0, 0.0); // Black color
    glVertex2f(-2.5, 4.0);    // Hook starts at top
    glVertex2f(-2.5, 2.8);    // Hook ends here
    glEnd();

    rectangle(-2.8, 2.8, -2.2, 3.2, 236, 64, 13); // Red hook
    glPopMatrix();
}


void updateCrane(int value) {
    craneMove -= 0.02f; // Increment the movement
    if (craneMove < -10.0f) { // Reset position when moving out of bounds
        craneMove = 10.0f;
    }

    glutPostRedisplay(); // Request a redraw
    glutTimerFunc(20, updateCrane, 0); // Schedule the next update
}

void cran2(){
 glBegin(GL_POLYGON);
 glColor3ub(228,199,119);
 glVertex2f(6.2349, 9.7470);
 glVertex2f(9.7173, 9.7471);
 glVertex2f(9.4959, 9.2792);
 glVertex2f(6.4806, 9.2779);
 glEnd();

 ///lower body
 glBegin(GL_POLYGON);
 glColor3ub(48,177,206);
 glVertex2f(6.4806, 9.2779);
 glVertex2f(9.4959, 9.2779);
 glVertex2f(9.5197, 9.3294);
 glVertex2f(6.4536, 9.3294);
 glEnd();

 ///Stripe
 glBegin(GL_POLYGON);
 glColor3ub(74,74,74);
 glVertex2f(6.3303, 9.5649);
 glVertex2f(9.6308, 9.5649);
 glVertex2f(9.5980, 9.4949);
 glVertex2f(6.3670, 9.4949);
 glEnd();

 ///stick
 glBegin(GL_POLYGON);
 glColor3ub(74,74,74);
 glVertex2f(7.7114, 10.7145);
 glVertex2f(7.7434, 10.7145);
 glVertex2f(7.7434, 9.7470);
 glVertex2f(7.7114, 9.7470);
 glEnd();

 ///up
 glBegin(GL_POLYGON);
 glColor3ub(245,241,230);
 glVertex2f(7.7106, 9.9425);
 glVertex2f(7.7114, 10.7145);
 glVertex2f(7.3455, 9.9419);
 glEnd();

 glBegin(GL_POLYGON);
 glColor3ub(245,241,230);
 glVertex2f(7.9752, 9.9428);
 glVertex2f(7.7434, 11.0890);
 glVertex2f(7.7434, 9.7470);
 glEnd();}

void drawSmallWaves() {
    srand(time(0));

    int waveCount = 50;
    for (int i = 0; i < waveCount; i++) {

        float xStart = -10 + static_cast<float>(rand()) / (static_cast<float>(RAND_MAX / (10 - (-10))));
        float yStart = -3.8 + static_cast<float>(rand()) / (static_cast<float>(RAND_MAX / (1 - (-3.8))));


        float waveLength = 0.2 + static_cast<float>(rand()) / (static_cast<float>(RAND_MAX / (0.5 - 0.2)));


        drawLine(xStart, yStart, xStart + waveLength, yStart, 255, 255, 255, 1);
    }
}

void drawsea(){

    if(day){
        rectangle(-10,-3.8,10,1,103, 193, 202);
    drawSmallWaves();
    }
    else{
        rectangle(-10,-3.8,10,1,26, 66, 231);
    drawSmallWaves();
    }

}





float moveNouka=0.0f;
void drawNouka(){
    glPushMatrix();
    glTranslatef(moveNouka,0,0);

    if(day){
        glBegin(GL_POLYGON);
     glColor3ub(222, 117, 13 );
     glVertex2f(1,-2);
     glVertex2f(0.5, -1.5);
     glVertex2f(0.5, -1.5);
     glVertex2f(3, -1.5);
     glVertex2f(3, -1.5);
     glVertex2f(2.5, -2);
     glVertex2f(2.5, -2);
     glVertex2f(1,-2);
     glEnd();
    }
    else{
        glBegin(GL_POLYGON);
     glColor3ub(128, 122, 19 );
     glVertex2f(1,-2);
     glVertex2f(0.5, -1.5);
     glVertex2f(0.5, -1.5);
     glVertex2f(3, -1.5);
     glVertex2f(3, -1.5);
     glVertex2f(2.5, -2);
     glVertex2f(2.5, -2);
     glVertex2f(1,-2);
     glEnd();
    }
     drawLine(1.5, -1,0.79578, -2.37129,90, 34, 4,4);
     drawLine(1.73284, -0.87517,1.5, -1,0,0,0,2);
     drawLine(1.45, -1.1,1.73284, -0.87517,0,0,0,2);
     drawLine(1.74, -0.88,1.74, -1,0,0,0,15);
     drawCircle(1.73284, -0.7156,0.15,42, 42, 38);
     glBegin(GL_POLYGON);
     glColor3ub(72, 78, 12);
     glVertex2f(1.6, -1.5);
     glVertex2f(1.66498, -0.95);
     glVertex2f(1.9, -1);
     glVertex2f(2,-1.5);
     glEnd();
     glPopMatrix();


}
void updateNouka(int value){
    moveNouka-=0.02f;
if(moveNouka<-10.0f){
        moveNouka=15.0f;

}

glutPostRedisplay();
glutTimerFunc(20,updateNouka,0);
}



float moveShip=0.0f;
void drawShip(){
     glPushMatrix();
     glTranslatef(moveShip,0,0);
        if(day){
            glBegin(GL_POLYGON);
     glColor3ub(91, 84, 83);
     glVertex2f(-17.14306, -0.86738);
     glVertex2f(-17.1672, -0.06886);
     glVertex2f(-12.13132, -0.05384);
     glVertex2f(-12.7459, -0.84102);
     glEnd();

     S_triangle(-17.1672, -0.06886,-17.17768, 0.15158,-15.70934, -0.08026,91, 84, 83);
     glBegin(GL_POLYGON);
     glColor3ub(91, 84, 83);
     glVertex2f(-13.35776, -0.08026);
     glVertex2f(-12.8307, 0.3381);
     glVertex2f(-11.55492, 0.31506);
     glVertex2f(-12.13132, -0.05384);
     glEnd();
     glBegin(GL_POLYGON);
     glColor3ub(165, 40, 14);
     glVertex2f(-17.17768, 0.15158);
     glVertex2f(-17.2, 0.8);
     glVertex2f(-15.7561, 0.8149);
     glVertex2f(-15.70934, -0.08026);
     glEnd();
        }
        else{
            glBegin(GL_POLYGON);
     glColor3ub(40, 40, 37);
     glVertex2f(-17.14306, -0.86738);
     glVertex2f(-17.1672, -0.06886);
     glVertex2f(-12.13132, -0.05384);
     glVertex2f(-12.7459, -0.84102);
     glEnd();

     S_triangle(-17.1672, -0.06886,-17.17768, 0.15158,-15.70934, -0.08026,40,40,37);
     glBegin(GL_POLYGON);
     glColor3ub(40, 40, 37);
     glVertex2f(-13.35776, -0.08026);
     glVertex2f(-12.8307, 0.3381);
     glVertex2f(-11.55492, 0.31506);
     glVertex2f(-12.13132, -0.05384);
     glEnd();
     glBegin(GL_POLYGON);
     glColor3ub(78, 13, 9);
     glVertex2f(-17.17768, 0.15158);
     glVertex2f(-17.2, 0.8);
     glVertex2f(-15.7561, 0.8149);
     glVertex2f(-15.70934, -0.08026);
     glEnd();
        }

     drawLine(-12.30926, 0.32084,-12.3, 0.5,0,0,0,1);
     drawLine(-12.14808, 0.31102,-12.14022, 0.48008,0,0,0,1);
     drawLine(-12.00654, 0.32478,-12.01244, 0.48008,0,0,0,1);
     drawLine(-11.85716, 0.31888,-11.85912, 0.48598,0,0,0,1);
     drawLine(-11.71366, 0.31692,-11.71954, 0.46238,0,0,0,1);
     drawLine(-11.5328, 0.31888,-11.5269, 0.46042,0,0,0,1);
     drawLine(-12.3, 0.5,-11.5269, 0.46042,0,0,0,1);


     rectangle(-15.16724, -0.05914,-13.9422, 0.22492,11, 79, 129);



      glPopMatrix();

}

bool shipmoving=true;

void updateShip(int value){
   if(shipmoving){
     moveShip+=0.02f;

    if(moveShip>23.0f){
        moveShip=-12.0f;
    }
   }
    glutPostRedisplay();
    glutTimerFunc(20,updateShip,0);


}
float moveShipTwo=0.0f;
void drawshipTwo(){
     glPushMatrix();
     glTranslatef(moveShipTwo,0,0);

    if(day){
        glBegin(GL_POLYGON);
     glColor3ub(165, 40, 14);
     glVertex2f(-4, -3);
     glVertex2f(-4.24686, -2.46198);
     glVertex2f(-4.7041, -1.99451);
     glVertex2f(-4, -2);
     glVertex2f(-3.69251, -2.13717);
     glVertex2f(0.27601, -2.13717);
     glVertex2f(0.28898, -3.01906);

     glEnd();
    }else{
    glBegin(GL_POLYGON);
     glColor3ub(78, 13, 9);
     glVertex2f(-4, -3);
     glVertex2f(-4.24686, -2.46198);
     glVertex2f(-4.7041, -1.99451);
     glVertex2f(-4, -2);
     glVertex2f(-3.69251, -2.13717);
     glVertex2f(0.27601, -2.13717);
     glVertex2f(0.28898, -3.01906);

     glEnd();
     }
     rectangle(-2.5042, -2.13103,-1, -1.5,88, 14, 91);
     rectangle(-1,-2.16,0.27212, -1.49871,4, 11, 29);
      glPopMatrix();
}

void updateShipTwo(int value){
    moveShipTwo-=0.02f;

    if(moveShipTwo<-10.0f){
        moveShipTwo=15.0f;
    }
    glutPostRedisplay();
    glutTimerFunc(20,updateShipTwo,0);


}

void drawRoad(){
    rectangle(-10,-10,10,-3.8,52,52,52);
}

void drawRoadDivider() {
    float startX = -9.0f;  // Starting position of the dashed line
    float endX = 9.0f;     // Ending position of the dashed line
    float y = -7.0f;       // Fixed y-coordinate for the road divider
    float dashLength = 1.0f;  // Length of each dash
    float gap = 1.0f;         // Gap between dashes

    // Loop to draw dashes dynamically
    for (float x = startX; x < endX; x += dashLength + gap) {
        drawLine(x, y, x + dashLength, y, 255, 255, 255, 4);  // Draw a white dash
    }
}


float moveCar1=0.0f;
void drawCar1() {
    glPushMatrix();
    glTranslatef(moveCar1,0,0);

  if(day){
      // Main body of the car
    rectangle(1, -6, 5, -5, 194, 56, 29);

    // Roof of the car
    glBegin(GL_POLYGON);
    glColor3ub(194, 56, 29);
    glVertex2f(1.33166, -5.00976);
    glVertex2f(1.98797, -4.31559);
    glVertex2f(3.99475, -4.31559);
    glVertex2f(4.77631, -5.00976);
    glEnd();
  }
  else{
      // Main body of the car
    rectangle(1, -6, 5, -5, 120, 37, 21);

    // Roof of the car
    glBegin(GL_POLYGON);
    glColor3ub(120, 37, 21);
    glVertex2f(1.33166, -5.00976);
    glVertex2f(1.98797, -4.31559);
    glVertex2f(3.99475, -4.31559);
    glVertex2f(4.77631, -5.00976);
    glEnd();


  }



    // Front glass
    glBegin(GL_POLYGON);
    glColor3ub(255,255,255); // Light blue with transparency
    glVertex2f(1.6, -5);
    glVertex2f(2.2, -4.4);
    glVertex2f(2.9, -4.4);
    glVertex2f(2.9, -5);
    glEnd();



    // Back glass
    glBegin(GL_POLYGON);
    glColor3ub(255,255,255); // Light blue with transparency
    glVertex2f(3, -5);
    glVertex2f(3, -4.4);
    glVertex2f(3.8, -4.4);
    glVertex2f(4.4, -5);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(115, 125, 19); // Light blue with transparency
    glVertex2f(2.2, -5);
    glVertex2f(2.34577, -4.70084);
    glVertex2f(2.55877, -4.70343);
    glVertex2f(2.7, -5);
    glEnd();

    // Wheels (outer tire and inner wheel)
    drawCircle(2, -6, 0.5, 0, 0, 0);    // Left tire (black)
    drawCircle(2, -6, 0.3, 150, 150, 150); // Left wheel (gray)
    drawCircle(4, -6, 0.5, 0, 0, 0);     // Right tire (black)
    drawCircle(4, -6, 0.3, 150, 150, 150); // Right wheel (gray)
    drawCircle(2.07536, -4.72572,0.1,0,0,0);
    drawCircle(2.44188, -4.54994,0.1,0,0,0);
    drawLine(2.28086, -4.53744,2.10528, -4.66401,2,0,0,0);

    drawLine(2.3, -4.6,2.14,-4.7,2,0,0,0);
    glPopMatrix();




}

bool car1Moving= true;
void updateCar1(int value) {
    if (car1Moving) {
        moveCar1 -= 0.04f; // Move car1 forward
        if (moveCar1 < -10.0f) {
            moveCar1 = 10.0f; // Reset car1 position
        }
    }

    glutPostRedisplay();
    if (car1Moving) { // Only continue timer if car1 is moving
        glutTimerFunc(20, updateCar1, 0);
    }
}


float moveCar2=0.0f;

void drawCar2() {
    glPushMatrix();
    glTranslatef(moveCar2,0,0);
    if(day){
        rectangle(-8.5,-9.5, -4.5, -8.5,33, 150, 21);
    glBegin(GL_POLYGON);
    glColor3ub(33, 150, 21); // Light blue with transparency
    glVertex2f(-8, -8.5);
    glVertex2f(-7.49806, -7.79593);
    glVertex2f(-5.49862, -7.79593);
    glVertex2f(-5, -8.5);
    glEnd();
    }
    else{
        rectangle(-8.5,-9.5, -4.5, -8.5,18, 84, 11);
    glBegin(GL_POLYGON);
    glColor3ub(18, 84, 11); // Light blue with transparency
    glVertex2f(-8, -8.5);
    glVertex2f(-7.49806, -7.79593);
    glVertex2f(-5.49862, -7.79593);
    glVertex2f(-5, -8.5);
    glEnd();
    }


    // Front glass
    glBegin(GL_POLYGON);
    glColor3ub(255,255,255); // Light blue with transparency
    glVertex2f(-7.8, -8.5);
    glVertex2f(-7.4, -7.9);
    glVertex2f(-6.6, -7.9);
    glVertex2f(-6.6, -8.5);
    glEnd();

    // Back glass
    glBegin(GL_POLYGON);
    glColor3ub(255,255,255); // Light blue with transparency
    glVertex2f(-6.5, -8.5);
    glVertex2f(-6.5, -7.9);
    glVertex2f(-5.5, -7.9);
    glVertex2f(-5.1, -8.5);
    glEnd();



    // Wheels (outer tire and inner wheel)
    drawCircle(-7.5, -9.5, 0.5, 0, 0, 0);    // Left tire (black)
    drawCircle(-7.5, -9.5, 0.3, 150, 150, 150); // Left wheel (gray)
    drawCircle(-5.5, -9.5, 0.5, 0, 0, 0);     // Right tire (black)
    drawCircle(-5.5, -9.5, 0.3, 150, 150, 150); // Right wheel (gray)
    drawCircle(-5.82097, -8.08744,0.1,0,0,0);
    drawCircle(-5.48715, -8.27485,0.1,0,0,0);
    glBegin(GL_POLYGON);
    glColor3ub(115, 126, 8); // Light blue with transparency
    glVertex2f(-6, -8.5);
    glVertex2f(-5.75, -8.2);
    glVertex2f(-5.9, -8.2);
    glVertex2f(-5.65, -8.5);
    glEnd();
    drawLine(-5.7, -8.2,-5.53,-8.3,2,0,0,0);
    drawLine(-5.69018, -8.1421,-5.53,-8.25,2,0,0,0);
    glPopMatrix();







}

bool car2Moving= true;
void updateCar2(int value) {
    if (car2Moving) {
        moveCar2 += 0.04f; // Move car2 forward
        if (moveCar2 > 20.0f) {
            moveCar2 = -10.0f; // Reset car2 position
        }
    }

    glutPostRedisplay();
    glutTimerFunc(20, updateCar2, 0); // Always continue updating car2
}







void raining(int value)
{
    if (rainyDay)
    {
        rain += 5;

        glBegin(GL_LINES);

        for (int i = 1; i <=100; i++)
        {
            int x = rand() % 35-10;
            int y = rand() % 25- 15;

            glColor3ub(255, 255, 255);
            glVertex2f(x, y);
            glVertex2f(x - 0.1, y - 0.2);
        }
        glEnd();
        glutPostRedisplay();
        glutTimerFunc(15, raining, 0);
        glFlush();
    }
}





void d_handleKeypress(unsigned char key, int x, int y) //KH01
{

   if(screenOne){
     switch (key) {
        case 'd':
            d_buskeymove = !d_buskeymove; // bus

            break;

        case 'o':
            d_movekeyship = !d_movekeyship;  //ship

            break;
        case'1':
            screenOne=true;
            screenTwo=false;
            screenThree=false;
            screenFour=false;
            break;


            case'2':
            screenOne=false;
            screenTwo=true;
            screenThree=false;
            screenFour=false;
            break;
            case'3':
            screenOne=false;
            screenTwo=false;
            screenThree=true;
            screenFour=false;
            break;
            case'4':
            screenOne=false;
            screenTwo=false;
            screenThree=false;
            screenFour=true;
            break;


     }}


    else if(screenTwo){
        static bool car1Moving = false; // Use 'static' to retain its state across function calls

    switch (key) {
        case 'a':
            day=false;
            break;

        case 'w':
            day= true;
            break;

        case'1':
            screenOne=true;
            screenTwo=false;
            screenThree=false;
            screenFour=false;
            break;



            case'2':
            screenOne=false;
            screenTwo=true;
            screenThree=false;
            screenFour=false;
            break;
            case'3':
            screenOne=false;
            screenTwo=false;
            screenThree=true;
            screenFour=false;
            break;
            case'4':
            screenOne=false;
            screenTwo=false;
            screenThree=false;
            screenFour=true;
            break;



    }}

    else if(screenThree){
       switch (key) {
        case 'a':
            al_shipmoving = !al_shipmoving; // Toggle car movement state
            if (al_shipmoving) {
                // Start car movement
                glutTimerFunc(20, al_update_ship, 0);
            }
            break;


        case 'w':
            al_shipmoving=!al_shipmoving;
            break;

        case'1':
            screenOne=true;
            screenTwo=false;
            screenThree=false;
            screenFour=false;

            break;
            case'2':
            screenOne=false;
            screenTwo=true;
            screenThree=false;
            screenFour=false;break;
            case'3':
            screenOne=false;
            screenTwo=false;
            screenThree=true;
            screenFour=false;
            break;
            case'4':
            screenOne=false;
            screenTwo=false;
            screenThree=false;
            screenFour=true;
            break;


    }



    }

    else if(screenFour){
             switch (key) {
       case 'a':
            car1Moving = !car1Moving;
            if (car1Moving) {
                glutTimerFunc(20, updateCar1, 0); // Start car1 timer
            }
            break;

        case 'w':
            car2Moving = !car2Moving;
            break;

        case 'r':
            rainyDay = true;
            raining(0);
            break;

        case 'n':
            day=false;
            break;

        case 'd':
            day=true;
            break;

        case's':
            shipmoving=!shipmoving;
            break;

        case'1':
            screenOne=true;
            screenTwo=false;
            screenThree=false;
            screenFour=false;
            break;

            case'2':
            screenOne=false;
            screenTwo=true;
            screenThree=false;
            screenFour=false;break;

            case'3':
            screenOne=false;
            screenTwo=false;
            screenThree=true;
            screenFour=false;
            break;
            case'4':
            screenOne=false;
            screenTwo=false;
            screenThree=false;
            screenFour=true;
            break;





    }


    }


    glutPostRedisplay();  // Redraw the display
}


void screen4(){

      if(day){
        drawsky();

        if(rainyDay){
                drawClouds();
            }
            else{
                     drawClouds();
                drawSun(0.8, 8.27279, 8.52529);

            }
    }
    else{
    drawsky();
    drawClouds();
    drawCircle( 8.27279, 8.52529,0.8,255,255,255);
    }


    //drawClouds();
    //rdrawSun(0.8, 8.27279, 8.52529);
    drawseaport();
     drawBuilding();
    drawTree();
   drawWarehouse1();
   drawWarehouse2();
   drawcontainer();
    drawCrane();

    drawsea();
    drawshipTwo();
   lines();
   drawRoad();
    drawRoadDivider();
    drawShip();
    drawNouka();
    drawCar1();
    drawCar2();

}


void d_handleMouse(int button, int state, int x, int y)//MH01
{
	if (button == GLUT_LEFT_BUTTON)
	{
        day=true;
    }
    if (button == GLUT_RIGHT_BUTTON)
	{
	    day=false;
    }
    glutPostRedisplay();
}

void screen1(){
 d_sky();
    d_sea();
    d_seawave();
    d_portroad();
    d_wearhouse();
    d_allcontainer();
    d_car();
    d_truck();
    d_bus();
    d_sun();
    d_cloud();
    d_border();
    d_crane();
    d_windmill();
    d_ship();
    d_building();
    d_continercar();

    }

    void screen2(){

         Sky();
       cloud();
       sun();
       watchtower();
      mountain();
      building ();
     // windows();
      ground();
      tree();
      lamppost();
      road();
      car();
      truck();
      bus();
      sea();
      wave();
      smallboat();
      ship_two();
       ship_three();
    ship_one();

    }

    void screen3(){
        al_division();
al_sky();
al_sun();
al_cloud();
al_building();
al_furnace();
al_furnace_smoke();
al_border();
al_sea();
al_sun_shadow();
al_sea_flow();
al_ship();
al_grill_roadside();
al_ground();
al_men();
al_man();
al_ice_cream_shop();
al_road_border();
al_tree();
al_lamp();
al_bus_stop();
al_road();
al_cars_1();
al_cars_2();
al_road_between_under_line();
al_truck();

    }



void display()//DP01
{
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT);
	glLineWidth(2.5);


    glMatrixMode(GL_MODELVIEW);
    if(screenOne){
        screen1();
    }
    else if(screenTwo){
        screen2();
    }
    else if(screenThree){
        screen3();
    }
    else if(screenFour){
        screen4();
    }



	glFlush();
	glutSwapBuffers();

}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutCreateWindow("Transformation");
	gluOrtho2D(-10, 10, -10 ,10);
	glutInitWindowSize(320, 320);
	glutDisplayFunc(display);
	glutTimerFunc(20,  d_updatecloud, 0); //Add a timer
    glutTimerFunc(10,d_updatetrak,0);
    glutTimerFunc(10,d_updatecar,0);
    glutTimerFunc(10,d_updatebus,0);
    glutTimerFunc(20, d_updateangle1, 0);
    glutTimerFunc(9,d_updatemovewave,0);
    glutTimerFunc(20,d_updateship,0);
      glutTimerFunc(20,raidon_updatecloud,0);// cloud
glutTimerFunc(20,raidon_update_ship_one,0); // ship one
glutTimerFunc(20,raidon_update_ship_two,0); // ship two
glutTimerFunc(10,raidon_update_ship_three,0); //ship three

glutTimerFunc(10,raidon_updatebus,0); // bus
glutTimerFunc(10,raidon_updatecar,0);// car
glutTimerFunc(10,raidon_updatetruck,0); //truck
glutTimerFunc(10,raidon_update_smallboat,0); //smallboat

glutTimerFunc(10,raidon_update_wave,0);
glutTimerFunc(20,al_updatecloud,0);
glutTimerFunc(20,al_updateCar1,0);
glutTimerFunc(20,al_updateCar2,0);
glutTimerFunc(10,al_update_truck,0);
glutTimerFunc(20,al_update_ship,0);
glutTimerFunc(20,al_update_flow,0);
glutTimerFunc(10,al_update_furnace,0);
glutTimerFunc(25,al_update_men,0);
glutTimerFunc(20, updateClouds, 0);
    glutTimerFunc(20,updateCrane,0);
    glutTimerFunc(20,updateNouka,0);
    glutTimerFunc(20,updateShip,0);
    glutTimerFunc(20,updateCar1,0);
    glutTimerFunc(20,updateCar2,0);
    glutTimerFunc(20,updateShipTwo,0);

    glutKeyboardFunc(d_handleKeypress);
    glutMouseFunc(d_handleMouse);

	glutMainLoop();
	return 0;
}
